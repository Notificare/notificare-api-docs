openapi: 3.0.0
info:
  description: >-
    Unified remote push notifications, location services, actionable analytics,
    loyalty and marketing automation for iOS, Android and Web apps.

    Create user profiles, categorize your users and devices, create & schedule
    any rich and interactive notification.

    Tap into millions of App Store and Google Play users with in-app products,
    run reward and loyalty programs with digital cards in Wallet and use
    Geo-Targeting, Geo-Fencing or iBeacon technology to provide the ultimate
    messaging experience.


    Sign up for free [here](https://dashboard.notifica.re/#/sign-up).


    API calls need to be made with TLSv1.2


    The API calls below are all authenticated. There are 4 types of
    authentication credentials:


    - `email` / `password`: Used for signing in to your account and retrieving a
    session token


    - `token`: Used for all calls that need account-wide access, such as stats,
    lists of applications, etc.


    - `applicationKey` / `applicationSecret`: Only used for calls that originate
    from the device, e.g., registration, tags.


    - `applicationKey` / `masterSecret`: Used for calls that are related to a
    specific application and originate from your backend system, e.g., push,
    user segments, user lists, device lists, regions.


    All 4 types use normal Basic HTTP Authentication (username + password), in
    case of token, the password is ignored, so can be anything, e.g. "xxx"


    For more information about this API, please [contact
    us](http://notifica.re/contact).
  title: Notificare REST API
  version: '1.123.1'
  termsOfService: https://notificare.com/terms
  contact:
    name: Notificare Support
    email: support@notifica.re
    url: https://support.notifica.re
servers:
  - url: 'https://push.notifica.re'
    description: The Notificare Push API - securely connect with TLSv1.2
paths:
  /account/login:
    post:
      security:
        - Password: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/AccountSession'
          description: Created
        '401':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseError'
              example:
                error: wrong credentials
          description: Wrong credentials
        '403':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseError'
              example:
                error: account blocked
          description: Account blocked
        '404':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseError'
              example:
                error: account not found
          description: Account not found
        '429':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseError'
              example:
                error: too many login attempts
          description: Too many login attempts
      tags:
        - Account
      description: >-
        Retrieve session token based on account credentials. This request must
        be authenticated with the `email` and `password`.
      operationId: postAccountLogin
      summary: Account Login
    delete:
      security:
        - Token: []
      responses:
        '204':
          description: No Content
      tags:
        - Account
      description: >-
        Delete account session. This request must be authenticated with the
        `token`.
      operationId: deleteAccountLogin
      summary: Account Logout
  /account/login/totp:
    post:
      security:
        - Token: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/AccountSession'
          description: Created
      tags:
        - Account
      description: >-
        Provide the 6 digit code after retrieving session token with account
        credentials. This request must be authenticated with the `token`.
      requestBody:
        content:
          application/json:
            schema:
              properties:
                code:
                  description: The code generated by Google Authenticator app.
                  type: number
                  example: '123456'
              required:
                - code
              type: object
      operationId: postAccountLoginTotp
      summary: Login TOTP
  /account/2fa:
    get:
      security:
        - Token: []
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  use2FA:
                    type: boolean
                    default: false
                  totp:
                    properties:
                      configured:
                        type: boolean
                        default: false
                      verified:
                        type: boolean
                        default: false
                      date:
                        $ref: '#/components/schemas/Date'
                    type: object
                  u2f:
                    properties:
                      configured:
                        type: boolean
                        default: false
                    type: object
      tags:
        - Account
      description: >-
        Retrieve the account 2FA state. This should provide information about
        2FA functionality for your account. This request must be authenticated
        with the `token`.
      operationId: getAccount2fa
      summary: Check 2FA
  /account/2fa/totp:
    post:
      security:
        - Token: []
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  key:
                    type: string
                    example: 'xxx'
                  url:
                    type: string
                    example: 'otpauth://totp/xxx?secret=xxx&period=30&issuer=xxx'
                type: object
          description: OK
        '403':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseError'
              example:
                error: authenticator already setup
          description: Authenticator already setup
      tags:
        - Account
      description: >-
        Register your account for TOTP. This endpoint will provide you a key
        (for manual setup) and URL (to create a QRCode) that allows you to
        configure the Google Authenticator app. This request must be
        authenticated with the `token`.
      operationId: Register TOTP
      summary: Register TOTP
    delete:
      security:
        - Token: []
      responses:
        '204':
          description: Unregistered TOTP
        '403':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseError'
              example:
                error: authenticator not setup
          description: Authenticator not setup
      tags:
        - Account
      description: >-
        Unregister your account for TOTP. This endpoint will delete the setup
        for the Google Authenticator app. This request must be authenticated
        with the `token`.
      operationId: deleteAccountTotp
      summary: Unregister TOTP
  /account/2fa/enable:
    put:
      security:
        - Token: []
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              examples:
                enabled:
                  value:
                    message: "second factor enabled"
                already enabled:
                  value:
                    message: "second factor already enabled"
          description: OK
        '403':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseError'
              examples:
                not verified:
                  value:
                    error: no verified second factor
                not configured:
                  value:
                    error: no second factor configured
          description: No second factor
      tags:
        - Account
      description: >-
        At any time when your account has been configured for 2FA, you can use
        this endpoint to enable it. This request must be authenticated with the
        `token`.
      operationId: putAccount2faEnable
      summary: Enable 2FA
  /account/2fa/disable:
    put:
      security:
        - Token: []
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              examples:
                disabled:
                  value:
                    message: "second factor disabled"
                already disabled:
                  value:
                    message: "second factor already disabled"
          description: OK
      tags:
        - Account
      description: >-
        At any time when your account has been configured for 2FA and is
        enabled, you can disable it. This request must be authenticated with the
        `token`.
      operationId: putAccount2faDisable
      summary: Disable 2FA
  /application:
    get:
      security:
        - Token: []
      parameters:
        - description: The number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 50
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApplicationList'
          description: OK
      tags:
        - Application
      description: >-
        Get your active applications. This request must be authenticated with
        the `token`.
      operationId: getApplication
      summary: List Applications
    post:
      security:
        - Token: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  application:
                    $ref: '#/components/schemas/ResponseCreated'
          description: Created
      tags:
        - Application
      description: >-
        Create a new application. This request must be authenticated with the
        `token`.
      operationId: postApplication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationCreate'
      summary: Create Application
  /application/shared:
    get:
      security:
        - Token: []
      parameters:
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 50
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApplicationList'
          description: OK
      tags:
        - Application
      description: >-
        Get all the active applications that are shared with your account. This
        request must be authenticated with the `token`.
      operationId: getApplicationShared
      summary: List Shared Applications
  '/application/{application}':
    get:
      security:
        - Token: []
      parameters:
        - description: The account id of an active application.
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: application
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  application:
                    $ref: '#/components/schemas/ApplicationModel'
                type: object
          description: OK
      tags:
        - Application
      description: >-
        Get an application object. This request must be authenticated with the
        `token`.
      operationId: getApplicationById
      summary: Get Application
    put:
      security:
        - Token: []
      parameters:
        - description: The account id of an active application.
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: application
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: application changes saved
          description: OK
      tags:
        - Application
      description: >-
        Modify an application. This request must be authenticated with the
        `token`.
      operationId: putApplicationById
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationUpdate'
      summary: Update Application
    delete:
      security:
        - Token: []
      parameters:
        - description: The account id of an active application.
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: application
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: application deactivated
          description: OK
      tags:
        - Application
      description: >-
        Destroy an application. This operation can not be undone. This request
        must be authenticated with the `token`.
      operationId: deleteApplicationById
      summary: Delete Application
  /asset:
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The (partial) content type of assets to list.
          example: 'image'
          in: query
          name: type
          required: false
          schema:
            type: string
        - description: The original filename of assets to list.
          example: 'test'
          in: query
          name: name
          required: false
          schema:
            type: string
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/AssetList'
          description: OK
      tags:
        - Asset
      description: >-
        Get all the assets for an application.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getAsset
      summary: List Assets
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseKeyCreated'
              example:
                _id: 570bff9ff09c7c399e721897
                key: >-
                  3d99d18148e6f3dbcf4ff891c9a02ffb0311feccc7b9d0c8c79fee9dddde19/51b73467c0665add7abfd4bc47ebfdff843f77f58dcb12cdeb3d0c094f0e9835
          description: Created
      tags:
        - Asset
      description: >-
        Create an asset in a specific application. Uploads a file to Notificare.
        The resulting filename is the path of that file inside the notificare
        storage. This can be used as a reference to the file in further
        processing or deleting.

        The contents of the file should be in the body of the request and with
        the correct mime-type. So, e.g. an image should be of type `image/png`,
        `image/jpg` or `image/gif`, a pdf should be `application/pdf` and a
        video should be `video/mp4`.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postAsset
      requestBody:
        content:
          image/png:
            schema:
              type: string
              format: binary
          image/jpeg:
            schema:
              type: string
              format: binary
          image/gif:
            schema:
              type: string
              format: binary
          application/pdf:
            schema:
              type: string
              format: binary
          video/mp4:
            schema:
              type: string
              format: binary
      summary: Create Asset
  '/asset/{id}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The asset's id.
          example: 5245bc5b3e66a3b01fff24d4
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  asset:
                    $ref: '#/components/schemas/AssetModel'
                type: object
          description: OK
      tags:
        - Asset
      description: >-
        Get the asset.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getAssetById
      summary: Get Asset
    put:
      security:
        - MasterSecret: []
      parameters:
        - description: The asset's id.
          example: 5245bc5b3e66a3b01fff24d4
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: asset updated
          description: OK
      tags:
        - Asset
      description: >-
        Modify a specific asset.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: putAssetById
      requestBody:
        content:
          image/png:
            schema:
              type: string
              format: binary
          image/jpeg:
            schema:
              type: string
              format: binary
          image/gif:
            schema:
              type: string
              format: binary
          application/pdf:
            schema:
              type: string
              format: binary
          video/mp4:
            schema:
              type: string
              format: binary
      summary: Update Asset
    delete:
      security:
        - MasterSecret: []
      parameters:
        - description: The asset's id.
          example: 5245bc5b3e66a3b01fff24d4
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
      tags:
        - Asset
      description: >-
        Delete an asset. This operation can not be undone.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: deleteAssetById
      summary: Delete Asset
  '/asset/{id}/order':
    put:
      security:
        - MasterSecret: []
      parameters:
        - description: The asset's id.
          in: path
          name: id
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: asset updated
          description: OK
      tags:
        - Asset
      description: >-
        Modify a specific asset.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: putAssetOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssetOrder'
      summary: Update Asset Order
  /asset/group:
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/AssetGroupList'
          description: OK
      tags:
        - Asset
      description: >-
        Get all the asset groups for an application.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getAssetGroup
      summary: List Asset Groups
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  assetGroup:
                    $ref: '#/components/schemas/ResponseCreated'
          description: Created
      tags:
        - Asset
      description: >-
        Create an asset group in a specific application. This allows you to
        group assets in a group can then later be retrieved in your applications
        using the SDKs.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postAssetGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssetGroupCreate'
      summary: Create Asset Group
  '/asset/group/byname/{name}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The name of the asset group
          example: testing
          in: path
          name: name
          required: true
          schema:
            type: string
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/AssetGroupList'
          description: OK
      tags:
        - Asset
      description: >-
        Get all the asset groups for an application. Because asset groups can
        share the same name you might need to get all asset groups with the same
        name. Use this endpoint to retrieve assets with the same name.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getAssetGroupByName
      summary: List Asset Groups By Name
  '/asset/group/{id}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The asset group's id.
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  assetGroup:
                    $ref: '#/components/schemas/AssetGroupModel'
                type: object
          description: OK
      tags:
        - Asset
      description: >-
        Get a specific asset group.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getAssetGroupById
      summary: Get Asset Group
    put:
      security:
        - MasterSecret: []
      parameters:
        - description: The asset group's id.
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: asset group updated
          description: OK
      tags:
        - Asset
      description: >-
        Modify a specific asset group.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: putAssetGroupById
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssetGroupBase'
      summary: Update Asset Group
    delete:
      security:
        - MasterSecret: []
      parameters:
        - description: The asset group's id.
          example: 5245bc5b3e66a3b01fff24d4
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: asset group removed
          description: OK
      tags:
        - Asset
      description: >-
        Delete an asset group. This operation cannot be undone.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: deleteAssetGroupById
      summary: Delete Asset Group
  /automation:
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The name of the automation connector to search for.
          example: fire
          in: query
          name: search
          required: false
          schema:
            type: string
        - description: The maximum number of results to retrieve.
          example: 10
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/AutomationList'
          description: OK
      tags:
        - Automation
      description: >-
        Get all the automation connectors for an application.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getAutomation
      summary: List Automation Connectors
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  automation:
                    $ref: '#/components/schemas/ResponseCreated'
          description: Created
      tags:
        - Automation
      description: >-
        Create an automation connector.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postAutomation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AutomationCreate'
      summary: Create Automation Connector
  '/automation/{id}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The automation connector's id.
          in: path
          name: id
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  automation:
                    $ref: '#/components/schemas/AutomationModel'
          description: OK
      tags:
        - Automation
      description: >-
        Get a specific automation connector.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getAutomationById
      summary: Get Automation Connector
    put:
      security:
        - MasterSecret: []
      parameters:
        - description: The automation connector's id.
          in: path
          name: id
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: automation updated
          description: OK
      tags:
        - Automation
      description: >-
        Modify an automation connector.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: putAutomationById
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AutomationUpdate'
      summary: Update Automation Connector
    delete:
      security:
        - MasterSecret: []
      parameters:
        - description: The automation connector's id.
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: automation deleted
          description: OK
      tags:
        - Automation
      description: >-
        Delete an automation connector. This operation cannot be undone.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: deleteAutomationById
      summary: Delete Automation Connector
  /beacon:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  beacon:
                    $ref: '#/components/schemas/ResponseCreated'
          description: Created
      tags:
        - Beacon
      description: >-
        Create a new beacon for a region. To complete this request you must
        create a triggered Notification first.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postBeacon
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BeaconCreate'
      summary: Create Beacon
  '/beacon/forregion/{region}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The id of an active region.
          in: path
          name: region
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 50
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/BeaconList'
          description: OK
      tags:
        - Beacon
      description: >-
        Get all beacons for a certain region.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getBeaconForRegion
      summary: List Beacons For Region
  '/beacon/{id}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The beacon id of an active beacon.
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  beacon:
                    $ref: '#/components/schemas/BeaconModel'
                type: object
          description: OK
      tags:
        - Beacon
      description: >-
        Get a beacon object.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getBeaconById
      summary: Get Beacon
    put:
      security:
        - MasterSecret: []
      parameters:
        - description: The beacon id of an active beacon.
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: beacon updated
          description: OK
      tags:
        - Beacon
      description: >-
        Modify a beacon.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: putBeaconById
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BeaconUpdate'
      summary: Update Beacon
    delete:
      security:
        - MasterSecret: []
      parameters:
        - description: The beacon id of an active beacon.
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: beacon deleted
          description: OK
      tags:
        - Beacon
      description: >-
        Delete a beacon. This operation cannot be undone.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: deleteBeaconById
      summary: Delete Beacon
  /datasource:
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The name of the datasource to search for.
          example: blog
          in: query
          name: search
          required: false
          schema:
            type: string
        - description: The maximum number of results to retrieve.
          example: 10
          in: query
          name: limit
          required: false
          schema:
            default: 25
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/DatasourceList'
          description: OK
      tags:
        - Automation
      description: >-
        Get all the datasources for an application.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getDatasource
      summary: List Datasources
    post:
      security:
        - MasterSecret: []
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  datasource:
                    $ref: '#/components/schemas/ResponseCreated'
          description: OK
      tags:
        - Automation
      description: >-
        Create a datasource.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postDatasource
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasourceCreate'
      summary: Create Datasource
  /datasource/test:
    post:
      security:
        - MasterSecret: []
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  feed:
                    $ref: '#/components/schemas/DatasourceFeedModel'
                type: object
          description: OK
      tags:
        - Automation
      description: >-
        Test a datasource feed before actually creating it.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postDatasourceTest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasourceTest'
      summary: Test New Datasource
  '/datasource/{id}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The source's id.
          in: path
          name: id
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  datasource:
                    $ref: '#/components/schemas/DatasourceModel'
          description: OK
      tags:
        - Automation
      description: >-
        Get a specific datasource.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getDatasourceById
      summary: Get Datasource
    put:
      security:
        - MasterSecret: []
      parameters:
        - description: The source's id.
          in: path
          name: id
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: datasource updated
          description: OK
          headers: {}
      tags:
        - Automation
      description: >-
        Modify a datasource.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: putDatasourceById
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasourceUpdate'
      summary: Update Datasource
    delete:
      security:
        - MasterSecret: []
      parameters:
        - description: The source's id.
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: datasource deleted
          description: OK
      tags:
        - Automation
      description: >-
        Delete a datasource. This operation cannot be undone.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: deleteDatasourceById
      summary: Delete Datasource
  '/datasource/{id}/test':
    put:
      security:
        - MasterSecret: []
      parameters:
        - description: The source's id.
          in: path
          name: id
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  feed:
                    $ref: '#/components/schemas/DatasourceFeedModel'
                type: object
          description: OK
      tags:
        - Automation
      description: >-
        Test a datasource feed that is already created.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: putDatasourceTest
      summary: Test Existing Datasource
  /device:
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: number
        - description: The number of results to skip.
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
        - description: >-
            The medium for the device. Possible values are `push`, `email` or
            `sms`
          example: push
          in: query
          name: medium
          required: false
          schema:
            default: push
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/DeviceList'
          description: OK
      tags:
        - Device
      description: >-
        Get all the devices for a specific application. If skip and limit are
        not used, there is a default size of 100 devices. Please note that there
        is a max. size of 1000 devices per page. When the medium property is
        used we will filter the results by the type of channel your devices were
        registered for.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getDevice
      summary: List Devices
  /device/bygeometry:
    post:
      security:
        - MasterSecret: []
      parameters:
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
        - description: >-
            The medium for the device. Possible values are `push`, `email` or
            `sms`
          example: push
          in: query
          name: medium
          required: false
          schema:
            default: push
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/DeviceList'
          description: OK
      tags:
        - Device
      description: >-
        Get all the devices in a specific geometric shape. If skip and limit are
        not used, there is a default size of 100 devices. Please note that there
        is a max. size of 1000 devices per page.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postDeviceByGeometry
      requestBody:
        content:
          application/json:
            schema:
              properties:
                geometry:
                  $ref: '#/components/schemas/Polygon'
              required:
                - geometry
              type: object
      summary: List Devices For Polygon
  '/device/bylocation/{lat1}/{long1}/{lat2}/{long2}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The desired south-east latitude
          example: '4.2345'
          in: path
          name: lat1
          required: true
          schema:
            type: number
        - description: The desired south-east longitude
          example: '5.6789'
          in: path
          name: long1
          required: true
          schema:
            type: number
        - description: The desired north-west latitude
          example: '4.2345'
          in: path
          name: lat2
          required: true
          schema:
            type: number
        - description: The desired north-west longitude
          example: '5.6789'
          in: path
          name: long2
          required: true
          schema:
            type: number
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
        - description: >-
            The medium for the device. Possible values are `push`, `email` or
            `sms`
          example: push
          in: query
          name: medium
          required: false
          schema:
            default: push
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/DeviceList'
          description: OK
      tags:
        - Device
      description: >-
        Get all the devices withing a specific bounds. Bounds form a rectangle
        from the points at its south-west and north-east corners. If skip and
        limit are not used, there is a default size of 100 devices. Please note
        that there is a max. size of 1000 devices per page.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getDeviceForBounds
      summary: List Devices For Bounds
  '/device/bylocation/{latitude}/{longitude}/{distance}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The desired latitude
          example: '4.2345'
          in: path
          name: latitude
          required: true
          schema:
            type: number
        - description: The desired longitude
          example: '5.6789'
          in: path
          name: longitude
          required: true
          schema:
            type: number
        - description: >-
            The distance in kilometers of your search area relative to the
            latitude and longitude
          example: '1.5'
          in: path
          name: distance
          required: true
          schema:
            type: number
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
        - description: >-
            The medium for the device. Possible values are `push`, `email` or
            `sms`
          example: push
          in: query
          name: medium
          required: false
          schema:
            default: push
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/DeviceList'
          description: OK
      tags:
        - Device
      description: >-
        Get all the devices in a specific location. If skip and limit are not
        used, there is a default size of 100 devices. Please note that there is
        a max. size of 1000 devices per page.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getDeviceByLocation
      summary: List Devices By Location
  '/device/forregion/{region}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The id of the region
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: region
          required: true
          schema:
            type: string
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
        - description: >-
            The medium for the device. Possible values are `push`, `email` or
            `sms`
          example: push
          in: query
          name: medium
          required: false
          schema:
            default: push
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/DeviceList'
          description: OK
      tags:
        - Device
      description: >-
        Get all the devices in a specific region. If skip and limit are not
        used, there is a default size of 100 devices. Please note that there is
        a max. size of 1000 devices per page.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getDeviceForRegion
      summary: List Devices For Region
  '/device/forsubscription/{subscription}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The subscription Id the device is associated with
          example: 00a9b9bf-c099-45aa-9278-64d6a3f22476
          in: path
          name: subscription
          required: true
          schema:
            type: string
        - description: >-
            The medium for the device. Possible values are `push`, `email` or
            `sms`
          example: push
          in: query
          name: medium
          required: false
          schema:
            default: push
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/DeviceList'
          description: OK
      tags:
        - Device
      description: >-
        Get a device by its specific subscription Id. The subscription Id is
        generated automatically for each device created. It returns a list of
        one device.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getDeviceForSubscription
      summary: Get Device For Subscription
  '/device/fortag/{tag}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The tag the device is associated with
          example: toys
          in: path
          name: tag
          required: true
          schema:
            type: string
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
        - description: >-
            The medium for the device. Possible values are `push`, `email` or
            `sms`
          example: push
          in: query
          name: medium
          required: false
          schema:
            default: push
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/DeviceList'
          description: OK
      tags:
        - Device
      description: >-
        Get all the devices for a specific tag. If skip and limit are not used,
        there is a default size of 100 devices. Please note that there is a max.
        size of 1000 devices per page.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getDeviceForTag
      summary: List Devices For Tag
  '/device/foruser/{userID}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: >-
            The user ID is the one the client device registered with, e.g., the
            user's email address.
          example: testuser@example.com
          in: path
          name: userID
          required: true
          schema:
            type: string
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
        - description: >-
            The medium for the device. Possible values are `push`, `email` or
            `sms`
          example: push
          in: query
          name: medium
          required: false
          schema:
            default: push
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/DeviceList'
          description: OK
      tags:
        - Device
      description: >-
        Get all the devices for a specific user. If skip and limit are not used,
        there is a default size of 100 devices. Please note that there is a max.
        size of 1000 devices per page.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getDeviceForUser
      summary: List Devices For User
  /device/tags:
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/DeviceTagList'
          description: OK
      tags:
        - Tag
      description: >-
        Get the list of all tags for this application. If skip and limit are not
        used, there is a default size of 100 devices. Please note that there is
        a max. size of 1000 devices per page.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getDeviceTags
      summary: List Tags
  '/device/tags/{tag}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The string to search for
          example: toys
          in: path
          name: tag
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/DeviceTagList'
          description: OK
      tags:
        - Tag
      description: >-
        Get all the tags that match match partially or totally a specific query.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getDeviceTagsForTag
      summary: Search Tags
  '/device/{deviceID}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The deviceID is the unique identifier provided by APNS, GCM, HMS or WebPush.
          example: 00a9b9bf-xxx9278-64d6a3f22476
          in: path
          name: deviceID
          required: true
          schema:
            type: string
        - description: A property that defines if inactive devices should also be found.
          example: any
          in: query
          name: active
          required: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  device:
                    $ref: '#/components/schemas/DeviceModel'
          description: OK
      tags:
        - Device
      description: >-
        Get a specific device based on the deviceID.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getDeviceById
      summary: Get Device
  '/device/{deviceID}/user':
    put:
      security:
        - MasterSecret: []
      parameters:
        - description: The deviceID is the unique identifier provided by APNS, GCM, HMS or WebPush.
          example: 00a9b9bf-xxx9278-64d6a3f22476
          in: path
          name: deviceID
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: device updated
          description: OK
      tags:
        - Device
      description: >-
        Register a userID and userName to a device. For this endpoint to work,
        you need to set the User Registration to API Level. This can be done
        from the Settings > Configure App > User Registration or (if you have
        the Users & Authentication add-on) from the Users & Authentication
        add-on service page. This will prevent you apps from registering users
        with only the app keys and instead you can take care of this at the
        server side. Use this method to add a userID and userName to a device.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: putDeviceUser
      requestBody:
        content:
          application/json:
            schema:
              example:
                userID: '12345678'
                userName: John Doe
              properties:
                userID:
                  type: string
                userName:
                  type: string
              type: object
      summary: Register User To Device
    delete:
      security:
        - MasterSecret: []
      parameters:
        - description: The deviceID is the unique identifier provided by APNS, GCM, HMS or WebPush.
          example: 00a9b9bf-xxx9278-64d6a3f22476
          in: path
          name: deviceID
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: device updated
          description: OK
          headers: {}
      tags:
        - Device
      description: >-
        Unregister a userID and userName from a device. For this endpoint to
        work, you need to set the User Registration to API Level. This can be
        done from the Settings > Configure App > User Registration or (if you
        have the Users & Authentication add-on) from the Users & Authentication
        add-on service page. This will prevent you apps from registering users
        with only the app keys and instead you can take care of this at the
        server side. Use this method to remove a userID and userName from a
        device.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: deleteDeviceUser
      summary: Unregister User From Device
  '/device/{deviceID}/userdata/override':
    put:
      security:
        - MasterSecret: []
      parameters:
        - description: The deviceID is the unique identifier provided by APNS, GCM, HMS or WebPush.
          example: 00a9b9bf-xxx9278-64d6a3f22476
          in: path
          name: deviceID
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: device user data updated
          description: OK
      tags:
        - Device
      description: >-
        Set the user data fields for a device. The fields need to be defined as User Data Fields in
        the Settings > Configure App > User Data Fields menu before they can be set through this endpoint.
        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: putDeviceUserdataOverride
      requestBody:
        content:
          application/json:
            schema:
              properties:
                userData:
                  type: object
                  additionalProperties:
                    type: string
                  example:
                    firstName: John
                    lastName: Doe
              type: object
      summary: Update User Data For Device
  /email:
    post:
      security:
        - MasterSecret: []
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: subscription updated
          description: OK
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  device:
                    $ref: '#/components/schemas/ResponseDeviceCreated'
          description: Created
        '202':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: subscription is being processed
          description: Accepted
      tags:
        - Email
      description: >-
        Create an email contact for your application.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postEmail
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailCreate'
      summary: Create Email Contact
  '/event/custom/{type}/{userID}':
    post:
      security:
        - MasterSecret: []
      parameters:
        - description: >-
            The type of custom event. This event type is automatically prepended
            with `re.notifica.event.custom.` namespace to prevent collisions.
          example: MyCustomEvent
          in: path
          name: type
          required: true
          schema:
            type: string
        - description: >-
            The user this event is triggered for. All automations and
            notification will apply to all of the devices of this user.
          example: test@example.com
          in: path
          name: userID
          required: true
          schema:
            type: string
      responses:
        '202':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: event is being processed
          description: Accepted
      tags:
        - Event
      description: >-
        Generate Custom Event for a specific User. Data sent in the payload can
        be accessed as placeholder data in automated notifications. In the
        example below, a placeholder `{{test}}` in an automated notification
        would be replaced by `a test value`.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postEventCustomForUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventCreate'
      summary: Create Custom Event
  '/event/fortype/{type}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The type of event.
          example: re.notifica.event.application.Install
          in: path
          name: type
          required: true
          schema:
            type: string
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
        - description: When provided will only retrieve events after this date
          example: '2014-10-03'
          in: query
          name: since
          required: false
          schema:
            type: string
        - description: >-
            When provided will only retrieve events before this date (only
            available when a since date is provided)
          example: '2014-10-04'
          in: query
          name: before
          required: false
          schema:
            type: string
        - description: >-
            When provided will only retrieve events for the userID. Requires
            since and before to be set as well.
          example: user@example.com
          in: query
          name: userID
          required: false
          schema:
            type: string
        - description: >-
            When provided will only retrieve events for the deviceID. Requires
            since and before to be set as well.
          example: bbff2ce9b547d2df4731bac277xxx
          in: query
          name: deviceID
          required: false
          schema:
            type: string
        - description: >-
            The region's id of an event of type re.notifica.event.region.Session
            or re.notifica.event.beacon.Session
          in: query
          name: region
          required: false
          schema:
            $ref: '#/components/schemas/ObjectId'
        - description: >-
            The beacon's fence region id of an event of type
            re.notifica.event.beacon.Session
          in: query
          name: fence
          required: false
          schema:
            $ref: '#/components/schemas/ObjectId'
        - description: >-
            The pass id of an event of type re.notifica.event.pass.Add,
            re.notifica.event.pass.Remove or re.notifica.event.pass.Redeem
          in: query
          name: pass
          required: false
          schema:
            $ref: '#/components/schemas/ObjectId'
        - description: >-
            The pass serial of an event of type re.notifica.event.pass.Add,
            re.notifica.event.pass.Remove or re.notifica.event.pass.Redeem
          in: query
          name: serial
          required: false
          schema:
            type: string
            format: uuid
        - description: >-
            The asset group's id of an event of type
            re.notifica.event.asset.Load
          in: query
          name: group
          required: false
          schema:
            $ref: '#/components/schemas/ObjectId'
        - description: >-
            The scannable's id of an event of type
            re.notifica.event.scannable.Scan
          in: query
          name: scannable
          required: false
          schema:
            $ref: '#/components/schemas/ObjectId'
        - description: >-
            The aggregation id of an event of type
            re.notifica.event.notification.Sent,
            re.notifica.event.notification.Receive,
            re.notifica.event.notification.Open,
            re.notifica.event.notification.Influenced,
            re.notifica.event.email.Bounce,
            re.notifica.event.email.Complaint,
            re.notifica.event.email.Deactivate or
            re.notifica.event.email.Unsubscribe
          in: query
          name: aggregation
          required: false
          schema:
            $ref: '#/components/schemas/ObjectId'
        - description: >-
            The notification's id of an event of type
            re.notifica.event.notification.Sent,
            re.notifica.event.notification.Receive,
            re.notifica.event.notification.Open,
            re.notifica.event.notification.Influenced,
            re.notifica.event.email.Bounce,
            re.notifica.event.email.Complaint,
            re.notifica.event.email.Deactivate or
            re.notifica.event.email.Unsubscribe
          in: query
          name: notification
          required: false
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EventList'
          description: OK
      tags:
        - Event
      description: >-
        Get all the events for a type for a specific application.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getEventForType
      summary: List Events For Type
  '/event/types':
    get:
      security:
        - MasterSecret: []
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EventTypeList'
          description: OK
      tags:
        - Event
      description: >-
        Get all the event types that were logged for a specific application.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getEventTypes
      summary: List Event Types
  '/event/types/custom':
    get:
      security:
        - MasterSecret: []
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EventTypeList'
          description: OK
      tags:
        - Event
      description: >-
        Get all the custom event types that were logged for a specific application.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getEventTypesCustom
      summary: List Custom Event Types
  '/event/{id}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The event's Id.
          in: path
          name: id
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EventModel'
          description: OK
      tags:
        - Event
      description: >-
        Get a specific event object.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getEventById
      summary: Get Event
  /export:
    get:
      security:
        - MasterSecret: []
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ExportJobList'
          description: OK
      tags:
        - Export
      description: >-
        Get all export jobs for an application.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getExport
      summary: List Export Jobs
  '/export/fortype/{type}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The export type
          example: re.notifica.export.User
          in: path
          name: type
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ExportJobList'
          description: OK
      tags:
        - Export
      description: >-
        Get all export jobs of a specific type.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getExportForType
      summary: List Exports For Type
  /export/re.notifica.export.Device:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  exportJob:
                    $ref: '#/components/schemas/ResponseCreated'
          description: Created
      tags:
        - Export
      description: >-
        Export devices, contacts or numbers for an application. This job might
        take some time to finish, check the export result endpoint to obtain
        information about the status of this export job.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postExportDevice
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    all:
                      description: >-
                        Specify if export job should include all devices, including
                        inactive ones
                      type: boolean
                    criteria:
                      $ref: '#/components/schemas/Criteria'
                    includeTags:
                      description: Specify if export job should include all device tags
                      type: boolean
                    medium:
                      description: >-
                        Specify if export job results should include a specific type
                        for medium (available values are: all, push, email, sms)
                      type: string
                      enum: [all, push, email, sms]
                      default: push
                    tagsSeparator:
                      description: >-
                        Specify if export jobs should use a different separator for
                        the tags. By default we will use |
                      type: string
                      default: '|'
                    skipErrorEmails:
                      description: >-
                        Do not send emails when export fails
                      type: boolean
                      default: false
                    skipSuccessEmails:
                      description: >-
                        Do not send emails when export succeeds
                      type: boolean
                      default: false
                  type: object
              required:
                - data
              type: object
      summary: Export Devices/Contacts/Numbers
  /export/re.notifica.export.User:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  exportJob:
                    $ref: '#/components/schemas/ResponseCreated'
          description: Created
      tags:
        - Export
      description: >-
        Export all users for an application. This job might take some time to
        finish, check the export result endpoint to obtain information about the
        status of this export job.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postExportUser
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    all:
                      description: >-
                        Specify if export job should include all users, including
                        inactive ones
                      type: boolean
                    lastActive:
                      $ref: '#/components/schemas/DateCriteria'
                    lastActiveSeconds:
                      $ref: '#/components/schemas/RelativeDateCriteria'
                    registrationDate:
                      $ref: '#/components/schemas/DateCriteria'
                    registrationDateSeconds:
                      $ref: '#/components/schemas/RelativeDateCriteria'
                    segmentsCriteria:
                      $ref: '#/components/schemas/SegmentsCriteria'
                    showCombinedSegments:
                      description: >-
                        When showSegments is true or it includes a list of segments,
                        you can specify if export jobs should show all segments in
                        one column or in separate columns.
                      type: boolean
                    showPreferences:
                      description: >-
                        When showSegments is true or it includes a list of segments,
                        you can specify if export jobs should also contain user
                        selectable segments
                      type: boolean
                    showSegments:
                      description: >-
                        Specify if export job should include all segments. This
                        property can also be an array of segment IDs, if you are
                        looking to include only certain segments. Please note that
                        export jobs will fail if you have users with more than 2000
                        segments
                      type: boolean
                    useSegmentNames:
                      description: >-
                        When showSegments is true or it includes a list of segments,
                        you can specify if export jobs should contain the name of
                        the segments instead of their IDs
                      type: boolean
                    skipErrorEmails:
                      description: >-
                        Do not send emails when export fails
                      type: boolean
                      default: false
                    skipSuccessEmails:
                      description: >-
                        Do not send emails when export succeeds
                      type: boolean
                      default: false
              required:
                - data
      summary: Export Users
  /export/re.notifica.export.UserData:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  exportJob:
                    $ref: '#/components/schemas/ResponseCreated'
          description: Created
      tags:
        - Export
      description: >-
        Export all the data of a specific user. This job might take some time to
        finish, check the export result endpoint to obtain information about the
        status of this export job.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postExportUserData
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    userID:
                      description: Specify which user you want to export data from
                      type: string
                      example: '1288477272'
                    skipErrorEmails:
                      description: >-
                        Do not send emails when export fails
                      type: boolean
                      default: false
                    skipSuccessEmails:
                      description: >-
                        Do not send emails when export succeeds
                      type: boolean
                      default: false
                  required:
                    - userID
                  type: object
              required:
                - data
              type: object
      summary: Export User Data
  /export/re.notifica.export.Region:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  exportJob:
                    $ref: '#/components/schemas/ResponseCreated'
          description: Created
      tags:
        - Export
      description: >-
        Export all regions for an application. This job might take some time to
        finish, check the export result endpoint to obtain information about the
        status of this export job.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postExportRegion
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    skipErrorEmails:
                      description: >-
                        Do not send emails when export fails
                      type: boolean
                      default: false
                    skipSuccessEmails:
                      description: >-
                        Do not send emails when export succeeds
                      type: boolean
                      default: false
                  type: object
              type: object
      summary: Export Regions
  /export/re.notifica.export.Beacon:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  exportJob:
                    $ref: '#/components/schemas/ResponseCreated'
          description: Created
      tags:
        - Export
      description: >-
        Export all beacons for an application. This job might take some time to
        finish, check the export result endpoint to obtain information about the
        status of this export job.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postExportBeacon
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    skipErrorEmails:
                      description: >-
                        Do not send emails when export fails
                      type: boolean
                      default: false
                    skipSuccessEmails:
                      description: >-
                        Do not send emails when export succeeds
                      type: boolean
                      default: false
                  type: object
              type: object
      summary: Export Beacons
  /export/re.notifica.export.Notification:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  exportJob:
                    $ref: '#/components/schemas/ResponseCreated'
          description: Created
      tags:
        - Export
      description: >-
        Export notifications for an application. 
        Maximum time interval is 180 days, it will be trimmed automatically.
        If no interval is given, it defaults to 30 days.
        This job might take some time
        to finish, check the export result endpoint to obtain information about
        the status of this export job.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postExportNotification
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    all:
                      description: >-
                        Specify if export job should include all notifications,
                        including archived ones
                      type: boolean
                    before:
                      description: >-
                        Specify if export job should only include notifications
                        created before a certain date. Can not be used together with beforeSeconds.
                        Maximum time interval is 180 days, it will be trimmed automatically.
                        If no interval is given, it defaults to 30 days.
                      type: string
                      format: 'date-time'
                    beforeSeconds:
                      description: >-
                        Specify if export job should only include notifications
                        created before a number of seconds ago. Can not be used together with before.
                        Maximum time interval is 180 days, it will be trimmed automatically.
                        If no interval is given, it defaults to 30 days.
                      type: number
                    since:
                      description: >-
                        Specify if export job should only include notifications
                        created after a certain date. Can not be used together with sinceSeconds.
                        Maximum time interval is 180 days, it will be trimmed automatically.
                        If no interval is given, it defaults to 30 days.
                      type: string
                      format: 'date-time'
                    sinceSeconds:
                      description: >-
                        Specify if export job should only include notifications
                        created after a number of seconds ago. Can not be used together with since.
                        Maximum time interval is 180 days, it will be trimmed automatically.
                        If no interval is given, it defaults to 30 days.
                      type: number
                    useSegmentNames:
                      description: >-
                        Specify if export jobs should contain the name of the
                        segments instead of their IDs
                      type: boolean
                    skipErrorEmails:
                      description: >-
                        Do not send emails when export fails
                      type: boolean
                      default: false
                    skipSuccessEmails:
                      description: >-
                        Do not send emails when export succeeds
                      type: boolean
                      default: false
                  type: object
              required:
                - data
              type: object
      summary: Export Notifications
  /export/re.notifica.export.Reply:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  exportJob:
                    $ref: '#/components/schemas/ResponseCreated'
          description: Created
      tags:
        - Export
      description: >-
        Export replies for a specific notification. 
        This job might take some
        time to finish, check the export result endpoint to obtain information
        about the status of this export job.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postExportReply
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    aggregation:
                      $ref: '#/components/schemas/ObjectId'
                    notification:
                      $ref: '#/components/schemas/ObjectId'
                    skipErrorEmails:
                      description: >-
                        Do not send emails when export fails
                      type: boolean
                      default: false
                    skipSuccessEmails:
                      description: >-
                        Do not send emails when export succeeds
                      type: boolean
                      default: false
                  type: object
              required:
                - data
              type: object
      summary: Export Replies
  /export/re.notifica.export.Event:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  exportJob:
                    $ref: '#/components/schemas/ResponseCreated'
          description: Created
      tags:
        - Export
      description: >-
        Export all the events for a certain type.
        Maximum time interval is 180 days, it will be trimmed automatically.
        If no interval is given, it defaults to 30 days.
        This job might take some time
        to finish, check the export result endpoint to obtain information about
        the status of this export job.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postExportEvent
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    type:
                      description: The type of the event you wish to export records from
                      type: string
                    before:
                      description: >-
                        Specify if export job should only include events
                        created before a certain date. Can not be used together with beforeSeconds.
                        Maximum time interval is 180 days, it will be trimmed automatically.
                        If no interval is given, it defaults to 30 days.
                      type: string
                      format: 'date-time'
                    beforeSeconds:
                      description: >-
                        Specify if export job should only include events
                        created before a number of seconds ago. Can not be used together with before.
                        Maximum time interval is 180 days, it will be trimmed automatically.
                        If no interval is given, it defaults to 30 days.
                      type: number
                    since:
                      description: >-
                        Specify if export job should only include events
                        created after a certain date. Can not be used together with sinceSeconds.
                        Maximum time interval is 180 days, it will be trimmed automatically.
                        If no interval is given, it defaults to 30 days.
                      type: string
                      format: 'date-time'
                    sinceSeconds:
                      description: >-
                        Specify if export job should only include events
                        created after a number of seconds ago. Can not be used together with since.
                        Maximum time interval is 180 days, it will be trimmed automatically.
                        If no interval is given, it defaults to 30 days.
                      type: number
                    criteria:
                      $ref: '#/components/schemas/Criteria'
                    dataFilter:
                      $ref: '#/components/schemas/DataFilterCriteria'
                    fence:
                      type: string
                      example: 1d9e80ef851d212aca82cf23
                      description: >-
                        If type is `re.notifica.event.beacon.Session`, optionally
                        you can specify the ID of a region (where the beacons are
                        located) to include only events for those beacons
                    region:
                      type: string
                      example: 1d9e80ef851d212aca82cf23
                      description: >-
                        If type is `re.notifica.event.region.Session`, optionally
                        you can specify the ID of a region to include only events
                        for that region
                    group:
                      type: string
                      example: 1d9e80ef851d212aca82cf23
                      description: >-
                        If type is any `re.notifica.event.asset.*`, optionally you
                        can specify the ID of an asset group to include only events
                        for that asset group
                    aggregation:
                      type: string
                      example: 1d9e80ef851d212aca82cf23
                      description: >-
                        If type is any `re.notifica.event.notification.*` or `re.notifica.event.email.*`,
                        optionally you can specify the ID of an aggregation to
                        include only events for that aggregation
                    notification:
                      type: string
                      example: 1d9e80ef851d212aca82cf23
                      description: >-
                        If type is any `re.notifica.event.notification.*` or `re.notifica.event.email.*`,
                        optionally you can specify the ID of a notification to
                        include only events for that notification
                    scannable:
                      type: string
                      example: 1d9e80ef851d212aca82cf23
                      description: >-
                        If type is any `re.notifica.event.scannable.*`, optionally
                        you can specify the ID of a scannable to include only events
                        for that scannable
                    pass:
                      type: string
                      example: 1d9e80ef851d212aca82cf23
                      description: >-
                        If type is any `re.notifica.event.pass.*`, optionally you
                        can specify the id of a pass to include only events for
                        that pass
                    serial:
                      description: >-
                        If type is any `re.notifica.event.pass.*`, optionally you
                        can specify the serial of a pass to include only events for
                        that pass
                      type: string
                      format: uuid
                    skipErrorEmails:
                      description: >-
                        Do not send emails when export fails
                      type: boolean
                      default: false
                    skipSuccessEmails:
                      description: >-
                        Do not send emails when export succeeds
                      type: boolean
                      default: false
                  required:
                    - type
                  type: object
              required:
                - data
              type: object
      summary: Export Events
  /export/re.notifica.export.Pass:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  exportJob:
                    $ref: '#/components/schemas/ResponseCreated'
          description: Created
      tags:
        - Export
      description: >-
        Export all the passes for a certain pass template.
        This job might take some time to finish, check the export
        result endpoint to obtain information about the status of this export
        job.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postExportPass
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    passbook:
                      description: The id of the existing pass template
                      type: string
                      example: 1d9e80ef851d212aca82cf23
                    skipErrorEmails:
                      description: >-
                        Do not send emails when export fails
                      type: boolean
                      default: false
                    skipSuccessEmails:
                      description: >-
                        Do not send emails when export succeeds
                      type: boolean
                      default: false
                  required:
                    - passbook
                  type: object
              required:
                - data
              type: object
      summary: Export Passes
  /export/re.notifica.export.Campaign:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  exportJob:
                    $ref: '#/components/schemas/ResponseCreated'
          description: Created
      tags:
        - Export
      description: >-
        Export the results of a specific Location Based Campaign. This will
        include all the trigger history for the duration of the campaign (if
        applicable). This job might take some time to finish, check the export
        result endpoint to obtain information about the status of this export
        job.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postExportCampaign
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    campaign:
                      description: The id of the campaign you wish to export results from
                      type: string
                      example: 1d9e80ef851d212aca82cf23
                    skipErrorEmails:
                      description: >-
                        Do not send emails when export fails
                      type: boolean
                      default: false
                    skipSuccessEmails:
                      description: >-
                        Do not send emails when export succeeds
                      type: boolean
                      default: false
                  required:
                    - campaign
                  type: object
              required:
                - data
              type: object
      summary: Export Campaigns
  /export/re.notifica.export.CampaignSummary:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  exportJob:
                    $ref: '#/components/schemas/ResponseCreated'
          description: Created
      tags:
        - Export
      description: >-
        Export the stats summary for one or more campaigns. This job might take
        some time to finish, check the export result endpoint to obtain
        information about the status of this export job.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postExportCampaignSummary
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    campaigns:
                      description: The ids of the campaigns you wish to export summary from
                      items:
                        $ref: '#/components/schemas/ObjectId'
                      type: array
                    skipErrorEmails:
                      description: >-
                        Do not send emails when export fails
                      type: boolean
                      default: false
                    skipSuccessEmails:
                      description: >-
                        Do not send emails when export succeeds
                      type: boolean
                      default: false
                  required:
                    - campaigns
                  type: object
              required:
                - data
              type: object
      summary: Export Campaigns Summary
  /export/re.notifica.export.CampaignReplies:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  exportJob:
                    $ref: '#/components/schemas/ResponseCreated'
          description: Created
      tags:
        - Export
      description: >-
        Export the notification replies for one or more campaigns. This job might take
        some time to finish, check the export result endpoint to obtain
        information about the status of this export job.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postExportCampaignReplies
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    campaign:
                      $ref: '#/components/schemas/ObjectId'
                    skipErrorEmails:
                      description: >-
                        Do not send emails when export fails
                      type: boolean
                      default: false
                    skipSuccessEmails:
                      description: >-
                        Do not send emails when export succeeds
                      type: boolean
                      default: false
                  required:
                    - campaign
                  type: object
              required:
                - data
              type: object
      summary: Export Campaign Replies
  /export/re.notifica.export.CampaignEvents:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  exportJob:
                    $ref: '#/components/schemas/ResponseCreated'
          description: Created
      tags:
        - Export
      description: >-
        Export the events for one or more campaigns. 
        Maximum time interval is 180 days, it will be trimmed automatically.
        If no interval is given, it defaults to 30 days.
        This job might take
        some time to finish, check the export result endpoint to obtain
        information about the status of this export job.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postExportCampaignEvents
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    campaign:
                      $ref: '#/components/schemas/ObjectId'
                    before:
                      description: >-
                        Specify if export job should only include events
                        created before a certain date. Can not be used together with beforeSeconds.
                        Maximum time interval is 180 days, it will be trimmed automatically.
                        If no interval is given, it defaults to 30 days.
                      type: string
                      format: 'date-time'
                    beforeSeconds:
                      description: >-
                        Specify if export job should only include events
                        created before a number of seconds ago. Can not be used together with before.
                        Maximum time interval is 180 days, it will be trimmed automatically.
                        If no interval is given, it defaults to 30 days.
                      type: number
                    since:
                      description: >-
                        Specify if export job should only include events
                        created after a certain date. Can not be used together with sinceSeconds.
                        Maximum time interval is 180 days, it will be trimmed automatically.
                        If no interval is given, it defaults to 30 days.
                      type: string
                      format: 'date-time'
                    sinceSeconds:
                      description: >-
                        Specify if export job should only include events
                        created after a number of seconds ago. Can not be used together with since.
                        Maximum time interval is 180 days, it will be trimmed automatically.
                        If no interval is given, it defaults to 30 days.
                      type: number
                    skipErrorEmails:
                      description: >-
                        Do not send emails when export fails
                      type: boolean
                      default: false
                    skipSuccessEmails:
                      description: >-
                        Do not send emails when export succeeds
                      type: boolean
                      default: false
                  required:
                    - campaign
                  type: object
              required:
                - data
              type: object
      summary: Export Campaign Events
  /export/re.notifica.export.AutomationSummary:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  exportJob:
                    $ref: '#/components/schemas/ResponseCreated'
          description: Created
      tags:
        - Export
      description: >-
        Export the stats summary for one or more automation connectors. This job
        might take some time to finish, check the export result endpoint to
        obtain information about the status of this export job.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postExportAutomationSummary
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    automations:
                      description: >-
                        The ids of the automation connectors you wish to export
                        summary from
                      items:
                        $ref: '#/components/schemas/ObjectId'
                      type: array
                    skipErrorEmails:
                      description: >-
                        Do not send emails when export fails
                      type: boolean
                      default: false
                    skipSuccessEmails:
                      description: >-
                        Do not send emails when export succeeds
                      type: boolean
                      default: false
                  required:
                    - automations
                  type: object
              required:
                - data
              type: object
      summary: Export Automation Connectors Summary
  /export/re.notifica.export.AutomationEvents:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  exportJob:
                    $ref: '#/components/schemas/ResponseCreated'
          description: Created
      tags:
        - Export
      description: >-
        Export the events for one or more automation connectors. 
        Maximum time interval is 180 days, it will be trimmed automatically.
        If no interval is given, it defaults to 30 days.
        This job might take some time to finish, check the export result endpoint to
        obtain information about the status of this export job.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postExportAutomationEvents
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    automations:
                      description: >-
                        The ids of the automation connectors you wish to export
                        events from
                      items:
                        $ref: '#/components/schemas/ObjectId'
                      type: array
                    before:
                      description: >-
                        Specify if export job should only include events
                        created before a certain date. Can not be used together with beforeSeconds.
                        Maximum time interval is 180 days, it will be trimmed automatically.
                        If no interval is given, it defaults to 30 days.
                      type: string
                      format: 'date-time'
                    beforeSeconds:
                      description: >-
                        Specify if export job should only include events
                        created before a number of seconds ago. Can not be used together with before.
                        Maximum time interval is 180 days, it will be trimmed automatically.
                        If no interval is given, it defaults to 30 days.
                      type: number
                    since:
                      description: >-
                        Specify if export job should only include events
                        created after a certain date. Can not be used together with sinceSeconds.
                        Maximum time interval is 180 days, it will be trimmed automatically.
                        If no interval is given, it defaults to 30 days.
                      type: string
                      format: 'date-time'
                    sinceSeconds:
                      description: >-
                        Specify if export job should only include events
                        created after a number of seconds ago. Can not be used together with since.
                        Maximum time interval is 180 days, it will be trimmed automatically.
                        If no interval is given, it defaults to 30 days.
                      type: number
                    skipErrorEmails:
                      description: >-
                        Do not send emails when export fails
                      type: boolean
                      default: false
                    skipSuccessEmails:
                      description: >-
                        Do not send emails when export succeeds
                      type: boolean
                      default: false
                  required:
                    - automations
                  type: object
              required:
                - data
              type: object
      summary: Export Automation Connectors Events
  /export/re.notifica.export.AutomationReplies:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  exportJob:
                    $ref: '#/components/schemas/ResponseCreated'
          description: Created
      tags:
        - Export
      description: >-
        Export the notification replies for one or more automation connectors. 
        Maximum time interval is 180 days, it will be trimmed automatically.
        If no interval is given, it defaults to 30 days.
        This job might take some time to finish, check the export result endpoint to
        obtain information about the status of this export job.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postExportAutomationReplies
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    automations:
                      description: >-
                        The ids of the automation connectors you wish to export
                        replies from
                      items:
                        $ref: '#/components/schemas/ObjectId'
                      type: array
                    before:
                      description: >-
                        Specify if export job should only include replies
                        created before a certain date. Can not be used together with beforeSeconds.
                        Maximum time interval is 180 days, it will be trimmed automatically.
                        If no interval is given, it defaults to 30 days.
                      type: string
                      format: 'date-time'
                    beforeSeconds:
                      description: >-
                        Specify if export job should only include replies
                        created before a number of seconds ago. Can not be used together with before.
                        Maximum time interval is 180 days, it will be trimmed automatically.
                        If no interval is given, it defaults to 30 days.
                      type: number
                    since:
                      description: >-
                        Specify if export job should only include replies
                        created after a certain date. Can not be used together with sinceSeconds.
                        Maximum time interval is 180 days, it will be trimmed automatically.
                        If no interval is given, it defaults to 30 days.
                      type: string
                      format: 'date-time'
                    sinceSeconds:
                      description: >-
                        Specify if export job should only include replies
                        created after a number of seconds ago. Can not be used together with since.
                        Maximum time interval is 180 days, it will be trimmed automatically.
                        If no interval is given, it defaults to 30 days.
                      type: number
                    skipErrorEmails:
                      description: >-
                        Do not send emails when export fails
                      type: boolean
                      default: false
                    skipSuccessEmails:
                      description: >-
                        Do not send emails when export succeeds
                      type: boolean
                      default: false
                  required:
                    - automations
                  type: object
              required:
                - data
              type: object
      summary: Export Automation Connectors Replies
  /export/re.notifica.export.AutomationHistory:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  exportJob:
                    $ref: '#/components/schemas/ResponseCreated'
          description: Created
      tags:
        - Export
      description: >-
        Export the notification history for one or more automation connectors. 
        Maximum time interval is 180 days, it will be trimmed automatically.
        If no interval is given, it defaults to 30 days.
        This job might take some time to finish, check the export result endpoint to
        obtain information about the status of this export job.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postExportAutomationHistory
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    automation:
                      $ref: '#/components/schemas/ObjectId'
                    before:
                      description: >-
                        Specify if export job should only include history
                        created before a certain date. Can not be used together with beforeSeconds.
                        Maximum time interval is 180 days, it will be trimmed automatically.
                        If no interval is given, it defaults to 30 days.
                      type: string
                      format: 'date-time'
                    beforeSeconds:
                      description: >-
                        Specify if export job should only include history
                        created before a number of seconds ago. Can not be used together with before.
                        Maximum time interval is 180 days, it will be trimmed automatically.
                        If no interval is given, it defaults to 30 days.
                      type: number
                    since:
                      description: >-
                        Specify if export job should only include history
                        created after a certain date. Can not be used together with sinceSeconds.
                        Maximum time interval is 180 days, it will be trimmed automatically.
                        If no interval is given, it defaults to 30 days.
                      type: string
                      format: 'date-time'
                    sinceSeconds:
                      description: >-
                        Specify if export job should only include history
                        created after a number of seconds ago. Can not be used together with since.
                        Maximum time interval is 180 days, it will be trimmed automatically.
                        If no interval is given, it defaults to 30 days.
                      type: number
                    skipErrorEmails:
                      description: >-
                        Do not send emails when export fails
                      type: boolean
                      default: false
                    skipSuccessEmails:
                      description: >-
                        Do not send emails when export succeeds
                      type: boolean
                      default: false
                  required:
                    - automation
                  type: object
              required:
                - data
              type: object
      summary: Export Automation Connectors History
  /export/re.notifica.export.LinkTracker:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  exportJob:
                    $ref: '#/components/schemas/ResponseCreated'
          description: Created
      tags:
        - Export
      description: >-
        Export the links tracked in emails. This job
        might take some time to finish, check the export result endpoint to
        obtain information about the status of this export job.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postExportLinkTracker
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - properties:
                    data:
                      properties:
                        campaign:
                          description: >-
                            The id of the campaign for which you wish to export links tracked
                          type: string
                          example: 1d9e80ef851d212aca82cf23
                        skipErrorEmails:
                          description: >-
                            Do not send emails when export fails
                          type: boolean
                          default: false
                        skipSuccessEmails:
                          description: >-
                            Do not send emails when export succeeds
                          type: boolean
                          default: false
                      type: object
                  required:
                    - data
                  type: object
                - properties:
                    data:
                      properties:
                        automation:
                          description: >-
                            The id of the automation connector for which you wish to export links tracked
                          type: string
                          example: 1d9e80ef851d212aca82cf23
                        skipErrorEmails:
                          description: >-
                            Do not send emails when export fails
                          type: boolean
                          default: false
                        skipSuccessEmails:
                          description: >-
                            Do not send emails when export succeeds
                          type: boolean
                          default: false
                      type: object
                  required:
                    - data
                  type: object
                - properties:
                    data:
                      properties:
                        notification:
                          description: >-
                            The id of the notification for which you wish to export links tracked
                          type: string
                          example: 1d9e80ef851d212aca82cf23
                        skipErrorEmails:
                          description: >-
                            Do not send emails when export fails
                          type: boolean
                          default: false
                        skipSuccessEmails:
                          description: >-
                            Do not send emails when export succeeds
                          type: boolean
                          default: false
                      type: object
                  required:
                    - data
                  type: object
      summary: Export Link Trackers
  '/export/result/{export}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The id of a export job
          in: path
          name: export
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            text/csv:
              example: |
                userID,userName
                "test@example.com","Test User"
          description: OK
      tags:
        - Export
      description: >-
        Get a specific export job result. This endpoint will only be available
        for export jobs with a status equal to success.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getExportResult
      summary: Get Export Result
  '/export/download/{export}':
    post:
      security:
        - MasterSecret: []
      parameters:
        - description: The id of a export job
          example: 54fec699beb5cb2f6f9839ed
          in: path
          name: export
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  expires:
                    $ref: '#/components/schemas/Date'
                  token:
                    type: string
                    example: 54fec699beb5cb2f6f9839ed/54fec699beb5cb2f6f9839ed
                type: object
          description: OK
      tags:
        - Export
      description: >-
        Create a temporary download link of the export job results. This
        endpoint will only be available for export jobs with a status equal to
        success. Please also note that this link will only be available for 5
        minutes. All export files will be located at
        https://push.notifica.re/export/download/{token}.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postExportDownloadById
      summary: Create Export Download Link
  '/export/{export}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The export job Id.
          in: path
          name: export
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  exportJob:
                    $ref: '#/components/schemas/ExportJobModel'
          description: OK
      tags:
        - Export
      description: >-
        Get a specific export job object.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getExportById
      summary: Get Export Job
    delete:
      security:
        - MasterSecret: []
      parameters:
        - description: The id of an export job.
          in: path
          name: export
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: export job deleted
          description: OK
      tags:
        - Export
      description: >-
        Delete an export job. This operation cannot be undone.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: deleteExportById
      summary: Delete Export Job
  /export/schedule:
    get:
      security:
        - MasterSecret: []
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ExportScheduleModelList'
          description: OK
      tags:
        - Scheduled Tasks
      description: >-
        Get all the export schedule objects.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getExportSchedule
      summary: List Export Schedules
  /export/schedule/{type}:
    post:
      security:
        - MasterSecret: []
      parameters:
        - description: The type of the export job to be scheduled
          in: path
          name: type
          required: true
          example: re.notifica.export.User
          schema:
            type: string
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  exportSchedule:
                    $ref: '#/components/schemas/ResponseCreated'
          description: Created
      tags:
        - Scheduled Tasks
      description: >-
        A schedule to run an import job
      operationId: postExportSchedule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportScheduleBase'
      summary: Create Export Schedule
  /export/schedule/test/{type}:
    post:
      security:
        - MasterSecret: []
      parameters:
        - description: The type of the export job to be scheduled
          in: path
          name: type
          required: true
          example: re.notifica.export.User
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: connection successful, test file created and removed
          description: OK
      tags:
        - Scheduled Tasks
      description: >-
        Test a schedule to run an export job before creating the schedule
      operationId: postExportScheduleTest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportScheduleBase'
      summary: Test Export Schedule
  '/export/schedule/{schedule}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The schedule id of a previously created schedule.
          in: path
          name: schedule
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  exportSchedule:
                    $ref: '#/components/schemas/ExportScheduleModel'
                type: object
          description: OK
      tags:
        - Scheduled Tasks
      description: >-
        Get an export schedule object.
      operationId: getExportScheduleById
      summary: Get Export Schedule
    put:
      security:
        - MasterSecret: []
      parameters:
        - description: The schedule id of a previously created schedule.
          in: path
          name: schedule
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: 'export schedule updated'
          description: OK
      tags:
        - Scheduled Tasks
      description: >-
        Update an export schedule object.
      operationId: putExportScheduleById
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportScheduleModel'
      summary: Update Export Schedule
    delete:
      security:
        - MasterSecret: []
      parameters:
        - description: The schedule id of a previously created schedule.
          in: path
          name: schedule
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '204':
          description: No content
      tags:
        - Scheduled Tasks
      description: >-
        Delete an export schedule object.
      operationId: deleteExportScheduleById
      summary: Delete Export Schedule
  '/export/schedule/test/{schedule}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The schedule id of a previously created schedule.
          in: path
          name: schedule
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: connection successful, test file created and removed
          description: OK
      tags:
        - Scheduled Tasks
      description: >-
        Test an export schedule.
      operationId: getExportScheduleTestById
      summary: Test Export Schedule
  '/export/schedule/{schedule}/run':
    put:
      security:
        - MasterSecret: []
      parameters:
        - description: The schedule id of a previously created schedule.
          in: path
          name: schedule
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: 'schedule updated'
          description: OK
      tags:
        - Scheduled Tasks
      description: >-
        Retry an export schedule
      operationId: putExportScheduleRun
      summary: Retry Export Schedule
  /import:
    get:
      security:
        - MasterSecret: []
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ImportJobModelList'
          description: OK
      tags:
        - Import
      description: >-
        Get all the import objects.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getImport
      summary: List Import Jobs
  '/import/fortype/{type}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The import type of a previously created job.
          example: re.notifica.import.UserSegment
          in: path
          name: type
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ImportJobModelList'
          description: OK
      tags:
        - Import
      description: >-
        Get all the import objects by type.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getImportForType
      summary: List Import Jobs For Type
  /import/re.notifica.import.Device:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  importJob:
                    $ref: '#/components/schemas/ResponseCreated'
          description: Created
      tags:
        - Import
      description: >-
        Used to import a list of devices. Every row in the referenced CSV should
        include at least a `deviceID`, `osVersion`, `appVersion` and `platform`
        for Push devices or `subscriptionId` for Email and SMS devices. Make
        sure you include `data.medium` property to one of the supported
        channels. It will default to `push` if not present.

        The device properties can also be defaulted to whatever you put in the
        `data` field in the request.

        There are two options in this import type that specify overwriting of existing devices
        `overwrite`, defaults to `false` and `forceOverwrite`, also defaults to false

        This request is authenticated with the `applicationKey` and
        `masterSecret`.


        Recognized columns in your .csv file are:


        + deviceID (should be a valid APNS, FCM or Safari Website Push token)


        + subscriptionId (should be a valid email or mobile phone number)


        + p256dh (for WebPush)


        + auth (for WebPush)


        + medium (one of the available channels: push, email, sms)


        + osVersion


        + appVersion


        + sdkVersion


        + platform (iOS, Android)


        + osString (defaults to platform + osVersion)


        + deviceString (defaults to 'unknown')


        + browserName


        + browserVersion


        + webPushCapable


        + language (defaults to 'en')


        + region


        + country


        + allowedUI


        + backgroundAppRefresh


        + locationServicesAuthStatus


        + locationServicesAccuracyAuth


        + bluetoothEnabled


        + tags, by default separated by `|`, if you use something else, don't
        forget to specify it in `tagsSeparator`


        + lastActive (ISO Date, defaults to current date/time)


        + longitude


        + latitude


        + locationAccuracy


        + course


        + speed


        + locationLastUpdated (ISO Date, defaults to lastActive)


        + timeZoneOffset


        + userID (If the userID doesn't exist yet, a new user will be created.
        If omitted, an anonymous user will be generated.)


        + userName (only used when userID is present. Defaults to 'anonymous')
      operationId: postImportDevice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportJobDevice'
      summary: Import Devices/Contacts/Numbers
  /import/re.notifica.import.User:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  importJob:
                    $ref: '#/components/schemas/ResponseCreated'
          description: Created
      tags:
        - Import
      description: >-
        Used to import a list of users. Every row in the referenced CSV should
        include at least a `userID`. userName is optional and defaults to
        `anonymous`. This import type has no extra settings.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.


        Recognized columns in your .csv file are:


        + userID


        + userName
      operationId: postImportUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportJobUser'
      summary: Import Users
  /import/re.notifica.import.UserSegment:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  importJob:
                    $ref: '#/components/schemas/ResponseCreated'
          description: Created
      tags:
        - Import
      description: >-
        Used to import a list of users into a segment. Every row in the
        referenced CSV should contain a `userID`.

        The user segment to import into should be set as the `userSegment`
        property of `data`.

        There is one option in this import type, which is `clear`. If set, it
        clears the segment before importing users, otherwise it just adds users.
        It defaults to `false`.

        Additionally you can also send or schedule a push notification whenever
        the import is finished. For that make sure you have previously created
        at least one template and then provide its Id in `notificationTemplate`
        and `push` as true as properties in the `data` object.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.


        Recognized columns in your .csv file are:


        + userID
      operationId: postImportUserSegment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportJobUserSegment'
      summary: Import Users Into Segment
  /import/re.notifica.import.Region:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  importJob:
                    $ref: '#/components/schemas/ResponseCreated'
          description: Created
      tags:
        - Import
      description: >-
        Used to import a list of regions. Regions can have a circular geometry,
        i.e., latitude/longitude plus a distance, or an advanced Polygon
        geometry. If only an advanced geometry is given, the import job will
        calculate an enclosing circle automatically. If no timezone or country
        are given, these will also be calculated automatically.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.


        Recognized columns in your .csv file are:


        + referenceKey


        + name


        + description


        + address


        + tags, separated by `|`


        + category, (`fence`, `poi`, `county`, `city`, `country`). Defaults to
        `fence`.


        + latitude for circular geometry


        + longitude for circular geometry


        + distance for circular geometry


        + coordinates (pairs of `longitude:latitude`, separated by `|`) for
        advanced geometry


        + major to be used for beacons in the region


        + timezone, defaults to `UTC`


        + timeZoneOffset, defaults to `0`


        + country
      operationId: postImportRegion
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportJobRegion'
      summary: Import Regions
  /import/re.notifica.import.Beacon:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  importJob:
                    $ref: '#/components/schemas/ResponseCreated'
          description: Created
      tags:
        - Import
      description: >-
        Used to import a list of beacons. If no region with a given major
        exists, and the `createRegion` property of `data` is set, a new region
        is created automatically with the same location as the beacon and
        default values for `category`, `timezone` and `distance`, or `fence`,
        `UTC` and `100` respectively.

        If no region was found or none could be created, the import row is
        skipped.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.


        Recognized columns in your .csv file are:


        + major


        + minor


        + name


        + purpose, (`general`, `pay`, `info`, `staff`, `admin`, `other`).
        Defaults to `general`.


        + latitude, defaults to region latitude


        + longitude, defaults to region longitude


        + timezone, defaults to `UTC`


        + notification, message  to be set for the beacon
      operationId: postImportBeacon
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportJobBeacon'
      summary: Import Beacons
  /import/re.notifica.import.Pass:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  importJob:
                    $ref: '#/components/schemas/ResponseCreated'
          description: Created
      tags:
        - Import
      description: >-
        Used to bulk import passes and optionally send them in a Push, Email or
        SMS message. To send a message when a pass is created set the property
        `sendNotification` in `data` to true. To send a message when an existing
        pass is update set the property `sendUpdateNotification` in `data` to
        true. If any of these properties is true you must also provide a
        template identifier in the property `notificationTemplate` in `data`.

        Set `passbook` in `data` to the passbook template Id to use.

        Data property `passData` can be used to set default values that will be
        set if not present in the CSV. Recognized properties in `passData` are
         `description`, `barcode.message`, `barcode.altText`, `location.latitude`,
        `location.longitude`, `location.altitude`, `location.regionMajor`,
        `location.regionId`, `location.relevantText`, `beacon.proximityUUID`,
        `beacon.major`, `beacon.minor`, `beacon.relevantText`,
        `locations` and `beacons`
        The property `passFields` inside `passData` can be used to include
        default values for fields from the Passbook Template.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.


        Recognized columns in your .csv file are:


        + userID (to send push notification to)


        + pass_barcode (if barcode is unique, can be used for redeem)


        + pass_barcode_message (not unique, cannot be together with
        pass_barcode)


        + pass_barcode_alt_text


        + pass_barcode_show_alt_text


        + pass_relevant_date


        + pass_expiration_date


        + pass_location_latitude


        + pass_location_longitude


        + pass_location_altitude


        + pass_location_relevant_text


        + pass_location_region_major


        + pass_location_region_id


        + pass_beacons (list of max 10 beacons, separated by '|' and formatted as 'proximityUUID;major;minor;relevantText')


        + pass_locations (list of max 10 locations, separated by '|' and formatted as 'latitude;longitude;altitude;relevantText')


        + pass_xxx (where xxx is any field defined in the Passbook Template)


        + notification_xxx (where `{{notification_xxx}}`, or `{{xxx}}` if `ignorePlaceholderPrefix` is true, is any placeholder defined in your Message Template)
      operationId: postImportPass
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportJobPass'
      summary: Import Passes
  /import/re.notifica.import.PassUpdate:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  importJob:
                    $ref: '#/components/schemas/ResponseCreated'
          description: Created
      tags:
        - Import
      description: >-
        Used to update one or more fields in one or more passes for a specific pass template.
        Set `passbook` in `data` to the passbook template Id to use.

        Data property `passData` can be used to set default values that will be
        set if not present in the CSV. Recognized properties in `passData` are
        `description`, `barcode.message`, `barcode.altText`, `location.latitude`,
        `location.longitude`, `location.altitude`, `location.regionMajor`,
        `location.regionId`, `location.relevantText`, `beacon.proximityUUID`,
        `beacon.major`, `beacon.minor`, `beacon.relevantText`,
        `locations` and `beacons`
        The property `passFields` inside `passData` can be used to include
        default values for fields from the Passbook Template.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.


        Recognized columns in your .csv file are:


        + pass_barcode (if barcode is unique, can be used for redeem)


        + pass_barcode_message (not unique, cannot be together with
        pass_barcode)


        + pass_barcode_alt_text


        + pass_barcode_show_alt_text


        + pass_relevant_date


        + pass_expiration_date


        + pass_location_latitude


        + pass_location_longitude


        + pass_location_altitude


        + pass_location_relevant_text


        + pass_location_region_major


        + pass_location_region_id


        + pass_beacons (list of max 10 beacons, separated by '|' and formatted as 'proximityUUID;major;minor;relevantText')


        + pass_locations (list of max 10 locations, separated by '|' and formatted as 'latitude;longitude;altitude;relevantText')


        + pass_xxx (where xxx is any field defined in the Passbook Template)
      operationId: postImportPassUpdate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportJobPassUpdate'
      summary: Import Pass Fields Update
  /import/re.notifica.import.Notification:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  importJob:
                    $ref: '#/components/schemas/ResponseCreated'
          description: Created
      tags:
        - Import
      description: >-
        Used to import a list of private messages to users or devices. Every row
        in the referenced CSV should contain at least a `userID` or a
        `deviceID`.

        Optionally, a Notification Template can be used to create the
        notifications. For that make sure you have previously created at least
        one template and then provide its Id in `notificationTemplate`.

        If no template is provided, each row should contain at least a
        `message`. Values present in the CSV will overwrite corresponding fields
        from the template, if provided.

        The notifications can also be scheduled by providing a
        `notificationSchedule` with `time` and `timezone`, defaulting to 'UTC'.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.


        Recognized columns in your .csv file are:


        + userID / deviceID / subscriptionId (if more than one is provided, userID is used over deviceID or subscriptionId)


        + title


        + subtitle


        + message (if no template is set, and medium is not given or set to `push`, this is mandatory)


        + subject (if no template is set, and medium is set to `email`, this is mandatory)


        + attachmentUri (lock screen image, publicly accessible image URL)


        + attachmentMimeType (`image/png`, `image/jpeg`)


        + ttl


        + sound


        + extra (JSON string)


        + notification_xxx (referring to a placeholder in the template)


        `title`, `subtitle`, and `message` can contain placeholders in the form
        of `{{notification_xxx}}` (or `{{xxx}}` if ignorePlaceholderPrefix is true)
        or any of the default placeholders, e.g. `{{userID}}` or `{{userName}}`, or `{{xxx}}` if ignorePlaceholderPrefix is true
      operationId: postImportNotification
      requestBody:
        content:
          application/json:
            schema:
             $ref: '#/components/schemas/ImportJobNotification'
      summary: Import Private Messages
  /import/re.notifica.import.GroupedNotification:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  importJob:
                    $ref: '#/components/schemas/ResponseCreated'
          description: Created
      tags:
        - Import
      description: >-
        Used to import a list of users or devices to send a notification to.
        Every row in the referenced CSV should contain at least a `userID` or a
        `deviceID`.

        A Notification Template must be used to create the notifications. For
        that make sure you have previously created at least one template and
        then provide its Id in `notificationTemplate`.

        The notification can also be scheduled by providing a
        `notificationSchedule` with `time` and `timezone`, defaulting to 'UTC'.

        Values of columns prefixed with `notification_` in the CSV can be used
        as placeholders in the template

        This request is authenticated with the `applicationKey` and
        `masterSecret`.


        Recognized columns in your .csv file are:


        + userID / deviceID / subscriptionId (if more than one is provided, userID is used over deviceID or subscriptionId)


        + notification_xxx (referring to a placeholder `{{notification_xxx}}`, or `{{xxx}}` if `ignorePlaceholderPrefix` is true, in the template)
      operationId: postImportGroupedNotification
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportJobGroupedNotification'
      summary: Import Grouped Messages
  /import/re.notifica.import.UserData:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  importJob:
                    $ref: '#/components/schemas/ResponseCreated'
          description: Created
      tags:
        - Import
      description: >-
        Used to import user data for a list of users. The user data in the import
        will be applied to all the users' current devices.
        Every row in the referenced CSV should contain at least a `userID`.

        Other column headers are interpreted as keys of User Data Fields as
        defined for the application. Unrecognized field keys are ignored.

        By default, empty values will count as `null` and will effectively clear
        the value that is stored with the device.

        By setting the import job data property `ignoreEmptyValues`, this behaviour is
        changed to ignoring these values and will effectively leave existing values
        as they are.

        Also, existing values for any User Data Field that is not included in the import
        will be left unchanged

        This request is authenticated with the `applicationKey` and
        `masterSecret`.


        Recognized columns in your .csv file are:


        + userID


        + xxx (the key of a application-defined User Data Field)
      operationId: postImportUserData
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportJobUserData'
      summary: Import User Data
  '/import/{import}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The import id of a previously created job.
          in: path
          name: import
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                 importJob:
                   $ref: '#/components/schemas/ImportJobModel'
                type: object
          description: OK
      tags:
        - Import
      description: >-
        Get an import object.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getImportById
      summary: Get Import
    put:
      security:
        - MasterSecret: []
      parameters:
        - description: The import id of a previously created job.
          in: path
          name: import
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: 'import job updated'
          description: OK
      tags:
        - Import
      description: >-
        Update an import object.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: putImportById
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  oneOf:
                  - $ref: '#/components/schemas/ImportDataDevice'
                  - $ref: '#/components/schemas/ImportDataUser'
                  - $ref: '#/components/schemas/ImportDataUserData'
                  - $ref: '#/components/schemas/ImportDataUserSegment'
                  - $ref: '#/components/schemas/ImportDataBeacon'
                  - $ref: '#/components/schemas/ImportDataRegion'
                  - $ref: '#/components/schemas/ImportDataPass'
                  - $ref: '#/components/schemas/ImportDataPassUpdate'
                  - $ref: '#/components/schemas/ImportDataNotification'
                  - $ref: '#/components/schemas/ImportDataGroupedNotification'
                path:
                  type: string
                  example: /imports/647431c4dc3798f2a5ae147411a787e8d52447e365d7972ec4d8535/dfeba0ade92ad65ec8619d4464333facc95f5c2feb55df98a92a78
              type: object
      summary: Update Import
    delete:
      security:
        - MasterSecret: []
      parameters:
        - description: The import id of a previously created job.
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: import
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No content
      tags:
        - Import
      description: >-
        Delete an import object.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: deleteImportById
      summary: Delete Import
  '/import/{import}/abort':
    put:
      security:
        - MasterSecret: []
      parameters:
        - description: The import id of a previously created job.
          in: path
          name: import
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: 'import aborted'
          description: OK
      tags:
        - Import
      description: >-
        Abort an import.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: putImportAbort
      summary: Abort Import
  /import/schedule:
    get:
      security:
        - MasterSecret: []
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ImportScheduleModelList'
          description: OK
      tags:
        - Scheduled Tasks
      description: >-
        Get all the import schedule objects.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getImportSchedule
      summary: List Import Schedules
  /import/schedule/{type}:
    post:
      security:
        - MasterSecret: []
      parameters:
        - description: The type of the import job to be scheduled
          in: path
          name: type
          required: true
          example: re.notifica.import.UserSegment
          schema:
            type: string
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  importSchedule:
                    $ref: '#/components/schemas/ResponseCreated'
          description: Created
      tags:
        - Scheduled Tasks
      description: >-
        A schedule to run an import job
      operationId: postImportSchedule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportScheduleBase'
      summary: Create Import Schedule
  /import/schedule/test/{type}:
    post:
      security:
        - MasterSecret: []
      parameters:
        - description: The type of the import job to be scheduled
          in: path
          name: type
          required: true
          example: re.notifica.import.UserSegment
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessageFileInfo'
              example:
                - message: connection successful, import file found
                  fileInfo:
                    contentLength: 16384
                    lastModified: 1525954318000
          description: OK
      tags:
        - Scheduled Tasks
      description: >-
        Test a schedule to run an import job before creating the schedule
      operationId: postImportScheduleTest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportScheduleBase'
      summary: Test Import Schedule
  '/import/schedule/{schedule}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The schedule id of a previously created schedule.
          in: path
          name: schedule
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  importSchedule:
                    $ref: '#/components/schemas/ImportScheduleModel'
                type: object
          description: OK
      tags:
        - Scheduled Tasks
      description: >-
        Get an import schedule object.
      operationId: getImportScheduleById
      summary: Get Import Schedule
    put:
      security:
        - MasterSecret: []
      parameters:
        - description: The schedule id of a previously created schedule.
          in: path
          name: schedule
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: 'import schedule updated'
          description: OK
      tags:
        - Scheduled Tasks
      description: >-
        Update an import schedule object.
      operationId: putImportScheduleById
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportScheduleModel'
      summary: Update Import Schedule
    delete:
      security:
        - MasterSecret: []
      parameters:
        - description: The schedule id of a previously created schedule.
          in: path
          name: schedule
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '204':
          description: No content
      tags:
        - Scheduled Tasks
      description: >-
        Delete an import schedule object.
      operationId: deleteImportScheduleById
      summary: Delete Import Schedule
  '/import/schedule/test/{schedule}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The schedule id of a previously created schedule.
          in: path
          name: schedule
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessageFileInfo'
              example:
                - message: connection successful, import file found
                  fileInfo:
                    contentLength: 16384
                    lastModified: 1525954318000
          description: OK
      tags:
        - Scheduled Tasks
      description: >-
        Test an import schedule.
      operationId: getImportScheduleTestById
      summary: Test Import Schedule
  '/import/schedule/{schedule}/run':
    put:
      security:
        - MasterSecret: []
      parameters:
        - description: The schedule id of a previously created schedule.
          in: path
          name: schedule
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: 'schedule updated'
          description: OK
      tags:
        - Scheduled Tasks
      description: >-
        Retry an import schedule
      operationId: putImportScheduleRun
      requestBody:
        content:
          application/json:
            schema:
              properties:
                lastRun:
                  type: string
                  format: date-time
                  description: check for import files newer than this date
      summary: Retry Import Schedule
  /link:
    get:
      security:
        - MasterSecret: []
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/LinkModelList'
          description: OK
      tags:
        - Links
      description: >-
        Get all the links objects.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getLink
      summary: List Links
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  link:
                    $ref: '#/components/schemas/ResponseCreated'
          description: Created
      tags:
        - Links
      description: >-
        Create a new link. This request is authenticated with the
        `applicationKey` and  `masterSecret`.
      operationId: postLink
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkBase'
      summary: Create Link
  '/link/{link}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The id of the link
          in: path
          name: link
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
        - description: The maximum number of results to retrieve.
          example: '100'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: number
        - description: The sorting property
          example: 'name'
          in: query
          name: sort
          required: false
          schema:
            default: id
            type: string
            enum:
              - id
              - name
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  link:
                    $ref: '#/components/schemas/LinkModel'
                type: object
          description: OK
      tags:
        - Links
      description: >-
        Get a link object.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getLinkById
      summary: Get Link
    put:
      security:
        - MasterSecret: []
      parameters:
        - description: The ID of the link
          in: path
          name: link
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: link updated
          description: OK
      tags:
        - Links
      description: >-
        Update all the data of a link. This request is authenticated with the
        `applicationKey` and  `masterSecret`.
      operationId: putLinkById
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkBase'
      summary: Update Link
    delete:
      security:
        - MasterSecret: []
      parameters:
        - description: The ID of the link
          in: path
          name: link
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: link removed
          description: OK
      tags:
        - Links
      description: >-
        Delete a link. This request is authenticated with the `applicationKey`
        and  `masterSecret`.
      operationId: deleteLinkById
      summary: Delete Link
  /link/prefix:
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
        - description: The sorting property
          example: 'prefix'
          in: query
          name: sort
          required: false
          schema:
            default: id
            type: string
            enum:
              - id
              - prefix
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/LinkPrefixModelList'
          description: OK
      tags:
        - Links
      description: >-
        Get all the link prefix objects.
      operationId: getLinkPrefix
      summary: List Link Prefixes
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  linkPrefix:
                    $ref: '#/components/schemas/ResponseCreated'
          description: Created
      tags:
        - Links
      description: >-
        Create a new link prefix.
      operationId: postLinkPrefix
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkPrefixBase'
      summary: Create Link Prefix
  '/link/prefix/{prefix}':
    delete:
      security:
        - MasterSecret: []
      parameters:
        - description: The ID of the link prefix
          in: path
          name: prefix
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: link prefix removed
          description: OK
      tags:
        - Links
      description: >-
        Delete a link prefix. Link prefixes can only be re-registered after 30 days.
      operationId: deleteLinkPrefixById
      summary: Delete Link Prefix
  /notification:
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 10
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
        - description: >-
            The medium of the messages (it can be one of the following: push,
            email, sms)
          example: push
          in: query
          name: medium
          required: false
          schema:
            default: push
            type: string
            enum: [push, email, sms]
        - description: >-
            The scope of the messages (it can be one of the following:
            application, segments, tags)
          example: application
          in: query
          name: scope
          required: false
          schema:
            type: string
            enum: [application, segments, tags]
        - description: Filter by messages that have been scheduled
          example: '1'
          in: query
          name: scheduled
          required: false
          schema:
            type: boolean
        - description: Filter messages by tag (scope must be set to tags)
          example: tag_news
          in: query
          name: tag
          required: false
          schema:
            type: string
        - description: Filter messages by segment (scope must be set to segments)
          in: query
          name: segment
          required: false
          schema:
            $ref: '#/components/schemas/ObjectId'
        - description: Filter by messages that have been archived
          example: '1'
          in: query
          name: archived
          required: false
          schema:
            type: boolean
        - description: Filter by messages that have have a status of draft
          example: '1'
          in: query
          name: draft
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/NotificationList'
          description: OK
      tags:
        - Messages
      description: >-
        Retrieves the list of messages sent by this app (excluding triggered,
        campaigns or private messages).

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getNotification
      summary: List Messages
  /notification/all:
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 10
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
        - description: >-
            Notifications since a specific date, overrides `If-Modified-Since`
            HTTP header
          example: '2016-01-01T12:00:00'
          in: query
          name: since
          required: false
          schema:
            type: string
        - description: Filter by messages that have been archived
          example: '1'
          in: query
          name: archived
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/NotificationList'
          description: OK
      tags:
        - Messages
      description: >-
        Retrieves the list of all messages sent by this app. This endpoint
        accepts the If-Modified-Since HTTP header.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getNotificationAll
      summary: Get All Messages
  /notification/push/broadcast:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessageCreated'
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notifications are queued
          description: Created
      tags:
        - Messages
      description: >-
        Send a message to **all** push devices.

        You can also schedule a broadcast, if `scheduled` is true you should
        immediately use /notification/schedule to create the schedule task.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationPushBroadcast
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationPushBroadcast'
      summary: Create Push Message Broadcast
  /notification/push/criteria:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessageCreated'
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notifications are queued
          description: Created
      tags:
        - Messages
      description: >-
        Send a message to devices that match a certain criteria.

        You can also schedule these messages, if `scheduled` is true you should
        immediately use /notification/schedule to create a schedule task.

        The request requires a criteria object. This request must be
        authenticated with the `applicationKey` and `masterSecret`.
      operationId: postNotificationPushCriteria
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationPushCriteria'
      summary: Create Push Message to Criteria
  /notification/push/event:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessageCreated'
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notifications are queued
          description: Created
      tags:
        - Messages
      description: >-
        Send a message to any push device that executed an event.

        You can also schedule a push message based on events, if `scheduled` is
        true you should immediately use /notification/schedule to create the
        schedule task.

        The request requires an eventCriteria object. This request must be
        authenticated with the `applicationKey` and `masterSecret`.
      operationId: postNotificationPushEvent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationPushEvent'
      summary: Create Push Message to Events
  /notification/push/segments:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessageCreated'
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notifications are queued
          description: Created
          headers: {}
      tags:
        - Messages
      description: >-
        Send a message to users in any of the specified `segments`.

        You can also schedule these messages, if `scheduled` is true you should
        immediately use /notification/schedule to create a schedule task.

        The request requires an array of segment IDs. This request must be
        authenticated with the `applicationKey` and `masterSecret`.
      operationId: postNotificationPushSegments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationPushSegments'
      summary: Create Push Message to Segments
  /notification/push/tags:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessageCreated'
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notifications are queued
          description: Created
      tags:
        - Messages
      description: >-
        Send a message to devices in any of the specified `tags`.

        You can also schedule these message, if `scheduled` is true you should
        immediately use /notification/schedule to create a schedule task.

        The request requires an array of tags. This request must be
        authenticated with the `applicationKey` and `masterSecret`.
      operationId: postNotificationPushTags
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationPushTags'
      summary: Create Push Message to Tags
  '/notification/push/user/{userID}':
    post:
      security:
        - MasterSecret: []
      parameters:
        - description: >-
            The user ID is the one the client device registered with, e.g., the
            user's email address.
          example: testuser@example.com
          in: path
          name: userID
          required: true
          schema:
            type: string
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessageCreated'
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notifications are queued
          description: Created
      tags:
        - Messages
      description: >-
        Send a message to one single user and its devices.

        You can also schedule a private message, if `scheduled` is true you
        should immediately use /notification/schedule to create a schedule task.

        The request requires an userID. This request must be authenticated with
        the `applicationKey` and `masterSecret`.
      operationId: postNotificationPushUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationPushUser'
      summary: Create Push Message to User
  '/notification/push/device/{deviceID}':
    post:
      security:
        - MasterSecret: []
      parameters:
        - description: >-
            The deviceID is the ID as registered by the device, e.g. APNS, FCM
            or Web Push token.
          example: bbff2ce9b547d2df4731bac277xxx
          in: path
          name: deviceID
          required: true
          schema:
            type: string
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessageCreated'
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notifications are queued
          description: Created
      tags:
        - Messages
      description: >-
        Send a message to a single device.

        You can also schedule this type of messages, if `scheduled` is true you
        should immediately use /notification/schedule to create a schedule task.

        The request requires a deviceID. This request must be authenticated with
        the `applicationKey` and `masterSecret`.
      operationId: postNotificationPushDevice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationPushDevice'
      summary: Create Push Message to Device
  /notification/push/triggered:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessageCreated'
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notifications are queued
          description: Created
      tags:
        - Messages
      description: >-
        Create a message to be used in automation connector or geo-trigger.

        You cannot schedule a triggered message.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationPushTriggered
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationPushTriggered'
      summary: Create Triggered Push Message
  /notification/email/broadcast:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessageCreated'
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notification queued
          description: Created
      tags:
        - Messages
      description: >-
        Send a message to **all** email contacts.

        You can also schedule a broadcast, if `scheduled` is true you should
        immediately use /notification/schedule to create the schedule task.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationEmailBroadcast
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationEmailBroadcast'
      summary: Create Email Message Broadcast
  /notification/email/criteria:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessageCreated'
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notifications are queued
          description: Created
      tags:
        - Messages
      description: >-
        Send a message to contacts that match a certain criteria.

        You can also schedule these messages, if `scheduled` is true you should
        immediately use /notification/schedule to create a schedule task.

        The request requires a criteria object. This request must be
        authenticated with the `applicationKey` and `masterSecret`.
      operationId: postNotificationEmailCriteria
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationEmailCriteria'
      summary: Create Email Message to Criteria
  /notification/email/event:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessageCreated'
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notifications are queued
          description: Created
      tags:
        - Messages
      description: >-
        Send a message to any contact that executed an event.

        You can also schedule a message based on events, if `scheduled` is true
        you should immediately use /notification/schedule to create the schedule
        task.

        The request requires an eventCriteria object. This request must be
        authenticated with the `applicationKey` and `masterSecret`.
      operationId: postNotificationEmailEvent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationEmailEvent'
      summary: Create Email Message to Events
  /notification/email/segments:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessageCreated'
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notifications are queued
          description: Created
      tags:
        - Messages
      description: >-
        Send a message to users in any of the specified `segments`.

        You can also schedule these messages, if `scheduled` is true you should
        immediately use /notification/schedule to create a schedule task.

        The request requires an array of segment IDs. This request must be
        authenticated with the `applicationKey` and `masterSecret`.
      operationId: postNotificationEmailSegments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationEmailSegments'
      summary: Create Email Message to Segments
  /notification/email/tags:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessageCreated'
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notifications are queued
          description: Created
      tags:
        - Messages
      description: >-
        Send a message to contacts in any of the specified `tags`.

        You can also schedule these message, if `scheduled` is true you should
        immediately use /notification/schedule to create a schedule task.

        The request requires an array of tags. This request must be
        authenticated with the `applicationKey` and `masterSecret`.
      operationId: postNotificationEmailTags
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationEmailTags'
      summary: Create Email Message to Tags
  '/notification/email/user/{userID}':
    post:
      security:
        - MasterSecret: []
      parameters:
        - description: The user ID used when registering a contact.
          example: NL1234567890
          in: path
          name: userID
          required: true
          schema:
            type: string
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessageCreated'
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notifications are queued
          description: Created
      tags:
        - Messages
      description: >-
        Send a message to one single user and its email contacts.

        You can also schedule a private message, if `scheduled` is true you
        should immediately use /notification/schedule to create a schedule task.

        The request requires an userID. This request must be authenticated with
        the `applicationKey` and `masterSecret`.
      operationId: postNotificationEmailUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationEmailUser'
      summary: Create Email Message to User
  '/notification/email/device/{deviceID}':
    post:
      security:
        - MasterSecret: []
      parameters:
        - description: The contactID generated for this email contact.
          example: bbff2ce9b547d2df4731bac277xxx
          in: path
          name: deviceID
          required: true
          schema:
            type: string
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessageCreated'
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notifications are queued
          description: Created
      tags:
        - Messages
      description: >-
        Send a message to a single email contact.

        You can also schedule this type of messages, if `scheduled` is true you
        should immediately use /notification/schedule to create a schedule task.

        The request requires a deviceID. This request must be authenticated with
        the `applicationKey` and `masterSecret`.
      operationId: postNotificationEmailDevice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationEmailDevice'
      summary: Create Email Message to Contact
  /notification/email/triggered:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessageCreated'
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notifications are queued
          description: Created
      tags:
        - Messages
      description: >-
        Create a message to be used in automation connector.

        You cannot schedule a triggered message.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationEmailTriggered
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationEmailTriggered'
      summary: Create Triggered Email Message
  /notification/sms/broadcast:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessageCreated'
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notifications are queued
          description: Created
      tags:
        - Messages
      description: >-
        Send a message to **all** phone numbers.

        You can also schedule a broadcast, if `scheduled` is true you should
        immediately use /notification/schedule to create the schedule task.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationSmsBroadcast
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationSmsBroadcast'
      summary: Create SMS Message Broadcast
  /notification/sms/criteria:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessageCreated'
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notifications are queued
          description: Created
      tags:
        - Messages
      description: >-
        Send a message to sms numbers that match a certain criteria.

        You can also schedule these messages, if `scheduled` is true you should
        immediately use /notification/schedule to create a schedule task.

        The request requires a criteria object. This request must be
        authenticated with the `applicationKey` and `masterSecret`.
      operationId: postNotificationSmsCriteria
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationSmsCriteria'
      summary: Create SMS Message to Criteria
  /notification/sms/event:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessageCreated'
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notifications are queued
          description: Created
      tags:
        - Messages
      description: >-
        Send a message to any sms number that executed an event.

        You can also schedule a message based on events, if `scheduled` is true
        you should immediately use /notification/schedule to create the schedule
        task.

        The request requires an eventCriteria object. This request must be
        authenticated with the `applicationKey` and `masterSecret`.
      operationId: postNotificationSmsEvent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationSmsEvent'
      summary: Create SMS Message to Events
  /notification/sms/segments:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessageCreated'
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notifications are queued
          description: Created
      tags:
        - Messages
      description: >-
        Send a message to users in any of the specified `segments`.

        You can also schedule these messages, if `scheduled` is true you should
        immediately use /notification/schedule to create a schedule task.

        The request requires an array of segment IDs. This request must be
        authenticated with the `applicationKey` and `masterSecret`.
      operationId: postNotificationSmsSegments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationSmsSegments'
      summary: Create SMS Message to Segments
  /notification/sms/tags:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessageCreated'
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notifications are queued
          description: Created
      tags:
        - Messages
      description: >-
        Send a message to a sms number in any of the specified `tags`.

        You can also schedule these message, if `scheduled` is true you should
        immediately use /notification/schedule to create a schedule task.

        The request requires an array of tags. This request must be
        authenticated with the `applicationKey` and `masterSecret`.
      operationId: postNotificationSmsTags
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationSmsTags'
      summary: Create SMS Message to Tags
  '/notification/sms/user/{userID}':
    post:
      security:
        - MasterSecret: []
      parameters:
        - description: The user ID used when registering a contact.
          example: NL1234567890
          in: path
          name: userID
          required: true
          schema:
            type: string
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessageCreated'
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notifications are queued
          description: Created
      tags:
        - Messages
      description: >-
        Send a message to one single user and its email contacts.

        You can also schedule a private message, if `scheduled` is true you
        should immediately use /notification/schedule to create a schedule task.

        The request requires an userID. This request must be authenticated with
        the `applicationKey` and `masterSecret`.
      operationId: postNotificationSmsUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationSmsUser'
      summary: Create SMS Message to User
  '/notification/sms/device/{deviceID}':
    post:
      security:
        - MasterSecret: []
      parameters:
        - description: The contactID generated for this email contact.
          example: bbff2ce9b547d2df4731bac277xxx
          in: path
          name: deviceID
          required: true
          schema:
            type: string
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessageCreated'
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notifications are queued
          description: Created
      tags:
        - Messages
      description: >-
        Send a message to a single sms number.

        You can also schedule this type of messages, if `scheduled` is true you
        should immediately use /notification/schedule to create a schedule task.

        The request requires a deviceID. This request must be authenticated with
        the `applicationKey` and `masterSecret`.
      operationId: postNotificationSmsDevice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationSmsDevice'
      summary: Create SMS Message to Phone
  /notification/sms/triggered:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessageCreated'
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notifications are queued
          description: Created
      tags:
        - Messages
      description: >-
        Create a message to be used in automation connector.

        You cannot schedule a triggered message.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationSmsTriggered
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationSmsTriggered'
      summary: Create Triggered SMS Message
  /notification/fromtemplate/{template}/broadcast:
    post:
      security:
        - MasterSecret: []
      parameters:
        - description: >-
            The notification template to use
          in: path
          name: template
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessageCreated'
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notifications are queued
          description: Created
      tags:
        - Messages
      description: >-
        Send a message to all, based on template

        You can also schedule a broadcast, if `scheduled` is true you should
        immediately use /notification/schedule to create the schedule task.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationFromTemplateBroadcast
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationFromTemplateBroadcast'
      summary: Create Message Broadcast From Template
  /notification/fromtemplate/{template}/criteria:
    post:
      security:
        - MasterSecret: []
      parameters:
        - description: >-
            The notification template to use
          in: path
          name: template
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessageCreated'
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notifications are queued
          description: Created
      tags:
        - Messages
      description: >-
        Send a message to devices that match a certain criteria, based on template

        You can also schedule these messages, if `scheduled` is true you should
        immediately use /notification/schedule to create a schedule task.

        The request requires a criteria object. This request must be
        authenticated with the `applicationKey` and `masterSecret`.
      operationId: postNotificationFromTemplateCriteria
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationFromTemplateCriteria'
      summary: Create Message to Criteria From Template
  /notification/fromtemplate/{template}/event:
    post:
      security:
        - MasterSecret: []
      parameters:
        - description: >-
            The notification template to use
          in: path
          name: template
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessageCreated'
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notifications are queued
          description: Created
      tags:
        - Messages
      description: >-
        Send a message to any device that executed an event, based on template

        You can also schedule a push message based on events, if `scheduled` is
        true you should immediately use /notification/schedule to create the
        schedule task.

        The request requires an eventCriteria object. This request must be
        authenticated with the `applicationKey` and `masterSecret`.
      operationId: postNotificationFromTemplateEvent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationFromTemplateEvent'
      summary: Create Message to Events From Template
  /notification/fromtemplate/{template}/segments:
    post:
      security:
        - MasterSecret: []
      parameters:
        - description: >-
            The notification template to use
          in: path
          name: template
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessageCreated'
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notifications are queued
          description: Created
          headers: {}
      tags:
        - Messages
      description: >-
        Send a message to users in any of the specified `segments`, based on template

        You can also schedule these messages, if `scheduled` is true you should
        immediately use /notification/schedule to create a schedule task.

        The request requires an array of segment IDs. This request must be
        authenticated with the `applicationKey` and `masterSecret`.
      operationId: postNotificationFromTemplateSegments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationFromTemplateSegments'
      summary: Create Message to Segments From Template
  /notification/fromtemplate/{template}/tags:
    post:
      security:
        - MasterSecret: []
      parameters:
        - description: >-
            The notification template to use
          in: path
          name: template
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessageCreated'
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notifications are queued
          description: Created
      tags:
        - Messages
      description: >-
        Send a message to devices in any of the specified `tags`, based on template

        You can also schedule these message, if `scheduled` is true you should
        immediately use /notification/schedule to create a schedule task.

        The request requires an array of tags. This request must be
        authenticated with the `applicationKey` and `masterSecret`.
      operationId: postNotificationFromTemplateTags
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationFromTemplateTags'
      summary: Create Message to Tags From Template
  '/notification/fromtemplate/{template}/user/{userID}':
    post:
      security:
        - MasterSecret: []
      parameters:
        - description: >-
            The notification template to use
          in: path
          name: template
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
        - description: >-
            The user ID is the one the client device registered with, e.g., the
            user's email address.
          example: testuser@example.com
          in: path
          name: userID
          required: true
          schema:
            type: string
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessageCreated'
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notifications are queued
          description: Created
      tags:
        - Messages
      description: >-
        Send a message to one single user and its devices, based on template

        You can also schedule a private message, if `scheduled` is true you
        should immediately use /notification/schedule to create a schedule task.

        The request requires an userID. This request must be authenticated with
        the `applicationKey` and `masterSecret`.
      operationId: postNotificationFromTemplateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationFromTemplateUser'
      summary: Create Message to User From Template
  '/notification/fromtemplate/{template}/device/{deviceID}':
    post:
      security:
        - MasterSecret: []
      parameters:
        - description: >-
            The notification template to use
          in: path
          name: template
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
        - description: >-
            The deviceID is the ID as registered by the device, e.g. APNS, FCM
            or Web Push token.
          example: bbff2ce9b547d2df4731bac277xxx
          in: path
          name: deviceID
          required: true
          schema:
            type: string
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessageCreated'
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notifications are queued
          description: Created
      tags:
        - Messages
      description: >-
        Send a message to a single device, based on template

        You can also schedule this type of messages, if `scheduled` is true you
        should immediately use /notification/schedule to create a schedule task.

        The request requires a deviceID. This request must be authenticated with
        the `applicationKey` and `masterSecret`.
      operationId: postNotificationFromTemplateDevice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationFromTemplateDevice'
      summary: Create Message to Device From Template
  /notification/system:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessageCreated'
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notifications are queued
          description: Created
      tags:
        - Messages
      description: >-
        System push messages are silent messages that will not generate any
        remote notification in the device's lock-screen or notification center.
        This endpoint will send a silent notifications to all your devices.
        Optionally you can also provide one of the following parameters:
        criteria, a list of tags, a list of tags and segments, a list of
        segments or a location. This will allow you to filter the devices you
        are trying to reach. In iOS, your app must declare
        **remote-notification** background mode.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationSystem
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationSystemBroadcast'
      summary: Create System Push Message
  '/notification/system/user/{userID}':
    post:
      security:
        - MasterSecret: []
      parameters:
        - description: The userID you are targeting
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: userID
          required: true
          schema:
            type: string
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessageCreated'
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notifications are queued
          description: Created
      tags:
        - Messages
      description: >-
        System push messages are silent messages that will not generate any
        remote notification in the device's lock-screen or notification center.
        This endpoint will send a silent notifications to a specific user and
        its devices. In iOS, your app must declare **remote-notification**
        background mode.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationSystemUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationSystemUser'
      summary: System Push to User
  '/notification/system/device/{deviceID}':
    post:
      security:
        - MasterSecret: []
      parameters:
        - description: The deviceID you are targeting
          example: 5245bc5b3e66a3b01f0024d4xxxx
          in: path
          name: deviceID
          required: true
          schema:
            type: string
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessageCreated'
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notifications are queued
          description: Created
      tags:
        - Messages
      description: >-
        System push messages are silent messages that will not generate any
        remote notification in the device's lock-screen or notification center.
        This endpoint will send a silent notifications to a specific device. In
        iOS, your app must declare **remote-notification** background mode.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationSystemDevice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationSystemDevice'
      summary: System Push to Device
  '/notification/user/{userID}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: >-
            The user ID is the one the client device registered with, e.g., the
            user's email address.
          example: testuser@example.com
          in: path
          name: userID
          required: true
          schema:
            type: string
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 10
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/NotificationList'
          description: OK
      tags:
        - Messages
      description: >-
        Retrieves the list of messages sent to a specific user.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getNotificationUser
      summary: List User Messages
  '/notification/device/{deviceID}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: >-
            The deviceID
          example: 5245bc5b3e66a3b01f0024d4xxxx
          in: path
          name: deviceID
          required: true
          schema:
            type: string
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 10
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/NotificationList'
          description: OK
      tags:
        - Messages
      description: >-
        Retrieves the list of messages sent to a specific device.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getNotificationDevice
      summary: List Device Messages
  '/notification/{notification}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The notification ID given whenever you create a message.
          in: path
          name: notification
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  notification:
                    $ref: '#/components/schemas/NotificationModel'
          description: OK
      tags:
        - Messages
      description: >-
        Retrieve a specific message object.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getNotificationById
      summary: Get Message
    put:
      security:
        - MasterSecret: []
      parameters:
        - description: The notification ID given whenever you create a message.
          in: path
          name: notification
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: notification updated
          description: OK
      tags:
        - Messages
      description: >-
        Update a specific message object. Only for drafts, scheduled or triggered messages.
      operationId: updateNotificationById
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationModel'
      summary: Update Message
    delete:
      security:
        - MasterSecret: []
      parameters:
        - description: The notification ID given whenever you create a message.
          in: path
          name: notification
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: notification draft discarded
          description: OK
      tags:
        - Messages
      description: >-
        Delete a specific message object. Only for drafts
      operationId: deleteNotificationById
      summary: Delete Message
  /notification/{notification}/archive:
    put:
      security:
        - MasterSecret: []
      parameters:
        - description: >-
            The notification ID given whenever you create or retrieve a message
            object.
          in: path
          name: notification
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: notification archived
          description: OK
      tags:
        - Messages
      description: >-
        Archive a message, it will not show up in the list of messages anymore
      operationId: puttNotificationArchiveById
      summary: Archive Message
  /notification/{notification}/info:
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: >-
            The notification ID given whenever you create or retrieve a message
            object.
          in: path
          name: notification
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
                schema:
                  properties:
                    info:
                      $ref: '#/components/schemas/NotificationInfoModel'
          description: OK
      tags:
        - Messages
      description: >-
        Retrieve information about your message performance.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getNotificationInfo
      summary: Get Message Info
  /notification/aggregation/{aggregation}:
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: >-
            The aggregation ID for this notification, i.e., an automation id
          in: path
          name: aggregation
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  info:
                    $ref: '#/components/schemas/NotificationInfoModel'
          description: OK
      tags:
        - Messages
      description: >-
        Retrieve information about your message performance.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getNotificationAggregateInfo
      summary: Get Message Aggregate Info
  /notification/log:
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 25
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
        - description: >-
            Use this to retrieve records since a specific date, overrides
            `If-Modified-Since` HTTP header
          example: '2016-01-01T12:00:00'
          in: query
          name: since
          required: false
          schema:
            type: string
        - description: The sorter order for your results
          example: asc
          in: query
          name: order
          required: false
          schema:
            default: desc
            enum:
              - asc
              - desc
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  log:
                    type: array
                    items:
                      $ref: '#/components/schemas/NotificationLogModel'
          description: OK
      tags:
        - Message Log
      description: >-
        Retrieve information about errors related to APNS, FCM, Web Push, Email
        and SMS feedback service.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getNotificationLog
      summary: Get Message Log
    delete:
      security:
        - MasterSecret: []
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: log cleared
          description: OK
      tags:
        - Message Log
      description: >-
        Clear the list of errors related to APNS, GCM and HMS feedback service.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: deleteNotificationLog
      summary: Delete Message Log
  /notification/mjml/transform:
    post:
      security:
        - MasterSecret: []
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  html:
                    description: The generated HTML
                    type: string
                    example: '<!doctype html><html><body><p>Test</p></body></html>'
          description: OK
      tags:
        - Messages
      description: >-
        Transform MJML to HTML

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationMjmlTransform
      requestBody:
        content:
          application/json:
            schema:
              properties:
                mjml:
                  type: string
                  example: '<mjml><mj-body><mj-section><mj-column><mj-text">Test</mj-text></mj-column></mj-section></mj-body></mjml>'
      summary: Transform MJML Content
  /notification/partial:
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
        - description: The key to search for
          example: 'test_'
          in: query
          name: search
          required: false
          schema:
            type: string
        - description: The medium to search for
          example: push
          in: query
          name: medium
          required: false
          schema:
            default: push
            type: string
            enum: [push, email, all]
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/NotificationPartialList'
          description: OK
      tags:
        - Message Partial
      description: >-
        Returns a list of all partials for your app

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getNotificationPartial
      summary: List Partials
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  partial:
                    $ref: '#/components/schemas/ResponseCreated'
          description: Created
      tags:
        - Message Partial
      description: >-
        Create a partial to be used in messages.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationPartial
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationPartialBase'
      summary: Create Message Partial
  /notification/partial/keys:
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
        - description: The medium to search for
          example: push
          in: query
          name: medium
          required: false
          schema:
            default: push
            type: string
            enum: [push, email, all]
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  partialKeys:
                    type: array
                    items:
                      properties:
                        name:
                          type: string
                          example: test_footer
                        count:
                          type: number
                          example: 1
                  count:
                    type: number
                    example: 1
          description: OK
      tags:
        - Message Partial
      description: >-
        Returns a list of all partial keys for your app

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getNotificationPartialKeys
      summary: List Partial Keys
  /notification/partial/forkey/{key}:
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
        - description: The key
          example: 'test_footer'
          in: path
          name: key
          required: true
          schema:
            type: string
        - description: The medium to search for
          example: push
          in: query
          name: medium
          required: false
          schema:
            default: push
            type: string
            enum: [push, email, all]
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/NotificationPartialList'
          description: OK
      tags:
        - Message Partial
      description: >-
        Returns a list of all partials for your app

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getNotificationPartialForKey
      summary: Get Partials For Key
  /notification/partial/{partial}:
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The partial Id
          in: path
          name: partial
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  partial:
                    $ref: '#/components/schemas/NotificationPartialModel'
          description: OK
      tags:
        - Message Partial
      description: >-
        Returns a partial

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getNotificationPartialById
      summary: Get Partial
    put:
      security:
        - MasterSecret: []
      parameters:
        - description: The partial Id
          in: path
          name: partial
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: partial updated
          description: OK
      tags:
        - Message Partial
      description: >-
        Updates a partial

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: putNotificationPartialById
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationPartialBase'
      summary: Update Partial
    delete:
      security:
        - MasterSecret: []
      parameters:
        - description: The partial Id
          in: path
          name: partial
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: partial deleted
          description: OK
      tags:
        - Message Partial
      description: >-
        Deletes a partial

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: deleteNotificationPartialById
      summary: Delete Partial
  /notification/schedule:
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                count: 1
                schedules:
                  - _id: 56d421uu073cc157eu3137
                    application: 5489b42ff23e5815132b492a
                    lastRun: '2016-08-26T23:00:10.273Z'
                    local: true
                    nextRun: '2016-08-26T23:15:04.958Z'
                    notification: 56d421uu073cc157eu3137
                    status: running
                    time: '2016-08-26 23:01'
          description: OK
      tags:
        - Message Schedule
      description: >-
        Returns a list of all schedules for your app

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getNotificationSchedule
      summary: Get Scheduled Tasks
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  schedule:
                    $ref: '#/components/schemas/ResponseCreated'
          description: Created
      tags:
        - Message Schedule
      description: >-
        Start a scheduled task for a previously created message.

        The property `local` determines if message should be sent on the
        device's local time or UTC.

        If `local` is true make sure the `time` is at least 14 hours from now to
        make sure the message will arrive in all timezones.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationSchedule
      requestBody:
        content:
          application/json:
            schema:
              properties:
                local:
                  description: >-
                    Defines if message should be sent on date and time of the
                    device. If false time will be considered UTC.
                  type: boolean
                  default: false
                notification:
                  description: The notification Id of the message to be schedule.
                  type: string
                time:
                  description: >-
                    The date and time (YYYY-MM-DD hh:mm) in which the message
                    should be sent.
                  type: string
                  example: 2016-08-26 23:01
                timezone:
                  description: >-
                    The timezone of the time in which the message
                    should be sent.
                  type: string
                  example: Europe/Amsterdam
              required:
                - notification
                - time
                - local
              type: object
      summary: Create Scheduled Message
  '/notification/schedule/fornotification/{notification}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The notification Id for the message
          in: path
          name: notification
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                count: 1
                schedules:
                  - _id: 56d421uu073cc157eu3137
                    application: 5489b42ff23e5815132b492a
                    lastRun: '2016-08-26T23:00:10.273Z'
                    local: true
                    nextRun: '2016-08-26T23:15:04.958Z'
                    notification: 56d421uu073cc157eu3137
                    status: running
                    time: '2016-08-26 23:01'
          description: OK
      tags:
        - Message Schedule
      description: >-
        Returns a list of all scheduled tasks for a specific message

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getNotificationScheduleForNotification
      summary: Get Scheduled Tasks For Message
  '/notification/schedule/{schedule}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The schedule Id
          in: path
          name: schedule
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                schedule:
                  _id: 56d421uu073cc157eu3137
                  application: 5489b42ff23e5815132b492a
                  lastRun: '2016-08-26T23:00:10.273Z'
                  local: true
                  nextRun: '2016-08-26T23:15:04.958Z'
                  notification: 56d421uu073cc157eu3137
                  status: running
                  time: '2016-08-26 23:01'
          description: OK
      tags:
        - Message Schedule
      description: >-
        Returns a schedule task object.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getNotificationScheduleById
      summary: Get Schedule Task
    put:
      security:
        - MasterSecret: []
      parameters:
        - description: The schedule Id of the schedule to be canceled.
          in: path
          name: schedule
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: schedule updated
          description: OK
      tags:
        - Message Schedule
      description: >-
        Modifies a schedule task for a message. Can only be applied to a
        schedule that is currently `scheduled`. Attempts to modify a currently
        `running`, `finished` or `canceled` schedule result in a `400`.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: putNotificationScheduleById
      requestBody:
        content:
          application/json:
            schema:
              properties:
                local:
                  description: >-
                    Defines if message should be sent on date and time of the
                    device. If false time will be considered UTC.
                  type: boolean
                  default: false
                time:
                  description: >-
                    The date and time (YYYY-MM-DD hh:mm) in which the message
                    should be sent.
                  type: string
                  example: 2016-08-26 23:01
                timezone:
                  description: >-
                    The timezone of the time in which the message
                    should be sent.
                  type: string
                  example: Europe/Amsterdam
              type: object
      summary: Update Schedule Task
    delete:
      security:
        - MasterSecret: []
      parameters:
        - description: The schedule Id of the schedule to be canceled.
          in: path
          name: schedule
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: schedule canceled
          description: OK
      tags:
        - Message Schedule
      description: >-
        Cancels a currently `scheduled` or `running` schedule.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: deleteNotificationScheduleById
      summary: Cancel Schedule
  /notification/template:
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 25
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
        - description: >-
            The medium of the templates (it can be one of the following: push,
            email, sms)
          example: push
          in: query
          name: medium
          required: false
          schema:
            default: push
            type: string
            enum: [push, email, sms]
        - description: 'The string to search for in name, title, subtitle and message'
          example: My great template
          in: query
          name: search
          required: false
          schema:
            type: string
        - description: 'The string to search for in message, title, subtitle and subject'
          example: My great template
          in: query
          name: message
          required: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationTemplateList'
          description: OK
      tags:
        - Message Template
      description: List all templates for this app
      operationId: getNotificationTemplate
      summary: List Templates
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  template:
                    $ref: '#/components/schemas/ResponseCreated'
          description: Created
      tags:
        - Message Template
      description: >-
        Create a template object.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationTemplate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationTemplateBase'
      summary: Create Template
  '/notification/template/{template}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The Notificare ID of the template
          in: path
          name: template
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  template:
                    $ref: '#/components/schemas/NotificationTemplateModel'
          description: OK
      tags:
        - Message Template
      description: >-
        Retrieve a template object.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getNotificationTemplateById
      summary: Get Template
    put:
      security:
        - MasterSecret: []
      parameters:
        - description: The Notificare ID of the template
          in: path
          name: template
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: template updated
          description: OK
      tags:
        - Message Template
      description: >-
        Modify a template object.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: putNotificationTemplateById
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationTemplateBase'
      summary: Update Template
    delete:
      security:
        - MasterSecret: []
      parameters:
        - description: The Notificare ID of the template
          in: path
          name: template
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: template deleted
          description: OK
      tags:
        - Message Template
      description: >-
        Destroy a template. This operation cannot be undone.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: deleteNotificationTemplateById
      summary: Delete Template
  /notification/test/email/broadcast:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                count: '42'
          description: Created
      tags:
        - Message Test
      description: >-
        Test a message to **all** email contacts. This call must be
        authenticated with the `applicationKey` and `masterSecret`.
      operationId: postNotificationTestEmailBroadcast
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationTestEmailBase'
      summary: Test Email Message Broadcast
  /notification/test/email/criteria:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  test:
                    $ref: '#/components/schemas/ResponseCreated'
          description: Created
      tags:
        - Message Test
      description: >-
        Test a message using a specific custom criteria. The request requires an
        eventCriteria object.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationTestEmailCriteria
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationTestEmailCriteria'
      summary: Test Email Message to Criteria
  /notification/test/email/event:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  test:
                    $ref: '#/components/schemas/ResponseCreated'
          description: Created
      tags:
        - Message Test
      description: >-
        Test a message to email contacts that executed a specific event. The
        request requires an eventCriteria object.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationTestEmailEvent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationTestEmailEvent'
      summary: Test Email Message to Events
  /notification/test/email/segments:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                count: '42'
          description: Created
      tags:
        - Message Test
      description: >-
        Test a message to users with email contacts with any of the specified
        `segments`. The request requires an array of segment IDs.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationTestEmailSegments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationTestEmailSegments'
      summary: Test Email Message to Segments
  /notification/test/email/tags:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                count: '42'
          description: Created
      tags:
        - Message Test
      description: >-
        Test a message to email contacts with any of the specified `tags`. This
        request requires an array of tags.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationTestEmailTags
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationTestEmailTags'
      summary: Test Email Message to Tags
  '/notification/test/email/user/{userID}':
    post:
      security:
        - MasterSecret: []
      parameters:
        - description: The userID assigned to an email contact.
          example: testuser@example.com
          in: path
          name: userID
          required: true
          schema:
            type: string
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                count: '42'
          description: Created
      tags:
        - Message Test
      description: >-
        Test a message to a user and its email contacts.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationTestEmailUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationTestEmailUser'
      summary: Test Email Message to User
  '/notification/test/email/device/{deviceID}':
    post:
      security:
        - MasterSecret: []
      parameters:
        - description: The contactID generated for an email address.
          example: bbff2ce9b547d2df4731bac277xxx
          in: path
          name: deviceID
          required: true
          schema:
            type: string
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                count: '42'
          description: Created
      tags:
        - Message Test
      description: >-
        Test a message to a single email contact.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationTestEmailDevice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationTestEmailDevice'
      summary: Test Email Message to Contact
  /notification/test/push/broadcast:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                count: '42'
          description: Created
          headers: {}
      tags:
        - Message Test
      description: >-
        Test a message to **all** push devices. This call must be authenticated
        with the `applicationKey` and `masterSecret`.
      operationId: postNotificationTestPushBroadcast
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationTestPushBroadcast'
      summary: Test Push Message Broadcast
  /notification/test/push/criteria:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  test:
                    $ref: '#/components/schemas/ResponseCreated'
          description: Created
      tags:
        - Message Test
      description: >-
        Test a message using a specific custom criteria. The request requires an
        eventCriteria object.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationTestPushCriteria
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationTestPushCriteria'
      summary: Test Push Message to Criteria
  /notification/test/push/event:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  test:
                    $ref: '#/components/schemas/ResponseCreated'
          description: Created
      tags:
        - Message Test
      description: >-
        Test a message to push devices that executed a specific event. The
        request requires an eventCriteria object.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationTestPushEvent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationTestPushEvent'
      summary: Test Push Message to Events
  /notification/test/push/segments:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                count: '42'
          description: Created
      tags:
        - Message Test
      description: >-
        Test a message to users with push devices with any of the specified
        `segments`. The request requires an array of segment IDs.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationTestPushSegments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationTestPushSegments'
      summary: Test Push Message to Segments
  /notification/test/push/tags:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                count: '42'
          description: Created
      tags:
        - Message Test
      description: >-
        Test a message to push devices with any of the specified `tags`. This
        request requires an array of tags.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationTestPushTags
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationTestPushTags'
      summary: Test Push Message to Tags
  '/notification/test/push/user/{userID}':
    post:
      security:
        - MasterSecret: []
      parameters:
        - description: >-
            The user ID is the one the client device registered with, e.g., the
            user's email address.
          example: testuser@example.com
          in: path
          name: userID
          required: true
          schema:
            type: string
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                count: '42'
          description: Created
      tags:
        - Message Test
      description: >-
        Test a message to a user and its push devices.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationTestPushUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationTestPushUser'
      summary: Test Push Message to User
  '/notification/test/push/device/{deviceID}':
    post:
      security:
        - MasterSecret: []
      parameters:
        - description: >-
            The deviceID is the ID as registered by the device, e.g. APNS token
            or GCM registration ID.
          example: bbff2ce9b547d2df4731bac277xxx
          in: path
          name: deviceID
          required: true
          schema:
            type: string
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                count: '42'
          description: Created
      tags:
        - Message Test
      description: >-
        Test a message to a single push device.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationTestPushDevice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationTestPushDevice'
      summary: Test Push Message to Device
  /notification/test/sms/broadcast:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                count: '42'
          description: Created
      tags:
        - Message Test
      description: >-
        Test a message to **all** phone numbers. This call must be authenticated
        with the `applicationKey` and `masterSecret`.
      operationId: postNotificationTestSmsBroadcast
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationTestSmsBase'
      summary: Test SMS Message Broadcast
  /notification/test/sms/criteria:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  test:
                    $ref: '#/components/schemas/ResponseCreated'
          description: Created
      tags:
        - Message Test
      description: >-
        Test a message using a specific custom criteria. The request requires an
        eventCriteria object.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationTestSmsCriteria
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationTestSmsCriteria'
      summary: Test SMS Message to Criteria
  /notification/test/sms/event:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  test:
                    $ref: '#/components/schemas/ResponseCreated'
          description: Created
      tags:
        - Message Test
      description: >-
        Test a message to phone numbers that executed a specific event. The
        request requires an eventCriteria object.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationTestSmsEvent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationTestSmsEvent'
      summary: Test SMS Message to Events
  /notification/test/sms/segments:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                count: '42'
          description: Created
      tags:
        - Message Test
      description: >-
        Test a message to users with phone numbers with any of the specified
        `segments`. The request requires an array of segment IDs.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationTestSmsSegments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationTestSmsSegments'
      summary: Test SMS Message to Segments
  /notification/test/sms/tags:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                count: '42'
          description: Created
      tags:
        - Message Test
      description: >-
        Test a message to phone numbers with any of the specified `tags`. This
        request requires an array of tags.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationTestSmsTags
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationTestSmsTags'
      summary: Test SMS Message to Tags
  '/notification/test/sms/user/{userID}':
    post:
      security:
        - MasterSecret: []
      parameters:
        - description: The userID assigned to an email contact.
          example: testuser@example.com
          in: path
          name: userID
          required: true
          schema:
            type: string
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                count: '42'
          description: Created
      tags:
        - Message Test
      description: >-
        Test a message to a user and its phone numbers.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationTestSmsUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationTestSmsUser'
      summary: Test SMS Message to User
  '/notification/test/sms/device/{deviceID}':
    post:
      security:
        - MasterSecret: []
      parameters:
        - description: The numberID generated for a phone number.
          example: bbff2ce9b547d2df4731bac277xxx
          in: path
          name: deviceID
          required: true
          schema:
            type: string
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                count: '42'
          description: Created
      tags:
        - Message Test
      description: >-
        Test a message to a single phone number.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationTestSmsDevice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationTestSmsDevice'
      summary: Test SMS Message to Phone
  /pass:
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/PassList'
          description: OK
      tags:
        - Pass
      description: >-
        Get all passes for an application.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getPass
      summary: List Passes
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  pass:
                    $ref: '#/components/schemas/ResponseCreated'
          description: Created
      tags:
        - Pass
      description: >-
        Create a new pass. You should first create a pass template to help you
        bootstrap a new pass. Please read the [Pass
        Template](https://api-docs.notifica.re/#tag/Pass-Templates)
        endpoints to learn how to create pass templates. Passes will require
        images, see also the
        [Uploads](https://api-docs.notifica.re/#tag/Upload) endpoints
        to learn how to upload a file.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postPass
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PassCreate'
      summary: Create Pass
  '/pass/passbook/{passbook}':
    post:
      security:
        - MasterSecret: []
      parameters:
        - description: The id of an active passbook template.
          in: path
          name: passbook
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  pass:
                    $ref: '#/components/schemas/ResponseCreated'
          description: Created
      tags:
        - Pass
      description: >-
        Create a new pass from a passbook template. You should first create a pass template to help you
        bootstrap a new pass. Please read the [Pass
        Template](https://api-docs.notifica.re/#tag/Pass-Templates)
        endpoints to learn how to create pass templates. Passes will require
        images, see also the
        [Uploads](https://api-docs.notifica.re/#tag/Upload) endpoints
        to learn how to upload a file.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postPassPassbook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PassPassbookCreate'
      summary: Create Pass From Passbook
  '/pass/barcode/forserial/{serial}':
    get:
      parameters:
        - description: The serial number of an active pass.
          in: path
          name: serial
          required: true
          example: 402ab90b-65b5-4b4f-91fa-9823b2972f85
          schema:
            type: string
            format: uuid
      responses:
        '200':
          content:
            image/png:
              schema:
                type: string
                format: binary
          description: OK
      tags:
        - Pass
      description: |-
        Generate a barcode for a specific pass using the serial UUID.
        This request does not require authentication.
      operationId: getPassBarcodeForSerial
      summary: Generate Barcode By Serial
  '/pass/barcode/{type}/{code}':
    get:
      parameters:
        - description: The barcode type.
          example: qr
          in: path
          name: type
          required: true
          schema:
            type: string
        - description: The code to generate a barcode for.
          example: xxx-yyy-zzzz-123456
          in: path
          name: code
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            image/png:
              schema:
                type: string
                format: binary
          description: OK
      tags:
        - Pass
      description: |-
        Generate a barcode for a specific type and code.
        This request does not require authentication.

        ### Types:

        ***

        pdf417

        ***

        qr

        ***

        aztec

        ***

        code128

        ***
      operationId: getPassBarcodeByBarcode
      summary: Generate a Barcode By Barcode
  '/pass/forbarcode/{barcode}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The barcode of the pass.
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: barcode
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  pass:
                    $ref: '#/components/schemas/PassModel'
          description: OK
      tags:
        - Pass
      description: >-
        Get a pass object using the barcode string.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getPassForBarcode
      summary: Pass For Barcode
  '/pass/forserial/{serial}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The serial of the pass.
          in: path
          name: serial
          required: true
          example: 402ab90b-65b5-4b4f-91fa-9823b2972f85
          schema:
            type: string
            format: uuid
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  pass:
                    $ref: '#/components/schemas/PassModel'
          description: OK
      tags:
        - Pass
      description: >-
        Get a pass object using the serial string.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getPassForSerial
      summary: Get Pass For Serial
  '/pass/pkpass/{serial}':
    get:
      parameters:
        - description: The serial number of an active pass.
          in: path
          name: serial
          required: true
          example: 402ab90b-65b5-4b4f-91fa-9823b2972f85
          schema:
            type: string
            format: uuid
      responses:
        '200':
          content:
            application/vnd.pkpass:
              schema:
                type: string
                format: binary
          description: OK
      tags:
        - Pass
      description: |-
        Download a pass using a serial UUID.
        This request does not require authentication.
      operationId: gePassPKPass
      summary: Download Pass
  '/pass/redeem/{barcode}':
    put:
      security:
        - MasterSecret: []
      parameters:
        - description: The barcode string of an active pass.
          example: 402ab90b-65b5-4b4f-91fa-9823b2972f85
          in: path
          name: barcode
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: pass redeemed
          description: OK
      tags:
        - Pass
      description: >-
        Redeem a pass using a barcode string.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: putPassRedeem
      summary: Redeem Pass
  '/pass/{pass}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The id of pass.
          in: path
          name: pass
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  pass:
                    $ref: '#/components/schemas/PassModel'
          description: OK
      tags:
        - Pass
      description: >-
        Get a pass object.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getPassById
      summary: Get Pass
    put:
      security:
        - MasterSecret: []
      parameters:
        - description: The id of an active pass.
          in: path
          name: pass
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: pass updated
          description: OK
      tags:
        - Pass
      description: >-
        Modify a pass.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: putPassById
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PassBase'
      summary: Update Pass
    delete:
      security:
        - MasterSecret: []
      parameters:
        - description: The id of an active pass.
          in: path
          name: pass
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: pass deleted
          description: OK
      tags:
        - Pass
      description: >-
        Delete a pass. This operation cannot be undone.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: deletePassById
      summary: Delete Pass
  '/pass/{pass}/fields':
    put:
      security:
        - MasterSecret: []
      parameters:
        - description: The id of an active pass.
          in: path
          name: pass
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: pass updated
          description: OK
      tags:
        - Pass
      description: >-
        Modify a pass by providing only the changed properties and fields

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: putPassFieldsById
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PassFieldsUpdate'
      summary: Update Pass Fields
  /passbook:
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/PassbookList'
          description: OK
      tags:
        - Pass Templates
      description: >-
        Get all pass templates for an application.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getPassbook
      summary: Get Pass Templates
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  passbook:
                    $ref: '#/components/schemas/ResponseCreated'
          description: Created
      tags:
        - Pass Templates
      description: >-
        Create a new pass template.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.


        Fields cannot have a `key` that is a reserved property. Reserved keys
        are:


        + `relevant_date`


        + `expiration_date`


        + `voided`


        + `barcode_message`


        + `barcode_alt_text`


        + `barcode_show_alt_text`


        + `barcode_format`


        + `barcode_message_encoding`


        + `description`


        + `beacon_proximity_uuid`


        + `beacon_major`


        + `beacon_minor`


        + `beacon_relevant_text`


        + `location_latitude`


        + `location_longitude`


        + `location_altitude`


        + `location_relevant_text`


        + `location_region_id`


        + `location_region_major`


        + `message`


        + `title`


        + `subtitle`


        + `user_info`


        + `app_launch_url`


        + `associated_store_identifiers`


        + `max_distance`


        + `background_color`


        + `foreground_color`


        + `grouping_identifier`


        + `label_color`


        + `logo_text`


        + `suppress_strip_shine`


        + `nfc_message`


        + `nfc_encryption_public_key`


        + `transit_type`


        + `redeem_type`


        + `redeem_limit`
      operationId: postPassbook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PassbookCreate'
      summary: Create Pass Template
  '/passbook/{passbook}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The id of an active passbook template.
          in: path
          name: passbook
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  passbook:
                    $ref: '#/components/schemas/PassbookModel'
          description: OK
      tags:
        - Pass Templates
      description: >-
        Get a pass template object.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getPassbookById
      summary: Get Pass Template
    put:
      security:
        - MasterSecret: []
      parameters:
        - description: The id of an active passbook template.
          in: path
          name: passbook
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: passbook updated
          description: OK
      tags:
        - Pass Templates
      description: >-
        Modify a pass template.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: putPassbookById
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  $ref: '#/components/schemas/PassData'
                passStyle:
                  description: >-
                    A pass template can have several styles. A style will define
                    how your pass looks and behaves. This string will indicate
                    what style to use (boarding, coupon, ticket, card, generic).
                  type: string
              required:
                - passStyle
                - data
              type: object
      summary: Update Pass Template
    delete:
      security:
        - MasterSecret: []
      parameters:
        - description: The id of an active passbook template.
          in: path
          name: passbook
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: passbook deleted
          description: OK
      tags:
        - Pass Templates
      description: >-
        Delete a pass template. This operation cannot be undone.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: deletePassbookById
      summary: Delete Pass Template
  /product:
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ProductList'
          description: OK
      tags:
        - Product
      description: >-
        Get all products for an application.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getProduct
      summary: List all products for an application
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  product:
                    $ref: '#/components/schemas/ResponseCreated'
          description: Created
      tags:
        - Product
      description: >-
        Create a new product.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreate'
      summary: Create Product
  '/product/foridentifier/{sku}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The SKU (identifier) of an active product.
          example: re.notifica.office.consumable
          in: path
          name: sku
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  product:
                    $ref: '#/components/schemas/ProductModel'
          description: OK
      tags:
        - Product
      description: >-
        Get a product object using SKU.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getProductForIdentifier
      summary: Get Product By SKU
  '/product/{product}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The id of an active product.
          in: path
          name: product
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  product:
                    $ref: '#/components/schemas/ProductModel'
          description: OK
      tags:
        - Product
      description: >-
        Get a product object.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getProductById
      summary: Get Product
    put:
      security:
        - MasterSecret: []
      parameters:
        - description: The id of an active product.
          in: path
          name: product
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: product updated
          description: OK
      tags:
        - Product
      description: >-
        Modify a product.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: putProductById
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductBase'
      summary: Update Product
    delete:
      security:
        - MasterSecret: []
      parameters:
        - description: The id of an active product.
          in: path
          name: product
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: product deleted
          description: OK
      tags:
        - Product
      description: >-
        Delete a product. This operation cannot be undone.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: deleteProductById
      summary: Delete Product
  /purchase:
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                count: 1
                purchases:
                  - _id: 5477c86387c552350c886d2f
                    application: 5354f0bb3fa544452ff4c7c0
                    currency: EUR
                    data:
                      bid: re.notifica.office
                      bvrs: 1.0.36
                      item_id: '944702328'
                      original_purchase_date: '2014-11-28 00:57:02 Etc/GMT'
                      original_purchase_date_ms: '1417136222704'
                      original_purchase_date_pst: '2014-11-27 16:57:02 America/Los_Angeles'
                      original_transaction_id: '1000000133399653'
                      product_id: re.notifica.office.consumable
                      purchase_date: '2014-11-28 00:57:02 Etc/GMT'
                      purchase_date_ms: '1417136222704'
                      purchase_date_pst: '2014-11-27 16:57:02 America/Los_Angeles'
                      quantity: '1'
                      transaction_id: '1000000133399653'
                      unique_identifier: d30aeae69ba81cd6077a062f721059b8f1c1ffe8
                      unique_vendor_identifier: 7F64F64E-8DAF-4445-93A2-B4632DDBAED3
                    date: '2014-11-28T00:57:02.704Z'
                    deviceID: >-
                      1ebffb005c83b016e5dffafbf2755fabb79e4db87f0092dd30a903cdb0c44bad
                    identifier: re.notifica.office.consumable
                    price: 0.89
                    transactionIdentifier: '1000000133399653'
                    userID: joel@notifica.re
          description: OK
      tags:
        - Purchase
      description: >-
        Get all purchases for an application.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getPurchase
      summary: List Purchases
  '/purchase/byidentifier/{identifier}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The SKU (identifier) of a purchase.
          example: re.notifica.office.consumable
          in: path
          name: identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                count: 1
                purchases:
                  - _id: 5477c86387c552350c886d2f
                    application: 5354f0bb3fa544452ff4c7c0
                    currency: EUR
                    data:
                      bid: re.notifica.office
                      bvrs: 1.0.36
                      item_id: '944702328'
                      original_purchase_date: '2014-11-28 00:57:02 Etc/GMT'
                      original_purchase_date_ms: '1417136222704'
                      original_purchase_date_pst: '2014-11-27 16:57:02 America/Los_Angeles'
                      original_transaction_id: '1000000133399653'
                      product_id: re.notifica.office.consumable
                      purchase_date: '2014-11-28 00:57:02 Etc/GMT'
                      purchase_date_ms: '1417136222704'
                      purchase_date_pst: '2014-11-27 16:57:02 America/Los_Angeles'
                      quantity: '1'
                      transaction_id: '1000000133399653'
                      unique_identifier: d30aeae69ba81cd6077a062f721059b8f1c1ffe8
                      unique_vendor_identifier: 7F64F64E-8DAF-4445-93A2-B4632DDBAED3
                    date: '2014-11-28T00:57:02.704Z'
                    deviceID: >-
                      1ebffb005c83b016e5dffafbf2755fabb79e4db87f0092dd30a903cdb0c44bad
                    identifier: re.notifica.office.consumable
                    price: 0.89
                    transactionIdentifier: '1000000133399653'
                    userID: joel@notifica.re
          description: OK
      tags:
        - Purchase
      description: >-
        Get a specific purchase using the SKU.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getPurchaseByIdentifier
      summary: Get Purchase By SKU
  '/purchase/bytransaction/{transaction}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The transaction id of a purchase.
          example: '1000000133399653'
          in: path
          name: transaction
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                purchase:
                  _id: 5477c86387c552350c886d2f
                  application: 5354f0bb3fa544452ff4c7c0
                  currency: EUR
                  data:
                    bid: re.notifica.office
                    bvrs: 1.0.36
                    item_id: '944702328'
                    original_purchase_date: '2014-11-28 00:57:02 Etc/GMT'
                    original_purchase_date_ms: '1417136222704'
                    original_purchase_date_pst: '2014-11-27 16:57:02 America/Los_Angeles'
                    original_transaction_id: '1000000133399653'
                    product_id: re.notifica.office.consumable
                    purchase_date: '2014-11-28 00:57:02 Etc/GMT'
                    purchase_date_ms: '1417136222704'
                    purchase_date_pst: '2014-11-27 16:57:02 America/Los_Angeles'
                    quantity: '1'
                    transaction_id: '1000000133399653'
                    unique_identifier: d30aeae69ba81cd6077a062f721059b8f1c1ffe8
                    unique_vendor_identifier: 7F64F64E-8DAF-4445-93A2-B4632DDBAED3
                  date: '2014-11-28T00:57:02.704Z'
                  deviceID: >-
                    1ebffb005c83b016e5dffafbf2755fabb79e4db87f0092dd30a903cdb0c44bad
                  identifier: re.notifica.office.consumable
                  price: 0.89
                  transactionIdentifier: '1000000133399653'
                  userID: joel@notifica.re
          description: OK
      tags:
        - Purchase
      description: >-
        Get a specific purchase using the transaction.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getPurchaseByTransaction
      summary: Get Purchase By Transaction
  '/purchase/{purchase}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The id of a purchase.
          in: path
          name: purchase
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                purchase:
                  _id: 5477c86387c552350c886d2f
                  application: 5354f0bb3fa544452ff4c7c0
                  currency: EUR
                  data:
                    bid: re.notifica.office
                    bvrs: 1.0.36
                    item_id: '944702328'
                    original_purchase_date: '2014-11-28 00:57:02 Etc/GMT'
                    original_purchase_date_ms: '1417136222704'
                    original_purchase_date_pst: '2014-11-27 16:57:02 America/Los_Angeles'
                    original_transaction_id: '1000000133399653'
                    product_id: re.notifica.office.consumable
                    purchase_date: '2014-11-28 00:57:02 Etc/GMT'
                    purchase_date_ms: '1417136222704'
                    purchase_date_pst: '2014-11-27 16:57:02 America/Los_Angeles'
                    quantity: '1'
                    transaction_id: '1000000133399653'
                    unique_identifier: d30aeae69ba81cd6077a062f721059b8f1c1ffe8
                    unique_vendor_identifier: 7F64F64E-8DAF-4445-93A2-B4632DDBAED3
                  date: '2014-11-28T00:57:02.704Z'
                  deviceID: >-
                    1ebffb005c83b016e5dffafbf2755fabb79e4db87f0092dd30a903cdb0c44bad
                  identifier: re.notifica.office.consumable
                  price: 0.89
                  transactionIdentifier: '1000000133399653'
                  userID: joel@notifica.re
          description: OK
      tags:
        - Purchase
      description: >-
        Get a specific purchase.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getPurchaseById
      summary: Get Purchase
  /region:
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                regions:
                  - _id: 5245bc5b3e66a3b01f0024d4
                    geometry:
                      coordinates:
                        - 4.2345
                        - 5.6789
                      type: Point
                    major: '123456'
                    name: My Region
                    timezone: Europe/Amsterdam
                count: 1
          description: OK
      tags:
        - Region
      description: >-
        Get all regions for an application.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getRegion
      summary: List Regions
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  region:
                    $ref: '#/components/schemas/ResponseCreated'
          description: Created
      tags:
        - Region
      description: >-
        Create a new region.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postRegion
      requestBody:
        content:
          application/json:
            schema:
              properties:
                tags:
                  description: The list of tags this region should be associated with.
                  items:
                    type: string
                    example: [store]
                  type: array
                address:
                  description: >-
                    The address for this region. This field is merely
                    informative.
                  type: string
                advancedGeometry:
                  $ref: '#/components/schemas/Polygon'
                category:
                  description: >-
                    The category of this region. Regions should be categorised
                    as fence to be used as monitored geo-zones. There's also the
                    possibility to mark regions as poi, city and country. These
                    type of regions will not be monitored.
                  type: string
                description:
                  description: >-
                    The description for this region. This field is merely
                    informative.
                  type: string
                distance:
                  description: >-
                    The radius of a circle for the region. This field is
                    required if geometry is being passed. If advancedGeometry is
                    used then this field will be automatically calculated for
                    you.
                  type: number
                geometry:
                  $ref: '#/components/schemas/Point'
                icon:
                  description: >-
                    The icon used for this region. Must be a publicly accessible
                    URL.
                  type: string
                major:
                  description: >-
                    The major identifier for the region. If you intend to use
                    beacons this field must match the major identifier for your
                    beacons.
                  type: number
                name:
                  description: The name for the region.
                  type: string
                referenceKey:
                  description: >-
                    The foreign key for this region. This field is can be used
                    to match regions in other systems.
                  type: string
              required:
                - name
                - category
              type: object
      summary: Create Region
  /region/all:
    delete:
      security:
        - MasterSecret: []
      responses:
        '202':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: region removal is being processed
          description: OK
      tags:
        - Region
      description: >-
        Delete all regions, including attached triggers and beacons. This
        operation cannot be undone.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: deleteRegionAll
      summary: Delete All Regions
  /region/all/{category}:
    delete:
      security:
        - MasterSecret: []
      parameters:
        - description: The category for which you want to delete regions.
          example: shops
          in: path
          name: category
          required: true
          schema:
            type: string
      responses:
        '202':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: region removal is being processed
          description: OK
      tags:
        - Region
      description: >-
        Delete all regions in a category, including attached triggers and beacons.
        This operation cannot be undone.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: deleteRegionAllCategory
      summary: Delete All Regions In Category
  '/region/forreferencekey/{referencekey}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The referenceKey you want to search region for.
          example: NL
          in: path
          name: referenceKey
          required: true
          schema:
            type: string
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                regions:
                  - _id: 5245bc5b3e66a3b01f0024d4
                    geometry:
                      coordinates:
                        - 4.2345
                        - 5.6789
                      type: Point
                    major: '123456'
                    name: My Region
                    timezone: Europe/Amsterdam
                count: 1
          description: OK
      tags:
        - Region
      description: >-
        Get regions by reference key for an application.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getRegionByReferenceKey
      summary: List Regions By Reference Key
  '/region/forcountry/{country}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The country you want to search regions for.
          example: NL
          in: path
          name: country
          required: true
          schema:
            type: string
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                regions:
                  - _id: 5245bc5b3e66a3b01f0024d4
                    geometry:
                      coordinates:
                        - 4.2345
                        - 5.6789
                      type: Point
                    major: '123456'
                    name: My Region
                    timezone: Europe/Amsterdam
                count: 1
          description: OK
      tags:
        - Region
      description: >-
        Get regions by country for an application.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getRegionByCountry
      summary: List Regions By Country
  '/region/fortimezone/{timezone}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The timezone you want to search regions for.
          example: Europe
          in: path
          name: timezone
          required: true
          schema:
            type: string
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                regions:
                  - _id: 5245bc5b3e66a3b01f0024d4
                    geometry:
                      coordinates:
                        - 4.2345
                        - 5.6789
                      type: Point
                    major: '123456'
                    name: My Region
                    timezone: Europe/Amsterdam
                count: 1
          description: OK
      tags:
        - Region
      description: >-
        Get regions by timezone for an application.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getRegionForTimezone
      summary: List Regions For Timezone
  '/region/search/{search}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: Search matching a name of an active region.
          example: My
          in: path
          name: search
          required: true
          schema:
            type: string
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                regions:
                  - _id: 5245bc5b3e66a3b01f0024d4
                    geometry:
                      coordinates:
                        - 4.2345
                        - 5.6789
                      type: Point
                    major: '123456'
                    name: My Region
                    timezone: Europe/Amsterdam
                count: 1
          description: OK
      tags:
        - Region
      description: >-
        Search regions for an application.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getRegionSearch
      summary: Search Regions
  '/region/{region}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The region id of an active region.
          in: path
          name: region
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                regions:
                  - _id: 5245bc5b3e66a3b01f0024d4
                    geometry:
                      coordinates:
                        - 4.2345
                        - 5.6789
                      type: Point
                    major: '123456'
                    name: My Region
                    timezone: Europe/Amsterdam
                count: 1
          description: OK
      tags:
        - Region
      description: >-
        Get a region object.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getRegionById
      summary: Get Region
    put:
      security:
        - MasterSecret: []
      parameters:
        - description: The id for the region.
          in: path
          name: region
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: region updated
          description: OK
      tags:
        - Region
      description: >-
        Modify a region.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: putRegionById
      requestBody:
        content:
          application/json:
            schema:
              properties:
                tags:
                  description: The list of tags this region should be associated with.
                  items: {}
                  type: array
                address:
                  description: >-
                    The address for this region. This field is merely
                    informative.
                  type: string
                advancedGeometry:
                  $ref: '#/components/schemas/Polygon'
                category:
                  description: >-
                    The category of this region. Regions should be categorised
                    as fence to be used as monitored geo-zones. There's also the
                    possibility to mark regions as poi, city and country. These
                    type of regions will not be monitored.
                  enum:
                    - fence
                    - poi
                    - city
                    - country
                  type: string
                description:
                  description: >-
                    The description for this region. This field is merely
                    informative.
                  type: string
                distance:
                  description: >-
                    The radius of a circle for the region. This field is
                    required if geometry is being passed. If advancedGeometry is
                    used then this field will be automatically calculated for
                    you.
                  type: number
                geometry:
                  $ref: '#/components/schemas/Point'
                icon:
                  description: >-
                    The icon used for this region. Must be a publicly accessible
                    URL.
                  type: string
                major:
                  description: >-
                    The major identifier for the region. If you intend to use
                    beacons this field must match the major identifier for your
                    beacons.
                  type: number
                name:
                  description: The name for the region.
                  type: string
                referenceKey:
                  description: >-
                    The foreign key for this region. This field is can be used
                    to match regions in other systems.
                  type: string
              required:
                - name
              type: object
      summary: Update Region
    delete:
      security:
        - MasterSecret: []
      parameters:
        - description: The region id of an active region.
          in: path
          name: region
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: region deleted
          description: OK
      tags:
        - Region
      description: >-
        Delete a region. This operation cannot be undone.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: deleteRegionById
      summary: Delete Region
  '/reply/fornotification/{notification}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The notification id of an active notification.
          in: path
          name: notification
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 1000
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                count: 2
                replies:
                  - _id: 5331703332c17e3077d5a765
                    deviceID: APA91bHWwt97wwvZ1-P8UQT1zCgczK7utZEZiqu7N4Awg
                    label: 'yes'
                    notification: 53317011f90827d27c6e9c94
                    time: '2014-03-25T12:01:55.713Z'
                    userID: testuser@example.com
                  - _id: 5331703332c17e3077d5a765
                    deviceID: APA91bHWwt97wwvZ1-P8UQT1zCgczK7utZEZiqu7N4Awg
                    label: 'yes'
                    notification: 53317011f90827d27c6e9c94
                    time: '2014-03-25T12:01:55.713Z'
                    userID: testuser@example.com
          description: OK
      tags:
        - Reply
      description: >-
        Get all replies for a specific notification.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getReplyForNotification
      summary: List Replies For Notification
  '/reply/foraggregation/{aggregation}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The aggregation id.
          in: path
          name: aggregation
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 1000
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                count: 2
                replies:
                  - _id: 5331703332c17e3077d5a765
                    deviceID: APA91bHWwt97wwvZ1-P8UQT1zCgczK7utZEZiqu7N4Awg
                    label: 'yes'
                    notification: 53317011f90827d27c6e9c94
                    time: '2014-03-25T12:01:55.713Z'
                    userID: testuser@example.com
                  - _id: 5331703332c17e3077d5a765
                    deviceID: APA91bHWwt97wwvZ1-P8UQT1zCgczK7utZEZiqu7N4Awg
                    label: 'yes'
                    notification: 53317011f90827d27c6e9c94
                    time: '2014-03-25T12:01:55.713Z'
                    userID: testuser@example.com
          description: OK
      tags:
        - Reply
      description: >-
        Get all replies for a specific aggregation.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getReplyForAggregation
      summary: List Replies For Aggregation
  '/reply/{reply}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The id for this reply.
          in: path
          name: reply
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                reply:
                  _id: 5331703332c17e3077d5a765
                  deviceID: APA91bHWwt97wwvZ1-P8UQT1zCgczK7utZEZiqu7N4Awg
                  label: 'yes'
                  notification: 53317011f90827d27c6e9c94
                  time: '2014-03-25T12:01:55.713Z'
                  userID: testuser@example.com
          description: OK
      tags:
        - Reply
      description: >-
        Get a specific reply object.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getReplyById
      summary: Get Reply
  /sms:
    post:
      security:
        - MasterSecret: []
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: subscription updated
          description: OK
        '202':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: subscription is being processed
          description: Accepted
      tags:
        - SMS
      description: >-
        Create a SMS number for your application.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postSms
      requestBody:
        content:
          application/json:
            schema:
              properties:
                tags:
                  description: A list of tags you wish to assign to the email address.
                  items:
                    type: string
                    example: [tag1]
                  type: array
                language:
                  description: The language you wish to assign the contact to.
                  type: string
                phone:
                  description: The phone number you wish to subscribe to your app.
                  type: string
                region:
                  description: The region you wish to assign the contact to.
                  type: string
                userID:
                  description: The userID your wish to assign the contact to.
                  type: string
                userName:
                  description: The userName your wish to assign the contact to.
                  type: string
                verify:
                  description: >-
                    If you wish to require verification before activating the
                    email contact set this property to `true`.
                  type: boolean
              required:
                - phone
              type: object
      summary: Create SMS Number
  '/stats/device/{dimension}/lastmonth':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The desired dimension.
          example: osVersion
          in: path
          name: dimension
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  stats:
                    type: array
                    items:
                      $ref: '#/components/schemas/DeviceStats'
          description: OK
      tags:
        - Application Stats
      description: >-
        Retrieve the number of devices of a certain dimension for the last 30
        days.


        ### Dimensions:


        ***


        osVersion


        ***


        appVersion


        ***


        language


        ***


        sdkVersion


        ***


        platform


        ***


        osString


        ***


        deviceString


        ***
      operationId: getStatsDeviceByDimensionLastMonth
      summary: Get Last Month Devices By Dimension
  '/stats/device/{dimension}/{year}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The desired dimension.
          example: osVersion
          in: path
          name: dimension
          required: true
          schema:
            type: string
        - description: The year you desire to get stats from.
          example: '2014'
          in: path
          name: year
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  stats:
                    type: array
                    items:
                      $ref: '#/components/schemas/DeviceStats'
          description: OK
      tags:
        - Application Stats
      description: >-
        Retrieve the number of devices of a certain dimension in a specific
        year.


        ### Dimensions:


        ***


        osVersion


        ***


        appVersion


        ***


        language


        ***


        sdkVersion


        ***


        platform


        ***


        osString


        ***


        deviceString


        ***
      operationId: getStatsDeviceByDimensionYear
      summary: Get Yearly Devices By Dimension
  '/stats/device/{dimension}/{year}/{month}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The desired dimension.
          example: osVersion
          in: path
          name: dimension
          required: true
          schema:
            type: string
        - description: The year you desire to get stats from.
          example: '2014'
          in: path
          name: year
          required: true
          schema:
            type: string
        - description: The month you desire to get stats from.
          example: '03'
          in: path
          name: month
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  stats:
                    type: array
                    items:
                      $ref: '#/components/schemas/DeviceStats'
          description: OK
      tags:
        - Application Stats
      description: >-
        Retrieve the number of devices of a certain dimension in a specific
        month.


        ### Dimensions:


        ***


        osVersion


        ***


        appVersion


        ***


        language


        ***


        sdkVersion


        ***


        platform


        ***


        osString


        ***


        deviceString


        ***
      operationId: getStatsDeviceByDimensionMonth
      summary: Get Monthly Devices By Dimension
  '/stats/device/{dimension}/{year}/{month}/{day}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The desired dimension.
          example: osVersion
          in: path
          name: dimension
          required: true
          schema:
            type: string
        - description: The year you desire to get stats from.
          example: '2014'
          in: path
          name: year
          required: true
          schema:
            type: string
        - description: The month you desire to get stats from.
          example: '03'
          in: path
          name: month
          required: true
          schema:
            type: string
        - description: The day you desire to get stats from.
          example: '01'
          in: path
          name: day
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  stats:
                    type: array
                    items:
                      $ref: '#/components/schemas/DeviceStats'
          description: OK
      tags:
        - Application Stats
      description: |-
        Retrieve the number of devices of a certain dimension in a specific day.

        ### Dimensions:

        ***

        osVersion

        ***

        appVersion

        ***

        language

        ***

        sdkVersion

        ***

        platform

        ***

        osString

        ***

        deviceString

        ***
      operationId: getStatsDeviceByDimensionDay
      summary: Get Daily Devices By Dimension
  '/stats/event/{type}/lastmonth':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The event type.
          example: re.notifica.event.application.Install
          in: path
          name: type
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  stats:
                    type: array
                    items:
                      $ref: '#/components/schemas/EventStats'
          description: OK
      tags:
        - Application Stats
      description: |-
        Retrieve the number of events of a certain type for the last 30 days.

        ### Events

        ***

        re.notifica.event.application.Install

        ***

        re.notifica.event.application.Uninstall

        ***

        re.notifica.event.application.Open

        ***

        re.notifica.event.application.Close

        ***

        re.notifica.event.notification.Influenced

        ***

        re.notifica.event.notification.Receive

        ***

        re.notifica.event.notification.Open

        ***

        re.notifica.event.region.Session

        ***

        re.notifica.event.beacon.Session

        ***
      operationId: getStatsEventByTypeLastMonth
      summary: Get Last Month Events By Type
  '/stats/event/{type}/lastweek':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The event type.
          example: re.notifica.event.application.Install
          in: path
          name: type
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  stats:
                    type: array
                    items:
                      $ref: '#/components/schemas/EventStats'
          description: OK
      tags:
        - Application Stats
      description: |-
        Retrieve the number of events of a certain type for the last 7 days.

        ### Events

        ***

        re.notifica.event.application.Install

        ***

        re.notifica.event.application.Uninstall

        ***

        re.notifica.event.application.Open

        ***

        re.notifica.event.application.Close

        ***

        re.notifica.event.notification.Influenced

        ***

        re.notifica.event.notification.Receive

        ***

        re.notifica.event.notification.Open

        ***

        re.notifica.event.region.Session

        ***

        re.notifica.event.beacon.Session

        ***
      operationId: getStatsEventByTypeLastWeek
      summary: Get Last Week Events By Type
  '/stats/event/{type}/total':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The event type.
          example: re.notifica.event.application.Install
          in: path
          name: type
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  stats:
                    properties:
                      count:
                        type: number
                        example: 1000
          description: OK
      tags:
        - Application Stats
      description: |-
        Retrieve the number of events of a certain type.

        ### Events

        ***

        re.notifica.event.application.Install

        ***

        re.notifica.event.application.Uninstall

        ***

        re.notifica.event.application.Open

        ***

        re.notifica.event.application.Close

        ***

        re.notifica.event.notification.Influenced

        ***

        re.notifica.event.notification.Receive

        ***

        re.notifica.event.notification.Open

        ***

        re.notifica.event.region.Session

        ***

        re.notifica.event.beacon.Session

        ***
      operationId: getStatsEventByTypeTotal
      summary: Get Total Events By Type
  '/stats/event/{type}/{year}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The event type.
          example: re.notifica.event.application.Install
          in: path
          name: type
          required: true
          schema:
            type: string
        - description: The year you desire to get stats from.
          example: '2014'
          in: path
          name: year
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  stats:
                    type: array
                    items:
                      $ref: '#/components/schemas/EventStats'
          description: OK
      tags:
        - Application Stats
      description: |-
        Retrieve the number of events of a certain type for a specific year.

        ### Events

        ***

        re.notifica.event.application.Install

        ***

        re.notifica.event.application.Uninstall

        ***

        re.notifica.event.application.Open

        ***

        re.notifica.event.application.Close

        ***

        re.notifica.event.notification.Influenced

        ***

        re.notifica.event.notification.Receive

        ***

        re.notifica.event.notification.Open

        ***

        re.notifica.event.region.Session

        ***

        re.notifica.event.beacon.Session

        ***
      operationId: getStatsEventByTypeYear
      summary: Get Yearly Events By Type
  '/stats/event/{type}/{year}/{month}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The event type.
          example: re.notifica.event.application.Install
          in: path
          name: type
          required: true
          schema:
            type: string
        - description: The year you desire to get stats from.
          example: '2014'
          in: path
          name: year
          required: true
          schema:
            type: string
        - description: The month you desire to get stats from.
          example: '03'
          in: path
          name: month
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  stats:
                    type: array
                    items:
                      $ref: '#/components/schemas/EventStats'
          description: OK
      tags:
        - Application Stats
      description: |-
        Retrieve the number of events of a certain type for a specific month.

        ### Events

        ***

        re.notifica.event.application.Install

        ***

        re.notifica.event.application.Uninstall

        ***

        re.notifica.event.application.Open

        ***

        re.notifica.event.application.Close

        ***

        re.notifica.event.notification.Influenced

        ***

        re.notifica.event.notification.Receive

        ***

        re.notifica.event.notification.Open

        ***

        re.notifica.event.region.Session

        ***

        re.notifica.event.beacon.Session

        ***
      operationId: getStatsEventByTypeMonth
      summary: Get Monthly Events By Type
  '/stats/event/{type}/{year}/{month}/{day}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The event type.
          example: re.notifica.event.application.Install
          in: path
          name: type
          required: true
          schema:
            type: string
        - description: The year you desire to get stats from.
          example: '2014'
          in: path
          name: year
          required: true
          schema:
            type: string
        - description: The month you desire to get stats from.
          example: '03'
          in: path
          name: month
          required: true
          schema:
            type: string
        - description: The day you desire to get stats from.
          example: '01'
          in: path
          name: day
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  stats:
                    type: array
                    items:
                      $ref: '#/components/schemas/EventStats'
          description: OK
      tags:
        - Application Stats
      description: |-
        Retrieve the number of events of a certain type for a specific day.

        ### Events

        ***

        re.notifica.event.application.Install

        ***

        re.notifica.event.application.Uninstall

        ***

        re.notifica.event.application.Open

        ***

        re.notifica.event.application.Close

        ***

        re.notifica.event.notification.Influenced

        ***

        re.notifica.event.notification.Receive

        ***

        re.notifica.event.notification.Open

        ***

        re.notifica.event.region.Session

        ***

        re.notifica.event.beacon.Session

        ***
      operationId: getStatsEventByTypeDay
      summary: Get Daily Events By Type
  /stats/notification/account/lastmonth:
    get:
      security:
        - Token: []
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  stats:
                    type: array
                    items:
                      $ref: '#/components/schemas/NotificationStats'
          description: OK
      tags:
        - Account Stats
      description: Retrieve the number of notifications sent on the last 30 days.
      operationId: getStatsNotificationForAccountLastMonth
      summary: Get Last Month Notifications For Account
  '/stats/notification/account/{year}':
    get:
      security:
        - Token: []
      parameters:
        - description: The year you desire to get stats from.
          example: '2014'
          in: path
          name: year
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  stats:
                    type: array
                    items:
                      $ref: '#/components/schemas/NotificationStats'
          description: OK
      tags:
        - Account Stats
      description: Retrieve the number of notifications sent on a specific year.
      operationId: getStatsNotificationForAccountYear
      summary: Get Yearly Notifications For Account
  '/stats/notification/account/{year}/{month}':
    get:
      security:
        - Token: []
      parameters:
        - description: The year you desire to get stats from.
          example: '2014'
          in: path
          name: year
          required: true
          schema:
            type: string
        - description: The month you desire to get stats from.
          example: '03'
          in: path
          name: month
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  stats:
                    type: array
                    items:
                      $ref: '#/components/schemas/NotificationStats'
          description: OK
      tags:
        - Account Stats
      description: Retrieve the number of notifications sent on a specific month.
      operationId: getStatsNotificationForAccountMonth
      summary: Get Monthly Notifications For Account
  '/stats/notification/account/{year}/{month}/{day}':
    get:
      security:
        - Token: []
      parameters:
        - description: The year you desire to get stats from.
          example: '2014'
          in: path
          name: year
          required: true
          schema:
            type: string
        - description: The month you desire to get stats from.
          example: '03'
          in: path
          name: month
          required: true
          schema:
            type: string
        - description: The day you desire to get stats from.
          example: '01'
          in: path
          name: day
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  stats:
                    type: array
                    items:
                      $ref: '#/components/schemas/NotificationStats'
          description: OK
      tags:
        - Account Stats
      description: Retrieve the number of notifications sent on a specific day.
      operationId: getStatsNotificationForAccountDay
      summary: Get Daily Notifications For Account
  /stats/notification/application/lastmonth:
    get:
      security:
        - MasterSecret: []
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  stats:
                    type: array
                    items:
                      $ref: '#/components/schemas/NotificationStats'
          description: OK
      tags:
        - Application Stats
      description: Retrieve the number of notifications sent on the last 30 days.
      operationId: getStatsNotificationForApplicationLastMonth
      summary: Get Last Month Notifications For Application
  '/stats/notification/application/{year}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The year you desire to get stats from.
          example: '2014'
          in: path
          name: year
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  stats:
                    type: array
                    items:
                      $ref: '#/components/schemas/NotificationStats'
          description: OK
      tags:
        - Application Stats
      description: Retrieve the number of notifications sent on a specific year.
      operationId: getStatsNotificationForApplicationYear
      summary: Get Yearly Notifications For Application
  '/stats/notification/application/{year}/{month}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The year you desire to get stats from.
          example: '2014'
          in: path
          name: year
          required: true
          schema:
            type: string
        - description: The month you desire to get stats from.
          example: '03'
          in: path
          name: month
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  stats:
                    type: array
                    items:
                      $ref: '#/components/schemas/NotificationStats'
          description: OK
      tags:
        - Application Stats
      description: Retrieve the number of notifications sent on a specific month.
      operationId: getStatsNotificationForApplicationMonth
      summary: Get Monthly Notifications For Application
  '/stats/notification/application/{year}/{month}/{day}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The year you desire to get stats from.
          example: '2014'
          in: path
          name: year
          required: true
          schema:
            type: string
        - description: The month you desire to get stats from.
          example: '03'
          in: path
          name: month
          required: true
          schema:
            type: string
        - description: The day you desire to get stats from.
          example: '01'
          in: path
          name: day
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  stats:
                    type: array
                    items:
                      $ref: '#/components/schemas/NotificationStats'
          description: OK
      tags:
        - Application Stats
      description: Retrieve the number of notifications sent on a specific day.
      operationId: getStatsNotificationForApplicationDay
      summary: Get Daily Notifications For Application
  /stats/user/account:
    get:
      security:
        - Token: []
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  stats:
                    $ref: '#/components/schemas/UserStats'
          description: OK
      tags:
        - Account Stats
      description: Retrieve the total number of users in your account.
      operationId: getStatsUserForAccount
      summary: Get Total Users For Account
  /stats/user/account/lastmonth:
    get:
      security:
        - Token: []
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  stats:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserStats'
          description: OK
      tags:
        - Account Stats
      description: Retrieve the number of users in your account on the last 30 days.
      operationId: getStatsUserForAccountLastMonth
      summary: Get Last Month Users For Account
  '/stats/user/account/{year}':
    get:
      security:
        - Token: []
      parameters:
        - description: The year you desire to get stats from.
          example: '2014'
          in: path
          name: year
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  stats:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserStats'
          description: OK
      tags:
        - Account Stats
      description: Retrieve the number of users in your account for a specific year.
      operationId: getStatsUserForAccountYear
      summary: Get Yearly Users For Account
  '/stats/user/account/{year}/{month}':
    get:
      security:
        - Token: []
      parameters:
        - description: The year you desire to get stats from.
          example: '2014'
          in: path
          name: year
          required: true
          schema:
            type: string
        - description: The month you desire to get stats from.
          example: '03'
          in: path
          name: month
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  stats:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserStats'
          description: OK
      tags:
        - Account Stats
      description: Retrieve the number of users in your account for a specific month.
      operationId: getStatsUserForAccountMonth
      summary: Get Monthly Users For Account
  '/stats/user/account/{year}/{month}/{day}':
    get:
      security:
        - Token: []
      parameters:
        - description: The year you desire to get stats from.
          example: '2014'
          in: path
          name: year
          required: true
          schema:
            type: string
        - description: The month you desire to get stats from.
          example: '03'
          in: path
          name: month
          required: true
          schema:
            type: string
        - description: The day you desire to get stats from.
          example: '01'
          in: path
          name: day
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  stats:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserStats'
          description: OK
      tags:
        - Account Stats
      description: Retrieve the number of user in your account for a specific day.
      operationId: getStatsUserForAccountDay
      summary: Get Daily Users For Account
  /stats/user/application:
    get:
      security:
        - MasterSecret: []
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  stats:
                    $ref: '#/components/schemas/UserStats'
          description: OK
      tags:
        - Application Stats
      description: Retrieve the total number of users in an application.
      operationId: getStatsUserForApplication
      summary: Get Total Users For Application
  /stats/user/application/lastmonth:
    get:
      security:
        - MasterSecret: []
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  stats:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserStats'
          description: OK
      tags:
        - Application Stats
      description: Retrieve the number of users in an application on the last 30 days.
      operationId: getStatsUserForApplicationLastMonth
      summary: Get Last Month Users For Application
  '/stats/user/application/{year}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The year you desire to get stats from.
          example: '2014'
          in: path
          name: year
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  stats:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserStats'
          description: OK
      tags:
        - Application Stats
      description: Retrieve the number of users in an application for a specific year.
      operationId: getStatsUserForApplicationYear
      summary: Get Yearly Users For Application
  '/stats/user/application/{year}/{month}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The year you desire to get stats from.
          example: '2014'
          in: path
          name: year
          required: true
          schema:
            type: string
        - description: The month you desire to get stats from.
          example: '03'
          in: path
          name: month
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  stats:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserStats'
          description: OK
      tags:
        - Application Stats
      description: Retrieve the number of users in an application for a specific month.
      operationId: getStatsUserForApplicationMonth
      summary: Get Monthly Users For Application
  '/stats/user/application/{year}/{month}/{day}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The year you desire to get stats from.
          example: '2014'
          in: path
          name: year
          required: true
          schema:
            type: string
        - description: The month you desire to get stats from.
          example: '03'
          in: path
          name: month
          required: true
          schema:
            type: string
        - description: The day you desire to get stats from.
          example: '01'
          in: path
          name: day
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  stats:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserStats'
          description: OK
      tags:
        - Application Stats
      description: Retrieve the number of user in an application for a specific day.
      operationId: getStatsUserForApplicationDay
      summary: Get Daily Users For Application
  /status:
    get:
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              example:
                status: ok
          description: OK
      tags:
        - Status
      description: Get the current availability of the API
      operationId: getStatus
      summary: Get API Status
  /trigger:
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/TriggerList'
          description: OK
      tags:
        - Trigger
      description: >-
        Get all triggers for an application.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getTrigger
      summary: List Triggers
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  trigger:
                    $ref: '#/components/schemas/ResponseCreated'
          description: Created
      tags:
        - Trigger
      description: >-
        Create a new trigger. This request expects at least `name`, `type` and
        `source`.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.


        Three special cases apply:


        - if `source` is an array, then this trigger will be added to all
        regions or beacons in that array


        - if `source` is set to `"all"`, then this trigger will be added to all
        regions or beacons in this application


        - if `notification` is an object instead of an id string, a new
        notification will be created, for each region/beacon if `source`
        contains multiple sources. See Notifications for the structure of a
        Notification object.
      operationId: postTrigger
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TriggerCreate'
      summary: Create Trigger
  '/trigger/forsource/{source}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: Show triggers for this source
          in: path
          name: source
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
        - description: Show archived triggers
          example: 1
          in: query
          name: archived
          required: false
          schema:
            type: boolean
            default: false
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/TriggerList'
          description: OK
      tags:
        - Trigger
      description: >-
        Get triggers for a source region or beacon

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getTriggerForSource
      summary: List Triggers For Source
  '/trigger/forregion/{region}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: Show triggers for this region
          in: path
          name: region
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
        - description: Search for triggers with this name
          example: 1
          in: query
          name: search
          required: false
          schema:
            type: string
            default: Trig
        - description: Show archived triggers
          example: 1
          in: query
          name: archived
          required: false
          schema:
            type: boolean
            default: false
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/TriggerList'
          description: OK
      tags:
        - Trigger
      description: >-
        Get triggers for a region and its beacons

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getTriggerForRegion
      summary: List Triggers For Region
  '/trigger/{trigger}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The trigger id
          in: path
          name: trigger
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  trigger:
                    $ref: '#/components/schemas/TriggerModel'
          description: OK
      tags:
        - Trigger
      description: >-
        Get a trigger object.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getTriggerById
      summary: Get Trigger
    put:
      security:
        - MasterSecret: []
      parameters:
        - description: The trigger id
          in: path
          name: trigger
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: trigger updated
          description: OK
      tags:
        - Trigger
      description: >-
        Modify a trigger.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: putTriggerById
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TriggerBase'
      summary: Update Trigger
    delete:
      security:
        - MasterSecret: []
      parameters:
        - description: The trigger id
          in: path
          name: trigger
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: trigger deleted
          description: OK
      tags:
        - Trigger
      description: >-
        Delete a trigger. This operation cannot be undone.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: deleteTriggerById
      summary: Delete Trigger
  '/upload/{type}':
    post:
      security:
        - MasterSecret: []
      parameters:
        - description: The type of the file to upload
          example: import
          in: path
          name: type
          required: true
          schema:
            type: string
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  filename:
                    type: string
                    example: /imports/9f..
          description: Created
      tags:
        - Upload
      description: >-
        Upload a file to Notificare. The resulting filename is a path inside the
        notificare storage. This can be used as a reference to the file in other
        endpoints.

        The contents of the file should be in the body of the request and with
        the correct mime-type. So, e.g. an import should be of type `text/csv`,
        an image to go with a notification `image/png`, etc.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.


        ### Uploads


        ***


        notification


        ***


        import


        ***


        reply


        ***


        passbook


        ***


        website-push


        ***
      operationId: postUpload
      requestBody:
        content:
          image/png:
            schema:
              type: string
              format: binary
          image/jpeg:
            schema:
              type: string
              format: binary
          image/gif:
            schema:
              type: string
              format: binary
          application/pdf:
            schema:
              type: string
              format: binary
          video/mp4:
            schema:
              type: string
              format: binary
      summary: Create Upload
  '/upload/{type}/{applicationKey}/{token}':
    put:
      security:
        - MasterSecret: []
      parameters:
        - description: The first (type) part of the path of the file to delete
          example: notifications
          in: path
          name: type
          required: true
          schema:
            type: string
        - description: The second (applicationKey) part of the path of the file to delete
          example: bea30d16d3a2659c22a7867718670938df4ff7c05b459adbdf0573f7a7b3b3e2
          in: path
          name: applicationKey
          required: true
          schema:
            type: string
        - description: The third (token) part of the path of the file to delete
          example: 2c3b46d9d12bbc008914eaceab3f8b014b4897e49810b1170addcbe81a82a3e6
          in: path
          name: token
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: asset updated
          description: OK
      tags:
        - Upload
      description: >-
        Update file in Notificare storage.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: putUpload
      requestBody:
        content:
          image/png:
            schema:
              type: string
              format: binary
          image/jpeg:
            schema:
              type: string
              format: binary
          image/gif:
            schema:
              type: string
              format: binary
          application/pdf:
            schema:
              type: string
              format: binary
          video/mp4:
            schema:
              type: string
              format: binary
      summary: Update Upload
    delete:
      security:
        - MasterSecret: []
      parameters:
        - description: The first (type) part of the path of the file to delete
          example: notifications
          in: path
          name: type
          required: true
          schema:
            type: string
        - description: The second (applicationKey) part of the path of the file to delete
          example: bea30d16d3a2659c22a7867718670938df4ff7c05b459adbdf0573f7a7b3b3e2
          in: path
          name: applicationKey
          required: true
          schema:
            type: string
        - description: The third (token) part of the path of the file to delete
          example: 2c3b46d9d12bbc008914eaceab3f8b014b4897e49810b1170addcbe81a82a3e6
          in: path
          name: token
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
      tags:
        - Upload
      description: >-
        Delete file from Notificare storage. This operation cannot be undone.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: deleteUpload
      summary: Delete Upload
  /user:
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 25
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                count: 1
                users:
                  - _id: 5245bc5b3e66a3b01f0024d4
                    account: '12345'
                    active: true
                    application: '12345'
                    autoGenerated: false
                    segments: []
                    userID: '12345'
                    userName: Massimo
          description: OK
      tags:
        - User
      description: >-
        List all users for this app. This request is authenticated with the
        `applicationKey` and  `masterSecret`.
      operationId: getUser
      summary: List Users
  '/user/forsegment/{segment}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The ID of the segment
          in: path
          name: segment
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 25
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                count: 1
                users:
                  - _id: 5245bc5b3e66a3b01f0024d4
                    account: 5245bc5b3e66a3b01f0024d4
                    active: true
                    application: 5245bc5b3e66a3b01f0024d4
                    autoGenerated: false
                    segments: []
                    userID: '12345'
                    userName: Massimo
          description: OK
      tags:
        - User
      description: >-
        Retrieve users for a segment. This request is authenticated with the
        `applicationKey` and  `masterSecret`.
      operationId: getUserForSegment
      summary: List Users By User Segment
  '/user/foruserid/{userID}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The app-specific userID of the user
          example: '12345'
          in: path
          name: userID
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                user:
                  _id: 5245bc5b3e66a3b01f0024d4
                  account: 5245bc5b3e66a3b01f0024d4
                  active: true
                  application: 5245bc5b3e66a3b01f0024d4
                  autoGenerated: false
                  segments: []
                  userID: '12345'
                  userName: Massimo
          description: OK
      tags:
        - User
      description: >-
        Retrieve a user object using the `userID`. This request is authenticated
        with the `applicationKey` and  `masterSecret`.
      operationId: getUserForUserID
      summary: Get User By userID
    delete:
      security:
        - MasterSecret: []
      parameters:
        - description: The userID of the user
          example: '12345'
          in: path
          name: userID
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
      tags:
        - User
      description: >-
        Deactivate a user using the  `userID`. The user will no longer be
        visible in the dashboard.

        If the user registers again on one of his devices, he will be activated
        again. This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: deleteUserForUserID
      summary: Deactivate User By userID
  '/user/foruserid/{userID}/remove':
    delete:
      security:
        - MasterSecret: []
      parameters:
        - description: The userID of the user
          example: '12345'
          in: path
          name: userID
          required: true
          schema:
            type: string
      responses:
        '202':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: user removal is being processed
          description: Accepted
      tags:
        - User
      description: >-
        Delete a user using the  `userID`. The user will be completely removed
        from our system.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: deleteUserForUserIDRemove
      summary: Delete User By userID
  /user/provisional:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  user:
                    $ref: '#/components/schemas/ResponseCreated'
          description: Created
      tags:
        - User
      description: >-
        Create a provisional user, i.e., an inactive user with no devices. This
        allows you to later add the user to segments or refer to it in an import
        that adds users to a segment. The user will not be visible in the list
        of users until a device is registered for that user. This request is
        authenticated with the `applicationKey` and  `masterSecret`.
      operationId: postUserProvisional
      requestBody:
        content:
          application/json:
            schema:
              properties:
                userID:
                  description: The user ID
                  type: string
                userName:
                  description: The user's name
                  type: string
              required:
                - userID
              type: object
      summary: Create Provisional User
  '/user/search/{search}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The search string
          example: Mas
          in: path
          name: search
          required: true
          schema:
            type: string
        - description: 'The maximum number of results to retrieve, max 1000.'
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 25
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                count: 1
                users:
                  - _id: 5245bc5b3e66a3b01f0024d4
                    account: 5245bc5b3e66a3b01f0024d4
                    active: true
                    application: 5245bc5b3e66a3b01f0024d4
                    autoGenerated: false
                    segments: []
                    userID: '12345'
                    userName: Massimo
          description: OK
      tags:
        - User
      description: >-
        Search users by `userName` and `userID`. This request is authenticated
        with the `applicationKey` and  `masterSecret`.
      operationId: getUserSearch
      summary: Search Users
  '/user/{user}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The Notificare ID of the user
          in: path
          name: user
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                user:
                  _id: 5245bc5b3e66a3b01f0024d4
                  account: 5245bc5b3e66a3b01f0024d4
                  active: true
                  application: 5245bc5b3e66a3b01f0024d4
                  autoGenerated: false
                  segments: []
                  userID: '12345'
                  userName: Massimo
          description: OK
      tags:
        - User
      description: >-
        Retrieve a user object. This request is authenticated with the
        `applicationKey` and  `masterSecret`.
      operationId: getUserById
      summary: Get User
    delete:
      security:
        - MasterSecret: []
      parameters:
        - description: The Notificare ID of the user
          in: path
          name: user
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '204':
          description: No Content
      tags:
        - User
      description: >-
        Deactivate a user.  The user will no longer be visible in the dashboard.

        If the user registers again on one of his devices, he will be activated
        again. This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: deleteUserById
      summary: Deactivate User
  '/user/{user}/remove':
    delete:
      security:
        - MasterSecret: []
      parameters:
        - description: The Notificare ID of the user
          in: path
          name: user
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '202':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: user removal is being processed
          description: Accepted
      tags:
        - User
      description: >-
        Delete a user. The user will be completely removed from our system.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: deleteUserByIdRemove
      summary: Delete User
  '/user/{user}/add/{segment}':
    put:
      security:
        - MasterSecret: []
      parameters:
        - description: The Notificare ID of the user
          in: path
          name: user
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
        - description: The ID of the segment
          in: path
          name: segment
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: user added to segment
          description: OK
      tags:
        - User
      description: >-
        Add user to segment. This request is authenticated with the
        `applicationKey` and  `masterSecret`.
      operationId: putUserByIdAddSegment
      summary: Add User To User Segment
  '/user/{user}/remove/{segment}':
    put:
      security:
        - MasterSecret: []
      parameters:
        - description: The Notificare ID of the user
          in: path
          name: user
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
        - description: The ID of the segment
          in: path
          name: segment
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: user removed from segment
          description: OK
      tags:
        - User
      description: >-
        Remove user from segment. This request is authenticated with the
        `applicationKey` and  `masterSecret`.
      operationId: putUserByIdRemoveSegment
      summary: Remove User From User Segment
  '/user/{user}/userdata/override':
    put:
      security:
        - MasterSecret: []
      parameters:
        - description: The Notificare ID of the user
          in: path
          name: user
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: devices user data updated
          description: OK
      tags:
        - User
      description: >-
        Set the user data fields for all the user's devices. The fields
        need to be defined as User Data Fields in the Settings > Configure App > User Data Fields
        menu before they can be set through this endpoint.
        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: putUserUserdataOverride
      requestBody:
        content:
          application/json:
            schema:
              properties:
                userData:
                  type: object
                  additionalProperties:
                    type: string
                  example:
                    firstName: John
                    lastName: Doe
              type: object
      summary: Update User Data For User Devices
  '/user/foruserid/{userID}/userdata/override':
    put:
      security:
        - MasterSecret: []
      parameters:
        - description: The userID of the user
          example: '12345'
          in: path
          name: userID
          required: true
          schema:
            type: 'string'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: devices user data updated
          description: OK
      tags:
        - User
      description: >-
        Set the user data fields for all the user's devices.
        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: putUserForUserIDUserdataOverride
      requestBody:
        content:
          application/json:
            schema:
              properties:
                userData:
                  type: object
                  additionalProperties:
                    type: string
                  example:
                    firstName: John
                    lastName: Doe
              type: object
      summary: Update User Data For User Devices By userID
  /usersegment:
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 25
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                count: 2
                userSegments:
                  - _id: 5245bc5b3e66a3b01f0024d4
                    description: people who like our page on Facebook
                    name: fans
                  - _id: 5245bc5b3e66a3b01f0024d4
                    description: people who just joined
                    name: newbies
          description: OK
      tags:
        - User Segment
      description: >-
        Retrieve a list of segments. This request is authenticated with the
        `applicationKey` and  `masterSecret`.
      operationId: getUserSegment
      summary: Get User Segments
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  userSegment:
                    $ref: '#/components/schemas/ResponseCreated'
          description: Created
      tags:
        - User Segment
      description: >-
        Create a new user segment. This request is authenticated with the
        `applicationKey` and  `masterSecret`.
      operationId: postUserSegment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSegmentCreate'
      summary: Create User Segment
  /usersegment/batch:
    post:
      security:
        - MasterSecret: []
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  userSegment:
                    $ref: '#/components/schemas/ResponseCreated'
          description: Created
      tags:
        - User Segment
      description: >-
        Create a new user segment with a batch of userIDs. There is a limit of
        1000 userIDs. This request is authenticated with the `applicationKey`
        and  `masterSecret`.
      operationId: postUserSegmentBatch
      requestBody:
        content:
          application/json:
            schema:
              example:
                description: people who like our page on Facebook
                name: fans
                users:
                  - user1@notifica.re
                  - user2@notifica.re
              properties:
                description:
                  type: string
                name:
                  type: string
                users:
                  items:
                    type: string
                  type: array
              type: object
      summary: Create User Segment With Batch of Users
  '/usersegment/forname/{name}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The (start of the) name of the segment you are looking for
          example: fans
          in: path
          name: name
          required: true
          schema:
            type: string
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 25
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                count: 1
                userSegments:
                  - _id: 5245bc5b3e66a3b01f0024d4
                    description: people who like our page on Facebook
                    name: fans
                    userSelectable: false
          description: OK
      tags:
        - User Segment
      description: >-
        Retrieve a list of segments with a name (starting with) `name`. This
        request is authenticated with the `applicationKey` and  `masterSecret`.
      operationId: getUserSegmentForName
      summary: Get User Segments By Name
  '/usersegment/{segment}':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The ID of the segment
          in: path
          name: segment
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                userSegment:
                  _id: 5245bc5b3e66a3b01f0024d4
                  description: people who like our page on Facebook
                  name: fans
          description: OK
      tags:
        - User Segment
      description: >-
        Retrieve a segment. This request is authenticated with the
        `applicationKey` and  `masterSecret`.
      operationId: getUserSegmentById
      summary: Get User Segment
    put:
      security:
        - MasterSecret: []
      parameters:
        - description: The ID of the segment
          in: path
          name: segment
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: user segment updated
          description: OK
      tags:
        - User Segment
      description: >-
        Change `name` and/or `description` of a user segment. This request is
        authenticated with the `applicationKey` and  `masterSecret`.
      operationId: putUserSegmentById
      requestBody:
        content:
          application/json:
            schema:
              example:
                description: people who like our page on Facebook
                name: fans
              properties:
                description:
                  type: string
                name:
                  type: string
              type: object
      summary: Update User Segment
    delete:
      security:
        - MasterSecret: []
      parameters:
        - description: The ID of the segment
          in: path
          name: segment
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: user segment removed
          description: OK
      tags:
        - User Segment
      description: >-
        Delete a user segment. This request is authenticated with the
        `applicationKey` and  `masterSecret`.
      operationId: deleteUserSegmentById
      summary: Delete User Segment
  '/usersegment/{segment}/add':
    put:
      security:
        - MasterSecret: []
      parameters:
        - description: The ID of the segment
          in: path
          name: segment
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessageCount'
              example:
                count: 2
                message: added users to segment
          description: OK
      tags:
        - User Segment
      description: >-
        Add users to a segment using a batch of userIDs. There is a limit of
        1000 userIDs. This request is authenticated with the `applicationKey`
        and  `masterSecret`.
      operationId: putUserSegmentByIdAdd
      requestBody:
        content:
          application/json:
            schema:
              example:
                users:
                  - user1@notifica.re
                  - user2@notifica.re
              properties:
                users:
                  items:
                    type: string
                  type: array
              type: object
      summary: Add Batch of Users To User Segment
  '/usersegment/{segment}/remove':
    put:
      security:
        - MasterSecret: []
      parameters:
        - description: The ID of the segment
          in: path
          name: segment
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessageCount'
              example:
                count: 2
                message: removed users from segment
          description: OK
      tags:
        - User Segment
      description: >-
        Remove users from a segment using a batch of userIDs. There is a limit
        of 1000 userIDs. This request is authenticated with the `applicationKey`
        and  `masterSecret`.
      operationId: putUserSegmentByIdRemove
      requestBody:
        content:
          application/json:
            schema:
              example:
                users:
                  - user1@notifica.re
                  - user2@notifica.re
              properties:
                users:
                  items:
                    type: string
                  type: array
              type: object
      summary: Remove Batch of Users From User Segment
  '/usersegment/{segment}/users':
    get:
      security:
        - MasterSecret: []
      parameters:
        - description: The ID of the segment
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: segment
          required: true
          schema:
            type: string
        - description: 'The maximum number of results to retrieve, max 1000.'
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 25
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                count: 1
                users:
                  - _id: 5245bc5b3e66a3b01f0024d4
                    account: '12345'
                    active: true
                    application: '12345'
                    autoGenerated: false
                    segments:
                      - 5245bc5b3e66a3b01f0024d4
                    userID: '12345'
                    userName: Massimo
          description: OK
      tags:
        - User Segment
      description: >-
        Get all the users in a segment. This request is authenticated with the
        `applicationKey` and  `masterSecret`.
      operationId: getUserSegmentByIdUsers
      summary: Get Users In User Segment
  '/usersegment/{segment}/clear':
    put:
      security:
        - MasterSecret: []
      parameters:
        - description: The ID of the segment
          in: path
          name: segment
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
                message: user segment cleared
          description: OK
      tags:
        - User Segment
      description: >-
        Clear all the users from a segment. This request is authenticated with
        the `applicationKey` and  `masterSecret`.
      operationId: putUserSegmentByIdClear
      summary: Delete Users From User Segment
components:
  securitySchemes:
    Password:
      description: >-
        Used for signing in to your account and retrieving a session token.
        Username is account email address, password is account password
      type: http
      scheme: basic
    ApplicationSecret:
      description: >-
        Only used for calls that originate from the device, e.g., registration, tags.
        Username is applicationKey, password is applicationSecret.
        If you do not have these yet, you should grab them from
        your app in Notificare Dashboard under the section Settings > App Keys.
      type: http
      scheme: basic
    MasterSecret:
      description: >-
        Used for calls that are related to a specific application and originate from your
        backend system, e.g., push, user segments, user lists, device lists, regions.
        Username is applicationKey, password is masterSecret.
        If you do not have these yet, you should grab them from
        your app in Notificare Dashboard under the section Settings > App Keys.
      type: http
      scheme: basic
    Token:
      description: >-
        Used for all calls that need account-wide access, such as stats, lists of applications, etc.
        Username is session token, password is arbitrary string, e.g., `xxx`
      type: http
      scheme: basic
  schemas:
    AccountSession:
      properties:
        account:
          $ref: '#/components/schemas/ObjectId'
        token:
          description: The token to use for further authentication requests
          type: string
          example: 2c6c5423fa6c64edb330e999e3912538d40c170e88f779aafad970f2f4d8090b
        expires:
          $ref: '#/components/schemas/Date'
        needsSecondFactor:
          description: This session needs a second factor before it can be used
          type: boolean
          default: false
    ApplicationList:
      properties:
        applications:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationModel'
        count:
          type: number
          example: 1
      type: object
    ApplicationModel:
      allOf:
        - properties:
            _id:
              $ref: '#/components/schemas/ObjectId'
            account:
              $ref: '#/components/schemas/ObjectId'
            date:
              $ref: '#/components/schemas/Date'
            applicationKey:
              description: The application key to use as username for authentication
              type: string
              example: xxxxxxxxxxxx
            applicationSecret:
              description: The application secret to use as password for authentication
              type: string
              example: xxxxxxxxxxxx
            masterSecret:
              description: The master secret to use as password for authentication
              type: string
              example: xxxxxxxxxxxx
            canChangeWhiteList:
              description: This account can change its own IP whitelist
              type: boolean
              example: true
            accessRole:
              description: The access role the authenticated account has
              type: string
              enum: [NONE, REPORTER, EXPORTER, EDITOR, SENDER, DEFAULT, ADMIN, OWNER]
              example: OWNER
              default: DEFAULT
            permissions:
              $ref: '#/components/schemas/Permissions'
          type: object
        - $ref: '#/components/schemas/ApplicationBase'
    ApplicationUpdate:
      $ref: '#/components/schemas/ApplicationBase'
    ApplicationCreate:
      allOf:
        - $ref: '#/components/schemas/ApplicationBase'
        - properties:
            category:
              description: Your application's category.
              type: string
              example: Other
            name:
              description: Your application's name.
              type: string
              example: Your App
            production:
              description: If your application is set to production or not.
              type: boolean
              default: false
          type: object
          required:
            - category
            - name
            - production
    ApplicationBase:
      properties:
        active:
          type: boolean
          default: true
        apnsConfig:
          properties:
            certificate:
              type: string
              format: byte
            info:
              properties:
                issuer:
                  properties:
                    C:
                      type: string
                      example: US
                    CN:
                      type: string
                      example: Apple Worldwide Developer Relations Certification Authority
                    O:
                      type: string
                      example: Apple Inc.
                    OU:
                      type: string
                      example: Apple Worldwide Developer Relations
                  type: object
                notAfter:
                  $ref: '#/components/schemas/Date'
                notBefore:
                  $ref: '#/components/schemas/Date'
                serial:
                  type: string
                  example: 1eda39f7b752e468
                subject:
                  properties:
                    C:
                      type: string
                      example: NL
                    CN:
                      type: string
                      example: 'Apple Development IOS Push Services: re.notifica.demo'
                    OU:
                      type: string
                      example: Y47BY73NFN
                    O:
                      type: string
                      example: Notificare B.V.
                    UID:
                      type: string
                      example: re.notifica.demo
                  type: object
              type: object
          type: object
        gcmConfig:
          properties:
            key:
              type: string
              format: byte
        hmsConfig:
          properties:
            appId:
              type: string
            appSecret:
              type: string
              format: hex
        category:
          description: Your application's category.
          type: string
          example: Other
        locationTtl:
          type: number
          example: 7
        name:
          description: Your application's name.
          type: string
          example: Your App
        regionConfig:
          properties:
            proximityUUID:
              type: string
              format: uuid
              example: f7826da6-4fa2-4e98-8024-bc5b71e0893e
          type: object
      type: object
    AssetOrder:
      properties:
        customSortOrder:
          type: number
          example: 2
      required:
        - customSortOrder
      type: object
    AssetList:
      properties:
        assets:
          type: array
          items:
            $ref: '#/components/schemas/AssetModel'
        count:
          type: number
          example: 1
      type: object
    AssetModel:
      allOf:
        - properties:
            _id:
              $ref: '#/components/schemas/ObjectId'
            application:
              $ref: '#/components/schemas/ObjectId'
          type: object
        - $ref: '#/components/schemas/AssetBase'
    AssetBase:
      properties:
        contentDisposition:
          type: string
          example: form-data; name="file"; filename="Screenshot_2016-04-07-13-17-31.png"
        contentLength:
          type: number
          example: 59609
        contentType:
          type: string
          example: image/png
        customSortOrder:
          type: number
          example: '0'
        fileName:
          type: string
          example: /notifications/3d99d18148e6f3dbcf4ff891c9a0ff63b0311feccc7b9d0c8c79fee9b4dde19/e457c97c76bc41ff524af3697cc5236cc06fd982a83f983046fff68ea56b1b6
        key:
          type: string
          example: 3d99d18148e6f3dbcf4ff891c9a0ff63b0311feccc7b9d0c8c79fee9b4dde19/e457c97c76bc41ff524af3697cc5236cc06fd982a83f983046fff68ea56b1b6
        lastModified:
          $ref: '#/components/schemas/Date'
        originalFileName:
          type: string
          example: Screenshot_2016-04-07-13-17-31.png
    AssetGroupCreate:
      allOf:
        - $ref: '#/components/schemas/AssetGroupBase'
        - properties:
            assets:
              description: An array of assets.
              items:
                $ref: '#/components/schemas/AssetGroupAsset'
              type: array
            name:
              description: The asset group's name
              type: string
              example: Test Group
          required:
            - name
            - assets
          type: object
    AssetGroupList:
      properties:
        assetGroups:
          type: array
          items:
            $ref: '#/components/schemas/AssetGroupModel'
        count:
          type: number
          example: 1
      type: object
    AssetGroupModel:
      allOf:
        - properties:
            _id:
              $ref: '#/components/schemas/ObjectId'
            application:
              $ref: '#/components/schemas/ObjectId'
          type: object
        - $ref: '#/components/schemas/AssetGroupBase'
    AssetGroupBase:
      properties:
        assets:
          description: An array of assets.
          items:
            $ref: '#/components/schemas/AssetGroupAsset'
          type: array
        name:
          description: The asset group's name
          type: string
          example: Test Group
        notAfter:
          description: Asset groups will not be visible after this date.
          type: string
          format: 'date-time'
        notBefore:
          description: Asset groups will not be visible before this date.
          type: string
          format: 'date-time'
        segment:
          description: The segment for this asset group
          type: string
          example: 1d9e80ef851d212aca82cf23
      required:
        - name
        - assets
      type: object
    AssetGroupAsset:
      properties:
        title:
          type: string
          example: "Screen Shot 2016-03-24 at 00.04.49.png"
        key:
          type: string
          example: "3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/c76c6363a7e014fae1586fa9b83b1c61faa7b79036fd2670db2840de979cab03"
        description:
          type: string
          example: A screen shot
        button:
          properties:
            label:
              type: string
              example: Test button
            action:
              type: string
              example: testAction
        extra:
          additionalProperties:
            type: string
          example:
            key1: value1
            key2: value2
    AutomationCreate:
      $ref: '#/components/schemas/AutomationBase'
    AutomationUpdate:
      $ref: '#/components/schemas/AutomationBase'
    AutomationList:
      properties:
        automations:
          description: The list of Automation Connectors, paginated
          type: array
          items:
            $ref: '#/components/schemas/AutomationModel'
        count:
          description: Total number of Automation Connectors in the list
          type: number
          example: 1
      type: object
    AutomationModel:
      allOf:
        - properties:
            _id:
              description: Notificare ID of the Automation Connector
              readOnly: true
              type: string
              example: 1d9e80ef851d212aca82cf23
            archived:
              description: This automation connector is archived
              readOnly: true
              type: boolean
              default: false
          type: object
        - $ref: '#/components/schemas/AutomationBase'
    AutomationBase:
      properties:
        active:
          description: Automation connector is enabled
          type: boolean
          default: false
        name:
          description: The automation connector's name
          example: Fire
          type: string
        type:
          description: >-
            The type of connector.
          type: string
          enum: [re.notifica.automation.internal.Notification,re.notifica.automation.internal.Email,re.notifica.automation.internal.SMS,re.notifica.automation.trigger.Trigger]
          example: re.notifica.automation.internal.Notification
          default: re.notifica.automation.trigger.Trigger
        notBefore:
          description: Automation should not be executed before this date
          type: string
          format: 'date-time'
        notAfter:
          description: Automation should not be executed after this date
          type: string
          format: 'date-time'
        dayStart:
          description: Automation should not be executed before this time of day
          type: string
          example: '09:00'
        dayEnd:
          description: Automation should not be executed after this time of day
          type: string
          example: '17:00'
        frequency:
          description: The frequency type of the automation connector
          type: string
          enum: [once,time,always]
        occasion:
          description: >-
            Which occasion should the automation connector trigger.
            In case of frequency 'always', this means every n times.
            In case of frequency 'once', this means the nth time
          type: number
          default: 1
        matchDataField:
          description: >-
            Data field whose value should be matched to determine automation triggering.
            Frequency and occasion will be counted against distinct values of this property in the event data
            Setting this property means the field needs to be present in event data, otherwise the automation will be skipped.
          type: string
          example: test
        interval:
          description: The interval in seconds between automation triggers, only applicable for frequency type 'time'
          type: number
          default: 86400
        delayMinutes:
          description: The delay in minutes before the automation triggers
          type: number
          default: '0'
        eventType:
          description: The event that triggers this automation
          type: string
          example: re.notifica.event.custom.fire
        cancelEventType:
          description: List of events that cancel this automation, only applicable if automation has a delay
          type: array
          items:
            type: string
          example: [re.notifica.event.custom.douse]
        target:
          description: >-
            Previously created notification to be sent when automation is executed.
          type: string
          example: 1d9e80ef851d212aca82cf23
        distinctNotifications:
          description: >-
            Send distinct notifications for each automation trigger.
            Info stats for notifications are grouped by aggregation property of the notification,
            which will be equal to the automation id
          type: boolean
          default: false
        criteria:
          $ref: '#/components/schemas/Criteria'
        dataFilter:
          $ref: '#/components/schemas/DataFilterCriteria'
        rules:
          $ref: '#/components/schemas/MessageRule'
      type: object
    BeaconCreate:
      allOf:
        - $ref: '#/components/schemas/BeaconBase'
        - properties:
            name:
              description: Your beacon's name
              type: string
              example: Test beacon
            region:
              description: >-
                Your beacon's region (must match a previously
                created identifier of a region). Also determines the major of the beacon
              $ref: '#/components/schemas/ObjectId'
            minor:
              description: Your beacon's minor identifier (must be unique per major)
              type: number
              example: 100
            notification:
              type: string
              example: 1d9e80ef851d212aca82cf23
              description: An Id of a previously created notification.
          required:
            - name
            - region
            - minor
            - notification
          type: object
    BeaconUpdate:
      $ref: '#/components/schemas/BeaconBase'
    BeaconList:
      properties:
        beacons:
          description: The list of beacons, paginated
          type: array
          items:
            $ref: '#/components/schemas/BeaconModel'
        count:
          description: Total number of beacons in the list
          type: number
          example: 1
      type: object
    BeaconModel:
      allOf:
        - properties:
            _id:
              description: Notificare ID of the beacon
              type: string
              example: 1d9e80ef851d212aca82cf23
        - $ref: '#/components/schemas/BeaconBase'
    BeaconBase:
      properties:
        batteryLevel:
          description: An object representing the battery level of this beacon.
          type: number
          example: 99
        data:
          description: A free form object that can be assigned to a beacon.
          additionalProperties:
            type: string
          example:
            key1: value1
            key2: value2
          type: object
        latitude:
          description: An integer representing the beacon's latitude.
          type: number
          example: 52.12772
        longitude:
          description: An integer representing the beacon's longitude.
          type: number
          example: 4.1662
        minor:
          description: Your beacon's minor identifier (must be unique per major)
          type: number
          example: 100
        name:
          description: Your beacon's name
          type: string
          example: Test beacon
        notification:
          type: string
          example: 1d9e80ef851d212aca82cf23
          description: An Id of a previously created notification.
        proximity:
          description: >-
            Your notification proximity. Accepts one of these:
            'immediate', 'near' and 'far'. (deprecated)
          type: string
          enum:
            - immediate
            - near
            - far
        proximityNotifications:
          description: >-
            An object containing three previously created message Ids
            for each proximity level.
          properties:
            far:
              $ref: '#/components/schemas/ObjectId'
            immediate:
              $ref: '#/components/schemas/ObjectId'
            near:
              $ref: '#/components/schemas/ObjectId'
          type: object
        purpose:
          description: >-
            An object representing the purpose of the beacon. Accepts
            one of these: 'general', 'pay', 'info', 'staff', 'admin'.
          type: string
          example: Testing purposes
        triggers:
          description: >-
            Set to true if this beacon can be used in triggers. Max.
            number of beacons that can use triggers is limited to 10.
          type: boolean
          default: false
      type: object
    Circle:
      allOf:
        - $ref: '#/components/schemas/Point'
        - properties:
            distance:
              type: number
              example: 100
          required:
            - distance
          type: object
    Coordinates:
      items:
        type: number
      type: array
      minItems: 2
      maxItems: 2
      example: [4.23456, 52.184884]
    CoordinatesRing:
      items:
        $ref: '#/components/schemas/Coordinates'
      minItems: 3
      example: [[4.23456, 52.184884], [5.23456, 50.184884],[4.23456, 52.184884]]
      type: array
    Criteria:
      description: >-
        Criteria to select an audience
      properties:
        locationsCriteria:
          description: >-
            Device locations criteria
          items:
            $ref: '#/components/schemas/LocationsCriteria'
          type: array
        propertiesCriteria:
          description: >-
            Device properties criteria
          items:
            $ref: '#/components/schemas/PropertiesCriteria'
          type: array
        segmentsCriteria:
          description: >-
            User segments criteria
          items:
            $ref: '#/components/schemas/SegmentsCriteria'
          type: array
        tagsCriteria:
          description: >-
            Device tags criteria
          items:
            $ref: '#/components/schemas/TagsCriteria'
          type: array
        userDataCriteria:
          description: >-
            User Data criteria
          items:
            $ref: '#/components/schemas/UserDataCriteria'
          type: array
      type: object
    DataFilterCriteria:
      items:
        $ref: '#/components/schemas/DataFilterCriterion'
      type: array
    DataFilterCriterion:
      description: >-
        Filter events by comparing data in specific keys and values
      properties:
        operator:
          enum:
            - eq
            - ne
            - lt
            - lte
            - gt
            - gte
            - in
            - nin
            - sw
          type: string
        property:
          type: string
          example: customDataField
        type:
          description: >-
            Type of custom event data property to filter.
            Both the value of the criterion and the actual event data
            value will be parsed against this type before comparing.
          enum:
            - String
            - Number
            - Boolean
            - Date
          type: string
        value:
          example: customDataValue
          oneOf:
            - type: string
            - type: number
            - type: boolean
            - $ref: '#/components/schemas/Date'
            - type: array
              items:
                oneOf:
                  - type: string
                  - type: number
                  - type: boolean
                  - $ref: '#/components/schemas/Date'
      type: object
    DatasourceCreate:
      allOf:
        - $ref: '#/components/schemas/DatasourceBase'
        - properties:
            name:
              description: The source's name
              type: string
            config:
              $ref: '#/components/schemas/DatasourceConfig'
          required:
            - name
            - config
          type: object
    DatasourceUpdate:
      $ref: '#/components/schemas/DatasourceBase'
    DatasourceList:
      properties:
        datasources:
          description: The list of Datasources, paginated
          type: array
          items:
            $ref: '#/components/schemas/DatasourceModel'
        count:
          description: Total number of Datasources in the list
          type: number
          example: 1
      type: object
    DatasourceModel:
      allOf:
        - properties:
            _id:
              description: Notificare ID of the Datasource
              readOnly: true
              type: string
              example: 1d9e80ef851d212aca82cf23
            lastRun:
              description: Time of last polling
              readOnly: true
              type: string
              format: 'date-time'
            lastParsed:
              description: Time of last parsing
              readOnly: true
              type: string
              format: 'date-time'
            nextRun:
              description: Time of next polling
              readOnly: true
              type: string
              format: 'date-time'
          type: object
        - $ref: '#/components/schemas/DatasourceBase'
    DatasourceTest:
      properties:
        config:
          $ref: '#/components/schemas/DatasourceConfig'
      type: object
      required:
        - config
    DatasourceFeedModel:
      properties:
        items:
          type: array
          items:
            properties:
              date:
                $ref: '#/components/schemas/Date'
              description:
                type: string
                example: |-
                  <p><br />
                  From day 1, we set out to provide...
              link:
                type: string
                format: uri
                example: http://notifica.re/blog/2016/02/26/Notificare-ISO-Certification/
              title:
                type: string
                example: Notificare receives ISO 27001 certification
        meta:
          properties:
            date:
              $ref: '#/components/schemas/Date'
            description:
              type: string
              example: Our Blog
            title:
              type: string
              example: Notificare
          type: object
      type: object
    DatasourceBase:
      properties:
        active:
          description: Polling of this feed is enabled
          type: boolean
          default: false
        name:
          description: The source's name
          example: Blog
          type: string
        type:
          description: >-
            The type of datasource. Accepts one of these: 'feed',
            'upload'.
          example: feed
          type: string
          default: feed
        config:
          $ref: '#/components/schemas/DatasourceConfig'
        interval:
          description: The interval at which to poll the feed
          type: number
          example: 900
        mapType:
          description: >-
            The type of mapping for the source. Accepts one of these:
            'feed', 'category'.
          type: string
          enum: [feed, category]
          default: feed
        mapTarget:
          description: >-
            The mapping target for the source. Accepts one of these:
            'tag', 'segment'.
          type: string
          enum: [tag, segment]
          default: tag
        feedMap:
          description: >-
            A string representing a tag or a segment Id.
            Only used if you choose feed in mapType.
          type: string
          example: tag1
        categoryMap:
          description: Only used and required if you choose category in mapType.
          type: array
          items:
            properties:
              category:
                description: The category in the RSS feed to map
                type: string
                example: News
              target:
                description: The target tag or segment to map to
                type: string
                example: tag1
            required:
              - category
              - target
            type: object
      type: object
    DatasourceConfig:
      properties:
        messageType:
          description: The type of message to send
          type: string
          example: re.notifica.notification.Alert
        url:
          description: The URL to fetch the RSS Feed from
          type: string
          example: http://notifica.re/blog/feed.xml
          format: uri
      required:
        - url
        - messageType
      type: object
    Date:
      type: string
      format: date-time
    DateCriteria:
      properties:
        operator:
          enum:
            - eq
            - ne
            - lt
            - lte
            - gt
            - gte
          type: string
          example: lt
        value:
          $ref: '#/components/schemas/Date'
      type: object
    RelativeDateCriteria:
      properties:
        operator:
          enum:
            - eq
            - ne
            - lt
            - lte
            - gt
            - gte
          type: string
          example: gt
        value:
          type: number
          example: 86400
      type: object
    DeviceList:
      properties:
        devices:
          type: array
          items:
            $ref: '#/components/schemas/DeviceModel'
        count:
          type: number
          example: 1
      type: object
    DeviceModel:
      allOf:
        - properties:
            _id:
              description: Notificare ID of the Device
              readOnly: true
              type: string
              example: 1d9e80ef851d212aca82cf23
            application:
              description: Application this device belongs to
              readOnly: true
              type: string
              example: 1d9e80ef851d212aca82cf23
          type: object
        - $ref: '#/components/schemas/DeviceBase'
    DeviceBase:
      properties:
        active:
          type: boolean
          default: true
        appVersion:
          type: string
          example: 1.0
        deviceID:
          type: string
          example: 00a9b9bf-c099-45aa-9278-64d6a3f22476
        deviceString:
          type: string
          example: MacIntel
        language:
          type: string
          default: en
          example: nl
        lastActive:
          $ref: '#/components/schemas/Date'
        location:
          $ref: '#/components/schemas/Point'
        medium:
          type: string
          default: push
          enum: [push, email, sms]
        osString:
          type: string
          example: Mac OS X 10.9.2
        osVersion:
          type: string
          example: 10.9.2
        platform:
          type: string
          example: Web
          enum: [iOS, tvOS, Android, Web]
        sdkVersion:
          type: string
          example: 2.1.1
        timeZoneOffset:
          type: number
          default: '0'
          example: -5
        transport:
          type: string
          default: Notificare
          enum: [APNS, GCM, HMS, WebPush, WebsitePush, Email, SMS, Notificare]
        userID:
          type: string
          example: 188720716616
        tags:
          type: array
          items:
            type: string
          example: [tag1, tag2]
      type: object
    DeviceStats:
      properties:
        date:
          type: string
          format: 'date-time'
          example: '2014-02-01T00:00:00.000Z'
        value:
          description: The value for the device property
          type: string
          example: '1.2.3'
        count:
          description: Total number of devices with this value for the property during this period
          type: number
          example: 1000
    DeviceTagList:
      properties:
        tags:
          type: array
          items:
            $ref: '#/components/schemas/DeviceTagModel'
        count:
          type: number
          example: 2
      type: object
      example:
        - deviceCount: 2
          tag: toys
        - deviceCount: 5
          tag: kitchen
    DeviceTagModel:
      properties:
        tag:
          type: string
          example: toys
        deviceCount:
          type: number
          example: 2
    EmailCreate:
      properties:
        tags:
          description: A list of tags you wish to assign to the email address.
          items:
            type: string
          type: array
          example: ['tag1']
        email:
          description: The email address you wish to subscribe to your app.
          type: string
          format: email
        language:
          description: The language you wish to assign the contact to.
          type: string
          example: 'nl'
        region:
          description: The region you wish to assign the contact to.
          type: string
          example: 'NL'
        userID:
          description: The userID your wish to assign the contact to.
          type: string
          example: '173661892772'
        userName:
          description: The userName your wish to assign the contact to.
          type: string
          example: Test User
        verify:
          description: >-
            If you wish to require verification before activating the
            email contact set this property to `true`.
          type: boolean
      required:
        - email
      type: object
    ExportJobList:
      properties:
        exportJobs:
          type: array
          items:
            $ref: '#/components/schemas/ExportJobModel'
        count:
          type: number
          example: 2
      type: object
    ExportJobModel:
      allOf:
        - properties:
            _id:
              description: Notificare ID of the Export Job
              readOnly: true
              type: string
              example: 1d9e80ef851d212aca82cf23
            application:
              description: Application this export job belongs to
              readOnly: true
              type: string
              example: 1d9e80ef851d212aca82cf23
          type: object
        - $ref: '#/components/schemas/ExportJobBase'
    ExportJobBase:
      properties:
        data:
          additionalProperties: true
          example:
            all: true
            before: '2017-01-13'
            campaign: 5354f08474adc4183214c143
            fence: 5354f08474adc4183214c143
            includeTags: true
            notification: 5354f08474adc4183214c143
            region: 5354f08474adc4183214c143
            serial: 5354f08474adc4183214c143
            showCombinedSegments: true
            showPreferences: true
            showSegments:
              - 5354f08474adc4183214c143
            since: '2017-01-12'
            tagsSeparator: '|'
            type: re.notifica.event.application.Open
            useSegmentNames: true
            userID: 5354f08474adc4183214c143
            skipErrorEmails: false
            skipSuccessEmails: true
        date:
          $ref: '#/components/schemas/Date'
        result:
          type: string
          example: created export file export-user-1425983129369.csv (919 bytes)
        status:
          type: string
          enum: [success, error]
          example: success
        type:
          type: string
          example: re.notifica.export.User
      type: object
    ExportScheduleModelList:
      properties:
        exportSchedules:
          type: array
          items:
            $ref: '#/components/schemas/ExportScheduleModel'
        count:
          type: number
          example: 2
      type: object
    ExportScheduleModel:
      allOf:
        - $ref: '#/components/schemas/ExportScheduleBase'
        - properties:
            _id:
              $ref: '#/components/schemas/ObjectId'
            application:
              $ref: '#/components/schemas/ObjectId'
            data:
              additionalProperties: true
              example:
                clear: false
                userSegment: 53a0a047fff17d3215a94f6
            lastRun:
              $ref: '#/components/schemas/Date'
            nextRun:
              $ref: '#/components/schemas/Date'
            lastResult:
              type: string
              example: 'Export job queueud'
            status:
              type: string
              example: scheduled
            type:
              type: string
              example: re.notifica.export.User
          type: object
    ExportScheduleBase:
      properties:
        active:
          type: boolean
          default: false
        frequency:
          type: string
          enum: [daily,hourly]
        hour:
          type: number
          example: 10
        minute:
          type: number
          example: 15
        source:
          properties:
            type:
              type: string
              enum: [re.notifica.storage.S3,re.notifica.storage.SFTP,re.notifica.storage.FTP,re.notifica.storage.AzureBlob,re.notifica.storage.GoogleCloud]
            config:
              oneOf:
                - $ref: '#/components/schemas/ExportStorageConfigS3'
                - $ref: '#/components/schemas/ExportStorageConfigSFTP'
                - $ref: '#/components/schemas/ExportStorageConfigFTP'
                - $ref: '#/components/schemas/ExportStorageConfigAzureBlob'
                - $ref: '#/components/schemas/ExportStorageConfigGoogleCloud'
        data:
          description: Data to be used for the export job created from this schedule, see export jobs for details
          additionalProperties: true
          example:
            all: true
            before: '2017-01-13'
            campaign: 5354f08474adc4183214c143
            fence: 5354f08474adc4183214c143
            includeTags: true
            notification: 5354f08474adc4183214c143
            region: 5354f08474adc4183214c143
            serial: 5354f08474adc4183214c143
            showCombinedSegments: true
            showPreferences: true
            showSegments:
              - 5354f08474adc4183214c143
            since: '2017-01-12'
            tagsSeparator: '|'
            type: re.notifica.event.application.Open
            useSegmentNames: true
            userID: 5354f08474adc4183214c143
            skipErrorEmails: false
            skipSuccessEmails: true
      type: object
      required:
        - source
    EventCreate:
      properties:
        data:
          additionalProperties:
            type: string
          example:
            test: a test value
            test2: another test
          type: object
    EventList:
      properties:
        events:
          type: array
          items:
            $ref: '#/components/schemas/EventModel'
        count:
          type: number
          example: 1
      type: object
    EventModel:
      allOf:
        - properties:
            _id:
              description: Notificare ID of the Event
              readOnly: true
              type: string
              example: 1d9e80ef851d212aca82cf23
            application:
              description: Application this event belongs to
              readOnly: true
              type: string
              example: 1d9e80ef851d212aca82cf23
          type: object
        - $ref: '#/components/schemas/EventBase'
    EventBase:
      properties:
        type:
          type: string
          example: re.notifica.event.application.Install
        time:
          $ref: '#/components/schemas/Date'
        sessionID:
          type: string
          example: 5SX4tAsd534MjuHL
        deviceID:
          type: string
          example: 00a9b9bf-c099-45aa-9278-64d6a3f22476
        subscriptionId:
          type: string
          description: The subscriptionId, i.e., push token for push, email address for email, phone number for SMS
          example: 00a9b9bf-c099-45aa-9278-64d6a3f22476
        userID:
          type: string
          example: 188720716616
      type: object
    EventCriteria:
      properties:
        data:
          properties:
            region:
              description: >-
                The region's id of an event of type re.notifica.event.region.Session or re.notifica.event.beacon.Session
              type: string
              example: 1d9e80ef851d212aca82cf23
            fence:
              description: >-
                The beacon's fence region id of an event of type re.notifica.event.beacon.Session
              type: string
              example: 1d9e80ef851d212aca82cf23
            pass:
              description: >-
                The pass id of an event of type re.notifica.event.pass.Add, re.notifica.event.pass.Remove or re.notifica.event.pass.Redeem
              type: string
              example: 1d9e80ef851d212aca82cf23
            serial:
              description: >-
                The pass serial of an event of type re.notifica.event.pass.Add, re.notifica.event.pass.Remove or re.notifica.event.pass.Redeem
              type: string
              format: uuid
            group:
              description: >-
                The asset group's id of an event of type re.notifica.event.asset.Load
              type: string
              example: 1d9e80ef851d212aca82cf23
            scannable:
              description: >-
                The scannable's id of an event of type re.notifica.event.scannable.Scan
              type: string
              example: 1d9e80ef851d212aca82cf23
            notification:
              description: >-
                The notification's id of an event of type re.notifica.event.notification.Sent,
                re.notifica.event.notification.Receive, re.notifica.event.notification.Open
                or re.notifica.event.notification.Influenced
              type: string
              example: 1d9e80ef851d212aca82cf23
          type: object
        dataFilter:
          description: >-
            Event data filter, to filter events based on custom event data values
          items:
            $ref: '#/components/schemas/DataFilterCriteria'
          type: array
        endDate:
          type: string
          format: 'date-time'
          description: defaults to now
        startDate:
          type: string
          format: 'date-time'
          description: defaults to now
        type:
          type: string
      required:
        - type
        - startDate
        - endDate
      type: object
    EventStats:
      properties:
        date:
          type: string
          format: 'date-time'
          example: '2014-02-01T00:00:00.000Z'
        count:
          description: Total number of events during this period
          type: number
          example: 1000
    EventTypeList:
      properties:
        types:
          type: array
          items:
            type: string
          example: [re.notifica.event.custom.Test]
      type: object
    ImportJobRegion:
      allOf:
        - $ref: '#/components/schemas/ImportJobBase'
        - properties:
            data:
              $ref: '#/components/schemas/ImportDataRegion'
          type: object
    ImportJobBeacon:
      allOf:
        - $ref: '#/components/schemas/ImportJobBase'
        - properties:
            data:
              $ref: '#/components/schemas/ImportDataBeacon'
          type: object
    ImportJobDevice:
      allOf:
        - $ref: '#/components/schemas/ImportJobBase'
        - properties:
            data:
              $ref: '#/components/schemas/ImportDataDevice'
          type: object
    ImportJobUser:
      allOf:
        - $ref: '#/components/schemas/ImportJobBase'
        - properties:
            data:
              $ref: '#/components/schemas/ImportDataUser'
          type: object
    ImportJobGroupedNotification:
      allOf:
        - $ref: '#/components/schemas/ImportJobBase'
        - properties:
            data:
              $ref: '#/components/schemas/ImportDataGroupedNotification'
          type: object
    ImportJobNotification:
      allOf:
        - $ref: '#/components/schemas/ImportJobBase'
        - properties:
            data:
              $ref: '#/components/schemas/ImportDataNotification'
          type: object
    ImportJobPass:
      allOf:
        - $ref: '#/components/schemas/ImportJobBase'
        - properties:
            data:
              $ref: '#/components/schemas/ImportDataPass'
          type: object
    ImportJobPassUpdate:
      allOf:
        - $ref: '#/components/schemas/ImportJobBase'
        - properties:
            data:
              $ref: '#/components/schemas/ImportDataPassUpdate'
          type: object
    ImportJobUserData:
      allOf:
        - $ref: '#/components/schemas/ImportJobBase'
        - properties:
            data:
              $ref: '#/components/schemas/ImportDataUserData'
          type: object
    ImportJobUserSegment:
      allOf:
        - $ref: '#/components/schemas/ImportJobBase'
        - properties:
            data:
              $ref: '#/components/schemas/ImportDataUserSegment'
          type: object
    ImportJobModelList:
      properties:
        importJobs:
          type: array
          items:
            $ref: '#/components/schemas/ImportJobModel'
        count:
          type: number
          example: 2
      type: object
    ImportJobModel:
      allOf:
        - $ref: '#/components/schemas/ImportJobBase'
        - properties:
            _id:
              $ref: '#/components/schemas/ObjectId'
            application:
              $ref: '#/components/schemas/ObjectId'
            data:
              oneOf:
                - $ref: '#/components/schemas/ImportDataDevice'
                - $ref: '#/components/schemas/ImportDataUser'
                - $ref: '#/components/schemas/ImportDataUserData'
                - $ref: '#/components/schemas/ImportDataUserSegment'
                - $ref: '#/components/schemas/ImportDataBeacon'
                - $ref: '#/components/schemas/ImportDataRegion'
                - $ref: '#/components/schemas/ImportDataPass'
                - $ref: '#/components/schemas/ImportDataPassUpdate'
                - $ref: '#/components/schemas/ImportDataNotification'
                - $ref: '#/components/schemas/ImportDataGroupedNotification'
            date:
              $ref: '#/components/schemas/Date'
            result:
              type: string
              example: 'imported 0 records, skipped 3 records'
            status:
              type: string
              example: success
            type:
              type: string
              example: re.notifica.import.UserSegment
          type: object
    ImportJobBase:
      properties:
        path:
          type: string
          example: /imports/647431c4dc3798f2a5ae147411a787e8d52447e365d7972ec4d8535/dfeba0ade92ad65ec8619d4464333facc95f5c2feb55df98a92a78
      type: object
      required:
        - path
    ImportScheduleModelList:
      properties:
        importJobs:
          type: array
          items:
            $ref: '#/components/schemas/ImportScheduleModel'
        count:
          type: number
          example: 2
      type: object
    ImportScheduleModel:
      allOf:
        - $ref: '#/components/schemas/ImportScheduleBase'
        - properties:
            _id:
              $ref: '#/components/schemas/ObjectId'
            application:
              $ref: '#/components/schemas/ObjectId'
            lastRun:
              $ref: '#/components/schemas/Date'
            nextRun:
              $ref: '#/components/schemas/Date'
            lastResult:
              type: string
              example: 'Import job queueud'
            status:
              type: string
              example: scheduled
            type:
              type: string
              example: re.notifica.import.UserSegment
          type: object
    ImportScheduleBase:
      properties:
        active:
          type: boolean
          default: false
        frequency:
          type: string
          enum: [daily,hourly]
        hour:
          type: number
          example: 10
        minute:
          type: number
          example: 15
        source:
          properties:
            type:
              type: string
              enum: [re.notifica.storage.S3,re.notifica.storage.SFTP,re.notifica.storage.FTP,re.notifica.storage.AzureBlob,re.notifica.storage.GoogleCloud]
            config:
              oneOf:
                - $ref: '#/components/schemas/ImportStorageConfigS3'
                - $ref: '#/components/schemas/ImportStorageConfigSFTP'
                - $ref: '#/components/schemas/ImportStorageConfigFTP'
                - $ref: '#/components/schemas/ImportStorageConfigAzureBlob'
                - $ref: '#/components/schemas/ImportStorageConfigGoogleCloud'
        data:
          oneOf:
            - $ref: '#/components/schemas/ImportDataDevice'
            - $ref: '#/components/schemas/ImportDataUser'
            - $ref: '#/components/schemas/ImportDataUserData'
            - $ref: '#/components/schemas/ImportDataUserSegment'
            - $ref: '#/components/schemas/ImportDataBeacon'
            - $ref: '#/components/schemas/ImportDataRegion'
            - $ref: '#/components/schemas/ImportDataPass'
            - $ref: '#/components/schemas/ImportDataPassUpdate'
            - $ref: '#/components/schemas/ImportDataNotification'
            - $ref: '#/components/schemas/ImportDataGroupedNotification'
      type: object
      required:
        - source
    ImportDataDevice:
      properties:
        overwrite:
          description: Overwrite previously imported devices that are not active
          type: boolean
          default: false
        forceOverwrite:
          description: Overwrite any existing device, only applicable together with `overwrite`
          type: boolean
          default: false
        includeTags:
          description: Import tags for the device
          type: boolean
          default: false
        tagsSeparator:
          description: Use this separator for tags
          type: string
          example: '|'
          default: '|'
        medium:
          description: Default medium
          type: string
          enum: [ push, email, sms ]
          default: push
        platform:
          description: Default platform
          type: string
          enum: [ iOS, tvOS, Android, Web ]
        transport:
          description: Default transport
          type: string
          enum: [ APNS, GCM, HMS, WebPush, WebsitePush, Email, SMS, Notificare ]
          default: Notificare
        osVersion:
          description: Default osVersion
          type: string
          example: 10
        sdkVersion:
          description: Default sdkVersion
          type: string
          example: 2.1.1
        appVersion:
          description: Default appVersion
          type: string
          example: 3.0
        osString:
          description: Default osString
          type: string
          example: Android 10
        deviceString:
          description: Default deviceString
          type: string
          example: Google Pixel 2
        language:
          description: Default language
          type: string
          example: nl
          default: en
        region:
          description: Default region
          type: string
          example: NL
        userID:
          description: Default userID
          type: string
          example: 188489101
        userName:
          description: Default userName
          type: string
          example: Test User
        verifyOnly:
          description: Only verify the import file
          type: boolean
        skipVerifiedEmails:
          description: >-
            Do not send emails when import is verified
          type: boolean
          default: false
        skipSuccessEmails:
          description: >-
            Do not send emails when export succeeds
          type: boolean
          default: false
      type: object
    ImportDataUser:
      properties:
        verifyOnly:
          description: Only verify the import file
          type: boolean
        skipErrorEmails:
          description: >-
            Do not send emails when import fails
          type: boolean
          default: false
        skipVerifiedEmails:
          description: >-
            Do not send emails when import is verified
          type: boolean
          default: false
        skipSuccessEmails:
          description: >-
            Do not send emails when export succeeds
          type: boolean
          default: false
      type: object
    ImportDataUserData:
      properties:
        ignoreEmptyValues:
          description: Ignore empty values, leave existing data as-is
          type: boolean
          default: false
        verifyOnly:
          description: Only verify the import file
          type: boolean
        skipErrorEmails:
          description: >-
            Do not send emails when import fails
          type: boolean
          default: false
        skipVerifiedEmails:
          description: >-
            Do not send emails when import is verified
          type: boolean
          default: false
        skipSuccessEmails:
          description: >-
            Do not send emails when export succeeds
          type: boolean
          default: false
      type: object
    ImportDataUserSegment:
      properties:
        userSegment:
          description: The segment to import into
          type: string
          example: 1d9e80ef851d212aca82cf23
        clear:
          description: Clear the segment before importing users
          type: boolean
          default: false
        push:
          description: Send a notification after importing users
          type: boolean
          default: false
        notificationTemplate:
          description: The template to use for the notification
          type: string
          example: 1d9e80ef851d212aca82cf23
        verifyOnly:
          description: Only verify the import file
          type: boolean
        skipErrorEmails:
          description: >-
            Do not send emails when import fails
          type: boolean
          default: false
        skipVerifiedEmails:
          description: >-
            Do not send emails when import is verified
          type: boolean
          default: false
        skipSuccessEmails:
          description: >-
            Do not send emails when export succeeds
          type: boolean
          default: false
      type: object
      required:
        - userSegment
    ImportDataBeacon:
      properties:
        overwrite:
          description: Overwrite existing beacon
          type: boolean
          default: false
        createRegion:
          description: Create region for beacon
          type: boolean
          default: false
        category:
          description: Category for region to create
          type: string
          example: poi
          default: fence
        distance:
          description: The distance for the region to create
          type: number
          example: 200
          default: 100
        timezone:
          description: The timezone to create the region for
          type: string
          example: Europe/Amsterdam
          default: UTC
        verifyOnly:
          description: Only verify the import file
          type: boolean
        skipErrorEmails:
          description: >-
            Do not send emails when import fails
          type: boolean
          default: false
        skipVerifiedEmails:
          description: >-
            Do not send emails when import is verified
          type: boolean
          default: false
        skipSuccessEmails:
          description: >-
            Do not send emails when export succeeds
          type: boolean
          default: false
      type: object
    ImportDataRegion:
      properties:
        overwrite:
          description: Overwrite existing region
          type: boolean
          default: false
        verifyOnly:
          description: Only verify the import file
          type: boolean
        skipErrorEmails:
          description: >-
            Do not send emails when import fails
          type: boolean
          default: false
        skipVerifiedEmails:
          description: >-
            Do not send emails when import is verified
          type: boolean
          default: false
        skipSuccessEmails:
          description: >-
            Do not send emails when export succeeds
          type: boolean
          default: false
      type: object
    ImportDataPass:
      properties:
        notificationTemplate:
          description: Use previously created template for messages
          type: string
          example: 1d9e80ef851d212aca82cf23
        notificationCriteria:
          $ref: '#/components/schemas/Criteria'
        passData:
          description: Pass data values if not given in import data
          properties:
            passFields:
              description: The fields in the pass that need to be updated if not given in import data
              additionalProperties:
                type: string
              example:
                from: AMS
                to: OPO
              type: object
            description:
              type: string
            relevantDate:
              type: string
              format: 'date-time'
            expirationDate:
              type: string
              format: 'date-time'
            beacon:
              description: A single beacon to use for relevance
              properties:
                proximityUUID:
                  type: string
                  format: 'uuid'
                major:
                  type: number
                minor:
                  type: number
                relevantText:
                  type: string
            beacons:
              type: array
              description: List of maximum 10 beacons, if no beacon is provided otherwise
              items:
                properties:
                  proximityUUID:
                    type: string
                    format: 'uuid'
                  major:
                    type: number
                  minor:
                    type: number
                  relevantText:
                    type: string
            location:
              description: >-
                A single location to use for relevance.
                Locations can be provided by lat/lon, by Notificare regionId or by Notificare region major
                and are processed in that order
              properties:
                latitude:
                  type: number
                longitude:
                  type: number
                altitude:
                  type: number
                relevantText:
                  type: string
                regionId:
                  $ref: '#/components/schemas/ObjectId'
                regionMajor:
                  type: number
            locations:
              type: array
              description: >-
                List of maximum 10 locations, if no location is provided otherwise
                Locations can only be provided by lat/lon
              items:
                properties:
                  latitude:
                    type: number
                  longitude:
                    type: number
                  altitude:
                    type: number
                  relevantText:
                    type: string
          type: object
        passbook:
          description: The pass template to use
          type: string
          example: 1d9e80ef851d212aca82cf23
        redeem:
          description: Set redeem type for new pass
          type: string
          enum: [ always, once, limit ]
          default: always
        limit:
          description: Set redeem limit for new pass
          type: number
          default: 0
        sendNotification:
          description: Send a notification after importing a new pass
          type: boolean
          default: false
        sendUpdateNotification:
          description: Send a notification if existing pass was updated
          type: boolean
          default: false
        verifyOnly:
          description: Only verify the import file
          type: boolean
        skipErrorEmails:
          description: >-
            Do not send emails when import fails
          type: boolean
          default: false
        skipVerifiedEmails:
          description: >-
            Do not send emails when import is verified
          type: boolean
          default: false
        skipSuccessEmails:
          description: >-
            Do not send emails when export succeeds
          type: boolean
          default: false
        ignorePlaceholderPrefix:
          description: >-
            Ignore the `notification_` prefix when mapping column to placeholders in the
            notification, e.g., column `notification_xxx` maps to placeholder `xxx` in the notification
          type: boolean
          default: false
      type: object
      required:
        - passbook
    ImportDataPassUpdate:
      properties:
        passData:
          description: Pass data values if not given in import data
          properties:
            passFields:
              description: The fields in the pass that need to be updated if not given in import data
              additionalProperties:
                type: string
              example:
                from: AMS
                to: OPO
              type: object
            description:
              type: string
            relevantDate:
              type: string
              format: 'date-time'
            expirationDate:
              type: string
              format: 'date-time'
            beacon:
              description: A single beacon to use for relevance
              properties:
                proximityUUID:
                  type: string
                  format: 'uuid'
                major:
                  type: number
                minor:
                  type: number
                relevantText:
                  type: string
            beacons:
              type: array
              description: List of maximum 10 beacons, if no beacon is provided otherwise
              items:
                properties:
                  proximityUUID:
                    type: string
                    format: 'uuid'
                  major:
                    type: number
                  minor:
                    type: number
                  relevantText:
                    type: string
            location:
              description: >-
                A single location to use for relevance.
                Locations can be provided by lat/lon, by Notificare regionId or by Notificare region major
                and are processed in that order
              properties:
                latitude:
                  type: number
                longitude:
                  type: number
                altitude:
                  type: number
                relevantText:
                  type: string
                regionId:
                  $ref: '#/components/schemas/ObjectId'
                regionMajor:
                  type: number
            locations:
              type: array
              description: >-
                List of maximum 10 locations, if no location is provided otherwise
                Locations can only be provided by lat/lon
              items:
                properties:
                  latitude:
                    type: number
                  longitude:
                    type: number
                  altitude:
                    type: number
                  relevantText:
                    type: string
          type: object
        passbook:
          description: The pass template to use
          type: string
          example: 1d9e80ef851d212aca82cf23
        verifyOnly:
          description: Only verify the import file
          type: boolean
        skipErrorEmails:
          description: >-
            Do not send emails when import fails
          type: boolean
          default: false
        skipVerifiedEmails:
          description: >-
            Do not send emails when import is verified
          type: boolean
          default: false
        skipSuccessEmails:
          description: >-
            Do not send emails when export succeeds
          type: boolean
          default: false
      type: object
      required:
        - passbook
    ImportDataNotification:
      properties:
        notificationTemplate:
          description: Use previously created template for messages
          type: string
          example: 1d9e80ef851d212aca82cf23
        notificationSchedule:
          description: Schedule message
          properties:
            time:
              description: >-
                The date and time (YYYY-MM-DD hh:mm) in which the message
                should be sent.
              type: string
              example: 2016-08-26 23:01
            timezone:
              description: >-
                The timezone of the time in which the message
                should be sent.
              type: string
              example: Europe/Amsterdam
          type: object
        notificationCriteria:
          $ref: '#/components/schemas/Criteria'
        medium:
          description: Medium to send to if no template given
          type: string
          enum: [ push, email, sms ]
          default: push
        verifyOnly:
          description: Only verify the import file
          type: boolean
        skipErrorEmails:
          description: >-
            Do not send emails when import fails
          type: boolean
          default: false
        skipVerifiedEmails:
          description: >-
            Do not send emails when import is verified
          type: boolean
          default: false
        skipSuccessEmails:
          description: >-
            Do not send emails when export succeeds
          type: boolean
          default: false
        ignorePlaceholderPrefix:
          description: >-
            Ignore the `notification_` prefix when mapping column to placeholders in the
            notification, e.g., column `notification_xxx` maps to placeholder `xxx` in the notification
          type: boolean
          default: false
      type: object
    ImportDataGroupedNotification:
      properties:
        notificationTemplate:
          description: Use previously created template for messages
          type: string
          example: 1d9e80ef851d212aca82cf23
        notificationSchedule:
          description: Schedule message
          properties:
            time:
              description: >-
                The date and time (YYYY-MM-DD hh:mm) in which the message
                should be sent.
              type: string
              example: 2016-08-26 23:01
            timezone:
              description: >-
                The timezone of the time in which the message
                should be sent.
              type: string
              example: Europe/Amsterdam
            local:
              description: >-
                If true, messages are sent at the local time of the recipient
              type: boolean
              default: false
          type: object
        notificationCriteria:
          $ref: '#/components/schemas/Criteria'
        verifyOnly:
          description: Only verify the import file
          type: boolean
        skipErrorEmails:
          description: >-
            Do not send emails when import fails
          type: boolean
          default: false
        skipVerifiedEmails:
          description: >-
            Do not send emails when import is verified
          type: boolean
          default: false
        skipSuccessEmails:
          description: >-
            Do not send emails when export succeeds
          type: boolean
          default: false
        ignorePlaceholderPrefix:
          description: >-
            Ignore the `notification_` prefix when mapping column to placeholders in the
            notification, e.g., column `notification_xxx` maps to placeholder `xxx` in the notification
          type: boolean
          default: false
      type: object
    LinkModelList:
      properties:
        links:
          type: array
          items:
            $ref: '#/components/schemas/LinkModel'
        count:
          type: number
          example: 2
      type: object
    LinkModel:
      allOf:
        - $ref: '#/components/schemas/LinkBase'
        - properties:
            _id:
              $ref: '#/components/schemas/ObjectId'
            application:
              $ref: '#/components/schemas/ObjectId'
            hash:
              type: string
              example: 50fUr-56
            opened:
              type: number
              example: 10
            uniqueOpened:
              type: number
              example: 5
          type: object
    LinkBase:
      properties:
        name:
          example: "Another Link"
          type: string
        type:
          example: "re.notifica.link.Redirect"
          type: string
          enum:
            - 're.notifica.link.Page'
            - 're.notifica.link.Redirect'
            - 're.notifica.link.Dynamic'
        prefix:
          example: myamazingapp
          type: string
          description: >-
            For type re.notifica.link.Dynamic, this is the prefix subdomain of the link.
            It can not be changed afterwards.
        target:
          type: object
          properties:
            web:
              example: "https://notifica.re/example"
              type: string
              format: uri
            ios:
              example: "https://notifica.re/example-ios"
              type: string
              format: uri
            android:
              example: "https://notifica.re/example-android"
              type: string
              format: uri
        showAppStore:
          type: boolean
          default: false
          description: >-
            For type re.notifica.link.Dynamic, this will redirect users to their respective app store if the app is not installed.
        rules:
          type: array
          items:
            $ref: '#/components/schemas/MessageRule'
        customEvents:
          type: array
          items:
            type: string
          example: [CustomEvent]
      type: object
      required:
        - name
        - type
        - target
    LinkPrefixModelList:
      properties:
        links:
          type: array
          items:
            $ref: '#/components/schemas/LinkPrefixModel'
        count:
          type: number
          example: 2
      type: object
    LinkPrefixModel:
      allOf:
        - $ref: '#/components/schemas/LinkPrefixBase'
        - properties:
            _id:
              $ref: '#/components/schemas/ObjectId'
            application:
              $ref: '#/components/schemas/ObjectId'
            active:
              type: boolean
              default: false
    LinkPrefixBase:
      properties:
        prefix:
          type: string
          example: myamazingapp
    LocationsCriteria:
      properties:
        locations:
          description: >-
            Filter or select devices based on their location.
            Locations can be circular or polygon-shaped.
          items:
            oneOf:
              - $ref: '#/components/schemas/Polygon'
              - $ref: '#/components/schemas/Circle'
          type: array
        quantifier:
          description: >-
            `all` means devices that are in all of these locations,
            `any` means devices that are in one or more of these locations,
            `none` means devices that are in none of these locations
          enum:
            - all
            - any
            - none
          type: string
      type: object
    MessageAction:
      properties:
        type:
          type: string
          example: 're.notifica.action.Callback'
        label:
          type: string
          example: Yes
        target:
          type: string
        keyboard:
          default: false
          type: boolean
        camera:
          default: false
          type: boolean
        rules:
          items:
            $ref: '#/components/schemas/MessageRule'
          type: array
      type: object
    MessageAttachment:
      properties:
        mimeType:
          description: the image mime type
          type: string
          example: 'image/jpeg'
        name:
          type: string
          example: Test Attachment
        uri:
          description: >-
            the URL to an image either uploaded into our platform or hosted in
            any public web server
          type: string
          format: uri
          example: 'https://domain.com/image'
      required:
        - uri
        - mimeType
      type: object
    MessageContent:
      properties:
        type:
          description: type according to the type of push message. Please refer to Content types for all available types
          type: string
          example: 're.notifica.content.HTML'
        data:
          description: data according to the type of push message. Please refer to Content types for all available types
          type: string
          example: '<h1>Hello</h1>'
      required:
        - type
        - data
      type: object
    MessageExtra:
      description: >-
        A valid one-level JSON object. This is useful if you need to
        send extra data that you will need to proccess soon the
        notification arrives.
      additionalProperties:
        type: string
      example:
        key1: value1
        key2: value2
      type: object
    MessageAttribution:
      description: >-
        A valid one-level JSON object. This is useful if you need to
        send attribution data that you will need to proccess when 
        a link is clicked in an email message.
      additionalProperties:
        type: string
      example:
        key1: value1
        key2: value2
      type: object
    MessageLights:
      description: >-
        An object containing a color string ("white", "red",
        "#rrggbb", "#aarrggbb") and the on/off time in milliseconds.
        Colors are only applicable to Android and will be displayed
        by hardware as accurately as possible.
      properties:
        color:
          description: Color string
          type: string
          example: red
        'off':
          description: OFF time in milliseconds
          type: number
          example: 500
        'on':
          description: ON time in milliseconds
          type: number
          example: 1000
      type: object
    MessageLocalizedContent:
      properties:
        actions:
          items:
            $ref: '#/components/schemas/MessageAction'
          type: array
        attachments:
          items:
            $ref: '#/components/schemas/MessageAttachment'
          type: array
        content:
          items:
            $ref: '#/components/schemas/MessageContent'
          type: array
        message:
          type: string
          example: Test Message
        subject:
          type: string
          example: Test Subject
        subtitle:
          type: string
          example: Test Subtitle
        title:
          type: string
          example: Test Title
      type: object
    MessageLocation:
      properties:
        distance:
          type: number
          example: 100
        latitude:
          type: number
          example: 52.17747
        longitude:
          type: number
          example: 4.1235
      required:
        - latitude
        - longitude
        - distance
      type: object
    MessageRule:
      properties:
        params:
          items:
            $ref: '#/components/schemas/ObjectId'
          type: array
        type:
          enum:
            - re.notifica.rule.segment.Add
            - re.notifica.rule.segment.Remove
            - re.notifica.rule.tag.Add
            - re.notifica.rule.tag.Remove
          type: string
      required:
        - type
        - params
      type: object
    MessageSender:
      description: >-
        An object containing the sender name and address for this
        template. Applicable only for email templates.
      properties:
        address:
          type: string
          example: massimo
          description: the local part of the email address
        name:
          type: string
          example: Massimo Gondoliere
      required:
        - name
        - address
      type: object
    NotificationLogModel:
      properties:
        _id:
          $ref: '#/components/schemas/ObjectId'
        application:
          $ref: '#/components/schemas/ObjectId'
        notification:
          $ref: '#/components/schemas/ObjectId'
        date:
          $ref: '#/components/schemas/Date'
        deviceID:
          type: string
          example: d31b6529
        message:
          type: string
          example: Invalid token size
        transport:
          type: string
          example: APNS
        dsn:
          type: object
          properties:
            action:
              type: string
              example: 'failed'
            status:
              type: string
              example: '4.4.7'
            diagnosticCode:
              type: string
              example: 'smtp; 554 4.4.7 Message expired: unable to deliver in 840 minutes.'
    NotificationInfoModel:
      properties:
        _id:
          $ref: '#/components/schemas/ObjectId'
        application:
          $ref: '#/components/schemas/ObjectId'
        notification:
          $ref: '#/components/schemas/ObjectId'
        status:
          type: string
          enum: [saved, gathering, sending, error, finished]
        gathering:
          type: boolean
          default: false
        duration:
          type: number
          example: 749
        queued:
          type: number
          example: 3
        sent:
          type: number
          example: 4
        fails:
          type: number
          example: 1
        devices:
          type: number
          example: 3
        users:
          type: number
          example: 2
        opened:
          type: number
          example: 2
        uniqueOpened:
          type: number
          example: 1
        replied:
          type: number
          example: 1
        replies:
          type: object
          properties:
            total:
              type: number
              example: 1
            unique:
              type: number
              example: 1
            seconds:
              type: number
              example: 10
            uniqueSeconds:
              type: number
              example: 10
            labels:
              type: array
              items:
                type: string
              example: [yes, no]
            perLabel:
              type: array
              items:
                type: number
              example: [1, 0]
        localized:
          type: object
          description: If notification has multiple languages, contains the info for each localized version of the notification, default language has key "default"
          example:
            default:
              sent: 3
              fails: 1
              opened: 2
              uniqueOpened: 1
              replied: 1
              replies:
                total: 1
                unique: 1
                seconds: 10
                uniqueSeconds: 10
                labels: [yes, no]
                perLabel: [1, 0]
            en:
              sent: 1
              fails: 0
              opened: 0
              uniqueOpened: 0
              replied: 0
              replies:
                total: 0
                unique: 0
                seconds: 0
                uniqueSeconds: 0
                labels: [yes, no]
                perLabel: [0, 0]
    NotificationPartialList:
      properties:
        partials:
          type: array
          items:
            $ref: '#/components/schemas/NotificationPartialModel'
        count:
          type: number
          example: 1
      type: object
    NotificationPartialModel:
      allOf:
        - $ref: '#/components/schemas/NotificationPartialBase'
        - properties:
            _id:
              $ref: '#/components/schemas/ObjectId'
            application:
              $ref: '#/components/schemas/ObjectId'
          type: object
    NotificationPartialBase:
      properties:
        medium:
          description: The medium of the message
          type: string
          enum: [ push, email, sms ]
          default: push
        key:
          description: The key for this partial
          type: string
          example: footer_partial
        criteria:
          $ref: '#/components/schemas/Criteria'
        priority:
          description: Priority if multiple partials match criteria
          type: number
          example: 0
        description:
          description: The key for this partial
          type: string
          example: footer_partial
        content:
          description: The content for this partial
          type: string
          example: 'This is the footer'
        languages:
          description: The localized languages for this partial
          type: array
          items:
            type: string
          example: [nl]
        localizedContent:
          description: The localized content for this partial
          type: array
          items:
            type: string
          example: ['Dit is de footer']
    NotificationList:
      properties:
        notifications:
          type: array
          items:
            $ref: '#/components/schemas/NotificationModel'
        count:
          type: number
          example: 1
      type: object
    NotificationModel:
      allOf:
        - $ref: '#/components/schemas/NotificationPushBase'
        - properties:
            _id:
              $ref: '#/components/schemas/ObjectId'
            application:
              $ref: '#/components/schemas/ObjectId'
            medium:
              description: The medium of the message
              type: string
              enum: [push, email, sms]
              default: push
              readOnly: true
            subject:
              description: Subject of your email message
              type: string
              example: Hello world
            sender:
              $ref: '#/components/schemas/MessageSender'
          type: object
    NotificationPushTriggered:
      allOf:
        - $ref: '#/components/schemas/NotificationPushBroadcast'
        - type: object
          properties:
            criteria:
              $ref: '#/components/schemas/Criteria'
    NotificationPushDevice:
      $ref: '#/components/schemas/NotificationPushBroadcast'
    NotificationPushUser:
      allOf:
        - $ref: '#/components/schemas/NotificationPushBroadcast'
        - type: object
          properties:
            tags:
              type: array
              items:
                type: string
              example: [tag1]
    NotificationPushTags:
      allOf:
        - $ref: '#/components/schemas/NotificationPushBroadcast'
        - type: object
          properties:
            tags:
              type: array
              items:
                type: string
              example: [tag1]
          required:
            - tags
    NotificationPushSegments:
      allOf:
        - $ref: '#/components/schemas/NotificationPushBroadcast'
        - type: object
          properties:
            segments:
              type: array
              items:
                $ref: '#/components/schemas/ObjectId'
            tags:
              type: array
              items:
                type: string
              example: [tag1]
          required:
            - segments
    NotificationPushCriteria:
      allOf:
        - $ref: '#/components/schemas/NotificationPushBase'
        - type: object
          properties:
            criteria:
              $ref: '#/components/schemas/Criteria'
          required:
            - criteria
    NotificationPushEvent:
      allOf:
        - $ref: '#/components/schemas/NotificationPushBroadcast'
        - type: object
          properties:
            eventCriteria:
              $ref: '#/components/schemas/EventCriteria'
            criteria:
              $ref: '#/components/schemas/Criteria'
          required:
            - eventCriteria
    NotificationPushBroadcast:
      allOf:
        - $ref: '#/components/schemas/NotificationPushBase'
        - type: object
          properties:
            location:
              $ref: '#/components/schemas/MessageLocation'
    NotificationPushBase:
      allOf:
        - $ref: '#/components/schemas/NotificationLocalizedBase'
        - type: object
          properties:
            type:
              description: >-
                Defines the type of content to show. Types of messages are
                represented by namespaces. Message types should match the
                following namespace: re.notifica.notification.*. Please refer
                to Message Types for all available types.
              type: string
              example: re.notifica.notification.Alert
            title:
              description: >-
                Small text shown in the device's lock screen or notification
                center. This field should be used as an helper text to the
                message. Please note that this is only supported by iOS 10 or
                higher or Android 5 or higher devices.
              type: string
              example: Hello world
            subtitle:
              description: >-
                Small text shown in the device's lock screen or notification
                center. This field should be used as an helper text to the
                message. Please note that this is only supported by iOS 10 or
                higher or Android 5 or higher devices.
              type: string
              example: Hello world
            message:
              description: >-
                Short and concise message. This is the first thing your user
                sees, make sure it is relevant and that somehow summarizes
                what you intend to say.
              type: string
              example: Hello world
            content:
              description: >-
                An array of Content objects according to the type of push
                message. Please refer to Content types for all available
                types.
              items:
                $ref: '#/components/schemas/MessageContent'
              type: array
            attachments:
              description: >-
                An object containing the URL to an image either uploaded into
                our platform or hosted in any public web server.
              items:
                $ref: '#/components/schemas/MessageAttachment'
              type: array
            ttl:
              description: >-
                Number of seconds the message will be attempted to be
                delivered by APNS, GCM or HMS.
              type: number
              example: 3600
            rules:
              description: >-
                Adds one or more rules to a notification. An array of rules
                objects. Please refer to Rules objects for all types
                available.
              items:
                $ref: '#/components/schemas/MessageRule'
              type: array
            actionCategory:
              description: >-
                Use a previously created Rich Push template for your message.
                Use the name of the template for this property and the actions
                in that template as the actions for this notification. This
                will enable actionable notifications from the notification
                center in both iOS and Android.
              type: string
              example: My Template
            actions:
              description: >-
                Adds one or more interactions to a notification. An array of
                Action objects. Please refer to Action objects for all types
                available.
              items:
                $ref: '#/components/schemas/MessageAction'
              type: array
            extra:
              $ref: '#/components/schemas/MessageExtra'
            attribution:
              $ref: '#/components/schemas/MessageAttribution'
            sound:
              description: >-
                Name of sound to play. `default` means use the default sound
                as set by the user, any other string will be looked up as
                sound file on the device (`mp3` on Android, `aiff` on iOS).
              type: string
              example: default
            lights:
              $ref: '#/components/schemas/MessageLights'
            channel:
              description: >-
                This is an Android only property. If the channel is defined in the app,
                the message will be sent to that channel, otherwise to the
                default channel.
              type: string
              example: important
            badge:
              description: >-
                This is an iOS only property. A badge will be displayed over
                your app icon whenever a notification arrives. Use a number
                from 1 to 9999.
              type: number
              example: 1
            presentation:
              description: >-
                In iOS (2.1 and higher), will set presentation mode for
                foreground messages.
                In Android (2.1 and higher), it will set the presentation
                parameter to true in the foreground message handler.
              type: boolean
            targetContentIdentifier:
              description: >-
                This is a iOS only property. It will be used to set a notification's targetContentIdentifier
              type: string
            requireInteraction:
              description: >-
                This is a Web only property. In WebPush, will set the requireInteraction
                flag to true
              type: boolean
              default: false
            renotify:
              description: >-
                This is a Web only property. In WebPush, will set the renotify
                flag to true
              type: boolean
              default: true
            relevanceScore:
              description: >-
                This is an iOS only property. Sets the relevance score between 0.0 and 1.0
              type: number
            interruptionLevel:
              description: >-
                This is an iOS only property. Sets the interruption level
              type: string
              enum: ['active', 'passive', 'timeSensitive', 'critical']
            critical:
              description: >-
                This is a iOS only property. It will be used to indicate this is a critical notification
              type: boolean
              default: false
            criticalSoundVolume:
              description: >-
                This is a iOS only property. It will be used to set a critical notification's sound volume
              type: number
              default: 0
            group:
              description: >-
                An identifier to be used by the operating systems in order to group specific notifications
                in the lock screen and notification center.
                Only supported in iOS 12 or higher and Android 6 or higher.
                In Android you must use our Notificare's SDK 2.1 or higher.
              type: string
              example: personal
            push:
              description: >-
                This property is only available for SDKs 1.8.0 and up. When
                false it will only create a message in the app's inbox and not
                generate a remote notification. By default this property will
                be true. Please note that this property will be ignored if
                Inbox is not being used.
              type: boolean
            openTracking:
              description: If set to false, will disable tracking of the message being opened
              type: boolean
              default: true
            linkTracking:
              description: If set to false, will disable tracking of clicks on links in the message
              type: boolean
              default: true
            inbox:
              description: >-
                This property is only available for SDKs 2.3.0 and up. When
                false it will not create a message in the app's inbox.
                By default this property will be true. Please note that this
                property will be ignored if Inbox is not being used.
            inboxTtl:
              description: >-
                This property is only available for SDKs 2.3.0 and up. When
                set it will expire the message in the device inbox after
                this amount of seconds. Please note that this
                property will be ignored if Inbox is not being used.
          required:
            - type
            - message
    NotificationFromTemplateDevice:
      $ref: '#/components/schemas/NotificationFromTemplateBroadcast'
    NotificationFromTemplateUser:
      allOf:
        - $ref: '#/components/schemas/NotificationFromTemplateBroadcast'
        - type: object
          properties:
            tags:
              type: array
              items:
                type: string
              example: [tag1]
    NotificationFromTemplateTags:
      allOf:
        - $ref: '#/components/schemas/NotificationFromTemplateBroadcast'
        - type: object
          properties:
            tags:
              type: array
              items:
                type: string
              example: [tag1]
          required:
            - tags
    NotificationFromTemplateSegments:
      allOf:
        - $ref: '#/components/schemas/NotificationFromTemplateBroadcast'
        - type: object
          properties:
            segments:
              type: array
              items:
                $ref: '#/components/schemas/ObjectId'
            tags:
              type: array
              items:
                type: string
              example: [tag1]
          required:
            - segments
    NotificationFromTemplateCriteria:
      allOf:
        - $ref: '#/components/schemas/NotificationFromTemplateBase'
        - type: object
          properties:
            criteria:
              $ref: '#/components/schemas/Criteria'
          required:
            - criteria
    NotificationFromTemplateEvent:
      allOf:
        - $ref: '#/components/schemas/NotificationFromTemplateBroadcast'
        - type: object
          properties:
            eventCriteria:
              $ref: '#/components/schemas/EventCriteria'
            criteria:
              $ref: '#/components/schemas/Criteria'
          required:
            - eventCriteria
    NotificationFromTemplateBroadcast:
      allOf:
        - $ref: '#/components/schemas/NotificationFromTemplateBase'
        - type: object
          properties:
            location:
              $ref: '#/components/schemas/MessageLocation'
    NotificationFromTemplateBase:
      properties:
        scheduled:
          description: >-
            When true will prevent the message from being sent.
            Additionally you will have to create a schedule task by
            calling the /notification/schedule.
          type: boolean
          default: false
        data:
          additionalProperties:
            type: string
            example:
              key1: value1
              key2: value2
          type: object
    NotificationSystemDevice:
      $ref: '#/components/schemas/NotificationSystemBase'
    NotificationSystemUser:
      allOf:
        - $ref: '#/components/schemas/NotificationSystemBase'
        - type: object
          properties:
            tags:
              type: array
              items:
                type: string
              example: [tag1]
    NotificationSystemBroadcast:
      allOf:
        - $ref: '#/components/schemas/NotificationSystemBase'
        - type: object
          properties:
            type:
              description: >-
                Defines a type of for your silent message. Types of notifications are
                represented by namespaces. Custom notification types should a reverse
                domain style string: com.domain.*.
              type: string
              example: your.domain.system.type
            criteria:
              $ref: '#/components/schemas/Criteria'
            segments:
              type: array
              items:
                $ref: '#/components/schemas/ObjectId'
            tags:
              type: array
              items:
                type: string
              example: [tag1]
            location:
              $ref: '#/components/schemas/MessageLocation'
          required:
            - type
    NotificationSystemBase:
      allOf:
        - $ref: '#/components/schemas/NotificationBase'
        - type: object
          properties:
            type:
              description: >-
                Defines a type of for your silent message. Types of notifications are
                represented by namespaces. Custom notification types should a reverse
                domain style string: com.domain.*.
              type: string
              example: your.domain.system.type
            extra:
              $ref: '#/components/schemas/MessageExtra'
          required:
            - type
    NotificationEmailTriggered:
      allOf:
        - $ref: '#/components/schemas/NotificationEmailBase'
        - type: object
          properties:
            criteria:
              $ref: '#/components/schemas/Criteria'
    NotificationEmailDevice:
      $ref: '#/components/schemas/NotificationEmailBroadcast'
    NotificationEmailUser:
      allOf:
        - $ref: '#/components/schemas/NotificationEmailBase'
        - type: object
          properties:
            tags:
              type: array
              items:
                type: string
              example: [tag1]
    NotificationEmailTags:
      allOf:
        - $ref: '#/components/schemas/NotificationEmailBase'
        - type: object
          properties:
            tags:
              type: array
              items:
                type: string
              example: [tag1]
          required:
            - tags
    NotificationEmailSegments:
      allOf:
        - $ref: '#/components/schemas/NotificationEmailBase'
        - type: object
          properties:
            segments:
              type: array
              items:
                $ref: '#/components/schemas/ObjectId'
            tags:
              type: array
              items:
                type: string
              example: [tag1]
          required:
            - segments
    NotificationEmailCriteria:
      allOf:
        - $ref: '#/components/schemas/NotificationEmailBase'
        - type: object
          properties:
            criteria:
              $ref: '#/components/schemas/Criteria'
          required:
            - criteria
    NotificationEmailEvent:
      allOf:
        - $ref: '#/components/schemas/NotificationEmailBase'
        - type: object
          properties:
            eventCriteria:
              $ref: '#/components/schemas/EventCriteria'
            criteria:
              $ref: '#/components/schemas/Criteria'
          required:
            - eventCriteria
    NotificationEmailBroadcast:
      $ref: '#/components/schemas/NotificationEmailBase'
    NotificationEmailBase:
      allOf:
        - $ref: '#/components/schemas/NotificationLocalizedBase'
        - type: object
          properties:
            type:
              description: >-
                Defines the type of content to show. Types of messages are
                represented by namespaces. Message types should match the
                following namespace: re.notifica.notification.*. Please refer
                to Message Types for all available types.
              type: string
              example: re.notifica.notification.Alert
            subject:
              description: >-
                Subject of your email message
              type: string
              example: Hello world
            content:
              description: >-
                An array of Content objects according to the type of push
                message. Please refer to Content types for all available
                types.
              items:
                $ref: '#/components/schemas/MessageContent'
              type: array
            attachments:
              items:
                $ref: '#/components/schemas/MessageAttachment'
              type: array
            sender:
              $ref: '#/components/schemas/MessageSender'
            rules:
              description: >-
                Adds one or more rules to a notification. An array of rules
                objects. Please refer to Rules objects for all types
                available.
              items:
                $ref: '#/components/schemas/MessageRule'
              type: array
          required:
            - type
            - subject
    NotificationSmsTriggered:
      allOf:
        - $ref: '#/components/schemas/NotificationSmsBase'
        - type: object
          properties:
            criteria:
              $ref: '#/components/schemas/Criteria'
    NotificationSmsDevice:
      $ref: '#/components/schemas/NotificationSmsBroadcast'
    NotificationSmsUser:
      allOf:
        - $ref: '#/components/schemas/NotificationSmsBase'
        - type: object
          properties:
            tags:
              type: array
              items:
                type: string
              example: [tag1]
    NotificationSmsTags:
      allOf:
        - $ref: '#/components/schemas/NotificationSmsBase'
        - type: object
          properties:
            tags:
              type: array
              items:
                type: string
              example: [tag1]
          required:
            - tags
    NotificationSmsSegments:
      allOf:
        - $ref: '#/components/schemas/NotificationSmsBase'
        - type: object
          properties:
            segments:
              type: array
              items:
                $ref: '#/components/schemas/ObjectId'
            tags:
              type: array
              items:
                type: string
              example: [tag1]
          required:
            - segments
    NotificationSmsCriteria:
      allOf:
        - $ref: '#/components/schemas/NotificationSmsBase'
        - type: object
          properties:
            criteria:
              $ref: '#/components/schemas/Criteria'
          required:
            - criteria
    NotificationSmsEvent:
      allOf:
        - $ref: '#/components/schemas/NotificationSmsBase'
        - type: object
          properties:
            eventCriteria:
              $ref: '#/components/schemas/EventCriteria'
            criteria:
              $ref: '#/components/schemas/Criteria'
          required:
            - eventCriteria
    NotificationSmsBroadcast:
      $ref: '#/components/schemas/NotificationSmsBase'
    NotificationSmsBase:
      allOf:
        - $ref: '#/components/schemas/NotificationLocalizedBase'
        - type: object
          properties:
            message:
              description: >-
                The text (140 characters) of your message.
              type: string
              example: Hello world
          required:
            - message
    NotificationLocalizedBase:
      allOf:
        - $ref: '#/components/schemas/NotificationBase'
        - type: object
          properties:
            languages:
              description: >-
                The list of localized content language identifiers used in
                localizedContent. When included, you must also provide a list
                of localizedContent objects in the same order.
              items:
                type: string
              example: [nl, pt]
              type: array
            localizedContent:
              description: >-
                Provides content for all the language identifiers provided in
                languages.
              items:
                $ref: '#/components/schemas/MessageLocalizedContent'
              type: array
    NotificationBase:
      properties:
        triggered:
          description: >-
            When true, this message is used for automations or geo-triggers
          type: boolean
          default: false
        aggregation:
          $ref: '#/components/schemas/ObjectId'
        scheduled:
          description: >-
            When true will prevent the message from being sent.
            Additionally you will have to create a schedule task by
            calling the /notification/schedule.
          type: boolean
          default: false
        rate:
          description: >-
            The rate at which we will send notifications in seconds. If
            provided, we will not send more than x messages per second.
          type: number
          example: 100
    NotificationStats:
      properties:
        date:
          type: string
          format: 'date-time'
          example: '2014-02-01T00:00:00.000Z'
        year:
          type: number
          example: 2014
        month:
          type: number
          example: 2
          default: 1
        day:
          type: number
          example: 1
          default: 1
        hour:
          type: number
          example: 2
          default: '0'
        count:
          description: Total number of notifications sent during this period
          type: number
          example: 1000
    NotificationTemplateList:
      properties:
        templates:
          type: array
          items:
            $ref: '#/components/schemas/NotificationTemplateModel'
        count:
          type: number
          example: 2
    NotificationTemplateModel:
      allOf:
        - properties:
            _id:
              $ref: '#/components/schemas/ObjectId'
            application:
              $ref: '#/components/schemas/ObjectId'
        - $ref: '#/components/schemas/NotificationTemplateBase'
    NotificationTemplateBase:
      properties:
        name:
          description: The name for your template.
          type: string
        medium:
          description: >-
            The channel which the template was created for. Accepted
            mediums are: push, email and sms.
          type: string
          default: push
          enum: [push, email, sms]
        type:
          description: >-
            Defines the type of content to show. Types of messages are
            represented by namespaces. Message types should match the
            following namespace: re.notifica.notification.*. Please
            refer to Message Types for all available types.
          type: string
        sender:
          $ref: '#/components/schemas/MessageSender'
        title:
          description: >-
            With SDK 1.9 and up, iOS 10 and up and Android 5 and up
            messages support a title which will be shown in the
            lock-screen or notification center.
          type: string
        subtitle:
          description: >-
            With SDK 1.9 and up, iOS 10 and up and Android 5 and up
            messages support a title which will be shown in the
            lock-screen or notification center.
          type: string
        message:
          description: >-
            Short and concise message. This is the first thing your user
            sees, make sure it is relevant and that somehow summarizes
            what you intend to say.
          type: string
        subject:
          description: The subject for an email template.
          type: string
        content:
          description: >-
            An array of Content objects according to the type of
            Notification. Please refer to Content types for all
            available types.
          items:
            $ref: '#/components/schemas/MessageContent'
          type: array
        attachments:
          description: >-
            An object containing the URL to an image either uploaded into
            our platform or hosted in any public web server.
          items:
            $ref: '#/components/schemas/MessageAttachment'
          type: array
        languages:
          description: >-
            The list of localized content language identifiers used in
            localizedContent. When included, you must also provide a
            list of localizedContent objects in the same order.
          items:
            type: string
          type: array
          example: [nl, pt]
        localizedContent:
          description: >-
            Provides content for all the language identifiers provided
            in languages.
          items:
            $ref: '#/components/schemas/MessageLocalizedContent'
          type: array
        ttl:
          description: >-
            Number of seconds the message will be attempted to be
            delivered by APNS, GCM or HMS.
          type: number
        rules:
          description: >-
            Adds one or more rules to a notification. An array of rules
            objects. Please refer to Rules objects for all types
            available.
          items: {}
          type: array
        actionCategory:
          description: >-
            Use a previously created Rich Push template for your
            message. Use the name of the template for this property and
            the actions in that template as the actions for this
            notification. This will enable actionable notifications from
            the notification center in both iOS and Android.
          type: string
        actions:
          description: >-
            Adds one or more interactions to a notification. An array of
            Action objects. Please refer to Action objects for all types
            available.
          items:
            $ref: '#/components/schemas/MessageAction'
          type: array
        extra:
          $ref: '#/components/schemas/MessageExtra'
        attribution:
          $ref: '#/components/schemas/MessageAttribution'
        sound:
          description: >-
            Name of sound to play. `default` means use the default sound
            as set by the user, any other string will be looked up as
            sound file on the device (`mp3` on Android, `aiff` on iOS).
          type: string
        lights:
          $ref: '#/components/schemas/MessageLights'
        channel:
          description: >-
            This is an Android only property. If the channel is defined in the app,
            the message will be sent to that channel, otherwise to the
            default channel.
          type: string
          example: important
        badge:
          description: >-
            This is a iOS only property. A badge will be displayed over
            your app icon whenever a notification arrives. Use a number
            from 1 to 9999.
          type: number
        presentation:
          description: >-
            In iOS (2.1 and higher), will set presentation mode for
            foreground messages.
            In Android (2.1 and higher), it will set the presentation
            parameter to true in the foreground message handler.
          type: boolean
        targetContentIdentifier:
          description: >-
            This is a iOS only property. It will be used to set a notification's targetContentIdentifier
          type: string
        requireInteraction:
          description: >-
            This is a Web only property. In WebPush, will set the requireInteraction
            flag to true
          type: boolean
        renotify:
          description: >-
            This is a Web only property. In WebPush, will set the renotify
            flag to true
          type: boolean
          default: true
        relevanceScore:
          description: >-
            This is an iOS only property. Sets the relevance score between 0.0 and 1.0
          type: number
        interruptionLevel:
          description: >-
            This is an iOS only property. Sets the interruption level
          type: string
          enum: ['active', 'passive', 'timeSensitive', 'critical']
        critical:
          description: >-
            This is a iOS only property. It will be used to indicate this is a critical notification
          type: boolean
          default: false
        criticalSoundVolume:
          description: >-
            This is a iOS only property. It will be used to set a critical notification's sound volume
          type: number
          default: 0
        group:
          description: >-
            An identifier to be used by the operating systems in order to group specific notifications
            in the lock screen and notification center.
            Only supported in iOS 12 or higher and Android 6 or higher.
            In Android you must use our Notificare's SDK 2.1 or higher.
          type: string
          example: personal
        push:
          description: >-
            Specify if this message should generate a remote
            notification. By default the value of this property is true.
          type: boolean
        inbox:
          description: >-
            This property is only available for SDKs 2.3.0 and up. When
            false it will not create a message in the app's inbox.
            By default this property will be true. Please note that this
            property will be ignored if Inbox is not being used.
        inboxTtl:
          description: >-
            This property is only available for SDKs 2.3.0 and up. When
            set it will expire the message in the device inbox after
            this amount of seconds. Please note that this
            property will be ignored if Inbox is not being used.
        openTracking:
          description: If set to false, will disable tracking of the message being opened
          type: boolean
          default: true
        linkTracking:
          description: If set to false, will disable tracking of clicks on links in the message
          type: boolean
          default: true
        rate:
          description: >-
            Number of messages per second that should be sent using this
            template.
          type: number
      required:
        - name
        - subject
        - message
    NotificationTestPushDevice:
      allOf:
        - $ref: '#/components/schemas/NotificationTestPushBase'
        - type: object
          properties:
            criteria:
              $ref: '#/components/schemas/Criteria'
    NotificationTestPushUser:
      allOf:
        - $ref: '#/components/schemas/NotificationTestPushBroadcast'
        - type: object
          properties:
            tags:
              type: array
              items:
                type: string
                example: [tag1]
    NotificationTestPushTags:
      allOf:
        - $ref: '#/components/schemas/NotificationTestPushBroadcast'
        - type: object
          properties:
            tags:
              type: array
              items:
                type: string
                example: [tag1]
          required:
            - tags
    NotificationTestPushSegments:
      allOf:
        - $ref: '#/components/schemas/NotificationTestPushBroadcast'
        - type: object
          properties:
            segments:
              type: array
              items:
                $ref: '#/components/schemas/ObjectId'
            tags:
              type: array
              items:
                type: string
                example: [tag1]
          required:
            - segments
    NotificationTestPushEvent:
      allOf:
        - $ref: '#/components/schemas/NotificationTestPushBase'
        - type: object
          properties:
            eventCriteria:
              $ref: '#/components/schemas/EventCriteria'
            criteria:
              $ref: '#/components/schemas/Criteria'
          required:
            - eventCriteria
    NotificationTestPushCriteria:
      allOf:
        - $ref: '#/components/schemas/NotificationTestPushBase'
        - type: object
          properties:
            criteria:
              $ref: '#/components/schemas/Criteria'
          required:
            - criteria
    NotificationTestPushBroadcast:
      allOf:
        - $ref: '#/components/schemas/NotificationTestPushBase'
        - type: object
          properties:
            location:
              $ref: '#/components/schemas/MessageLocation'
    NotificationTestPushBase:
      properties:
        message:
          description: >-
            Dummy message
          type: string
          example: Hello world
      required:
        - message
    NotificationTestEmailDevice:
      allOf:
        - $ref: '#/components/schemas/NotificationTestEmailBase'
        - type: object
          properties:
            criteria:
              $ref: '#/components/schemas/Criteria'
    NotificationTestEmailUser:
      allOf:
        - $ref: '#/components/schemas/NotificationTestEmailBase'
        - type: object
          properties:
            tags:
              type: array
              items:
                type: string
                example: [tag1]
    NotificationTestEmailTags:
      allOf:
        - $ref: '#/components/schemas/NotificationTestEmailBase'
        - type: object
          properties:
            tags:
              type: array
              items:
                type: string
                example: [tag1]
          required:
            - tags
    NotificationTestEmailSegments:
      allOf:
        - $ref: '#/components/schemas/NotificationTestEmailBase'
        - type: object
          properties:
            segments:
              type: array
              items:
                $ref: '#/components/schemas/ObjectId'
            tags:
              type: array
              items:
                type: string
                example: [tag1]
          required:
            - segments
    NotificationTestEmailEvent:
      allOf:
        - $ref: '#/components/schemas/NotificationTestEmailBase'
        - type: object
          properties:
            eventCriteria:
              $ref: '#/components/schemas/EventCriteria'
            criteria:
              $ref: '#/components/schemas/Criteria'
          required:
            - eventCriteria
    NotificationTestEmailCriteria:
      allOf:
        - $ref: '#/components/schemas/NotificationTestEmailBase'
        - type: object
          properties:
            criteria:
              $ref: '#/components/schemas/Criteria'
          required:
            - criteria
    NotificationTestEmailBase:
      properties:
        subject:
          description: >-
            Dummy subject
          type: string
          example: Hello world
      required:
        - subject
    NotificationTestSmsDevice:
      allOf:
        - $ref: '#/components/schemas/NotificationTestSmsBase'
        - type: object
          properties:
            criteria:
              $ref: '#/components/schemas/Criteria'
    NotificationTestSmsUser:
      allOf:
        - $ref: '#/components/schemas/NotificationTestSmsBase'
        - type: object
          properties:
            tags:
              type: array
              items:
                type: string
                example: [tag1]
    NotificationTestSmsTags:
      allOf:
        - $ref: '#/components/schemas/NotificationTestSmsBase'
        - type: object
          properties:
            tags:
              type: array
              items:
                type: string
                example: [tag1]
          required:
            - tags
    NotificationTestSmsSegments:
      allOf:
        - $ref: '#/components/schemas/NotificationTestSmsBase'
        - type: object
          properties:
            segments:
              type: array
              items:
                $ref: '#/components/schemas/ObjectId'
            tags:
              type: array
              items:
                type: string
                example: [tag1]
          required:
            - segments
    NotificationTestSmsEvent:
      allOf:
        - $ref: '#/components/schemas/NotificationTestSmsBase'
        - type: object
          properties:
            eventCriteria:
              $ref: '#/components/schemas/EventCriteria'
            criteria:
              $ref: '#/components/schemas/Criteria'
          required:
            - eventCriteria
    NotificationTestSmsCriteria:
      allOf:
        - $ref: '#/components/schemas/NotificationTestSmsBase'
        - type: object
          properties:
            criteria:
              $ref: '#/components/schemas/Criteria'
          required:
            - criteria
    NotificationTestSmsBase:
      properties:
        message:
          description: >-
            Dummy message
          type: string
          example: Hello world
      required:
        - message
    ObjectId:
      type: string
      example: 1d9e80ef851d212aca82cf23
    PassField:
      properties:
        key:
          type: string
        label:
          type: string
        value:
          type: string
        string:
          type: boolean
        number:
          type: boolean
        date:
          type: boolean
        attributedValue:
          type: string
          example: '<a href="http://example.com/customers/123">Edit my profile</a>'
        changeMessage:
          description: The message to display in a notification when the value changes
          type: string
          example: 'Gate changed to %@'
        dataDetectorTypes:
          type: string
          enum: [PKDataDetectorTypePhoneNumber, PKDataDetectorTypeLink, PKDataDetectorTypeAddress, PKDataDetectorTypeCalendarEvent]
        textAlignment:
          type: string
          enum: [PKTextAlignmentLeft, PKTextAlignmentCenter, PKTextAlignmentRight, PKTextAlignmentNatural]
        dateStyle:
          type: string
          enum: [PKDateStyleNone, PKDateStyleShort, PKDateStyleMedium, PKDateStyleLong, PKDateStyleFull]
        timeStyle:
          type: string
          enum: [PKDateStyleNone, PKDateStyleShort, PKDateStyleMedium, PKDateStyleLong, PKDateStyleFull]
        ignoresTimeZone:
          type: boolean
          default: false
        isRelative:
          type: boolean
          default: false
        currencyCode:
          type: string
          example: EUR
        numberStyle:
          type: string
          enum: [PKNumberStyleDecimal, PKNumberStylePercent, PKNumberStyleScientific, PKNumberStyleSpellOut]
    PassFieldsData:
      allOf:
        - $ref: '#/components/schemas/PassRootData'
        - properties:
            fields:
              type: object
              description: The values for each field in the pass
              additionalProperties:
                type: string
              example:
                origin: AMS
                destination: OPO
                gate: D3
                seat: 42A
    PassData:
      allOf:
        - $ref: '#/components/schemas/PassRootData'
        - properties:
            auxiliaryFields:
              type: array
              items:
                $ref: '#/components/schemas/PassField'
            backFields:
              type: array
              items:
                $ref: '#/components/schemas/PassField'
            headerFields:
              type: array
              items:
                $ref: '#/components/schemas/PassField'
            primaryFields:
              type: array
              items:
                $ref: '#/components/schemas/PassField'
            secondaryFields:
              type: array
              items:
                $ref: '#/components/schemas/PassField'
    PassRootData:
      description: >-
        The data object containing all the information, colours and
        fields for a pass.
        If cloned from a passbook template, the fields
        (headerFields, primaryFields, secondaryFields,
        auxiliaryFields, backFields) should be updated
        with a value property.
      properties:
        appLaunchURL:
          type: string
          description: A URL to be passed to the associated app when launching it.
          format: uri
        associatedStoreIdentifiers:
          description: A list of iTunes Store item identifiers for the associated apps.
          type: array
          items:
            type: number
        userInfo:
          description: Custom information for companion apps. This data is not displayed to the user.
          additionalProperties: true
        expirationDate:
          type: string
          format: 'date-time'
        voided:
          description: Indicates that the pass is void
          type: boolean
          default: false
        beacons:
          type: array
          items:
            properties:
              proximityUUID:
                type: string
              major:
                type: string
              minor:
                type: string
              relevantText:
                description: Text displayed on the lock screen when the pass is currently relevant.
                type: string
            required:
              - proximityUUID
        locations:
          type: array
          items:
            properties:
              latitude:
                type: number
              longitude:
                type: number
              altitude:
                type: number
              relevantText:
                description: Text displayed on the lock screen when the pass is currently relevant.
                type: string
            required:
              - latitude
              - longitude
        maxDistance:
          description: >-
            Maximum distance in meters from a relevant latitude and longitude that the pass is relevant.
            This number is compared to the pass’s default distance and the smaller value is used.
          type: number
          example: 100
        relevantDate:
          description: Date and time when the pass becomes relevant.
          type: string
          format: 'date-time'
        nfc:
          properties:
            message:
              type: string
            encryptionPublicKey:
              type: string
              format: byte
        background:
          type: string
          format: uri
          example: https://push.notifica.re/upload/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/aa2a7d561c6ba9f99f169a38a92dc0ac98d5f5a6cec0b4bea447e62e70e0ea96
        backgroundColor:
          type: string
          example: 'rgb(0,0,0)'
        barcode:
          description: >-
            The barcode to display. Value of the barcode is taken from the Pass object.
            Here, the format and display of a human-readable text can be configured.
          properties:
            format:
              type: string
              example: PKBarcodeFormatQR
            messageEncoding:
              type: string
              example: iso-8859-1
            altText:
              description: >-
                The human-readable text to display next to the barcode.
                Alternatively, if set to true, will display the barcode value,
                if set to false, will not display a human-readable barcode
              type: string
        description:
          type: string
          example: coupon example
        footer:
          type: string
          format: uri
          example: https://push.notifica.re/upload/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/aa2a7d561c6ba9f99f169a38a92dc0ac98d5f5a6cec0b4bea447e62e70e0ea96
        foregroundColor:
          type: string
          example: 'rgb(255,255,255)'
        icon:
          type: string
          format: uri
          example: https://push.notifica.re/upload/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/aa2a7d561c6ba9f99f169a38a92dc0ac98d5f5a6cec0b4bea447e62e70e0ea96
        labelColor:
          type: string
          example: 'rgb(255,255,255)'
        logo:
          type: string
          format: uri
          example: https://push.notifica.re/upload/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/aa2a7d561c6ba9f99f169a38a92dc0ac98d5f5a6cec0b4bea447e62e70e0ea96
        logoText:
          type: string
          example: Notificare
        strip:
          type: string
          format: uri
          example: https://push.notifica.re/upload/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/aa2a7d561c6ba9f99f169a38a92dc0ac98d5f5a6cec0b4bea447e62e70e0ea96
        suppressStripShine:
          type: boolean
          default: false
        thumbnail:
          type: string
          format: uri
          example: https://push.notifica.re/upload/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/aa2a7d561c6ba9f99f169a38a92dc0ac98d5f5a6cec0b4bea447e62e70e0ea96
        transitType:
          type: string
          enum: [PKTransitTypeAir, PKTransitTypeBoat, PKTransitTypeTrain, PKTransitTypeBus, PKTransitTypeGeneric]
    PassList:
      properties:
        passes:
          type: array
          items:
            $ref: '#/components/schemas/PassModel'
        count:
          type: number
          example: 10
    PassModel:
      allOf:
        - properties:
            _id:
              $ref: '#/components/schemas/ObjectId'
            application:
              $ref: '#/components/schemas/ObjectId'
            passbook:
              $ref: '#/components/schemas/ObjectId'
            barcode:
              type: string
              example: 18847737723
            redeemHistory:
              type: array
              items:
                properties:
                  date:
                    type: string
                    format: 'date-time'
                  comments:
                    type: string
        - $ref: '#/components/schemas/PassBase'
    PassCreate:
      properties:
        passbook:
          $ref: '#/components/schemas/ObjectId'
        barcode:
          type: string
          example: 18847737723
        data:
          $ref: '#/components/schemas/PassData'
        limit:
          description: >-
            When using `limit` as a redeem option, you should provide
            the number of times the card can be redeemed.
          type: number
        redeem:
          description: >-
            A pass supports one of 3 modes (always, once, limit) for
            redemption.
          enum:
            - always
            - once
            - limit
          type: string
      required:
        - passbook
        - redeem
        - data
    PassPassbookCreate:
      properties:
        passbook:
          $ref: '#/components/schemas/ObjectId'
        barcode:
          type: string
          example: 18847737723
        data:
          $ref: '#/components/schemas/PassFieldsData'
        limit:
          description: >-
            When using `limit` as a redeem option, you should provide
            the number of times the card can be redeemed.
          type: number
        redeem:
          description: >-
            A pass supports one of 3 modes (always, once, limit) for
            redemption.
          enum:
            - always
            - once
            - limit
          type: string
      required:
        - data
    PassFieldsUpdate:
      properties:
        data:
          $ref: '#/components/schemas/PassFieldsData'
        limit:
          description: >-
            When using `limit` as a redeem option, you should provide
            the number of times the card can be redeemed.
          type: number
        redeem:
          description: >-
            A pass supports one of 3 modes (always, once, limit) for
            redemption.
          enum:
            - always
            - once
            - limit
          type: string
    PassBase:
      properties:
        data:
          $ref: '#/components/schemas/PassData'
        limit:
          description: >-
            When using `limit` as a redeem option, you should provide
            the number of times the card can be redeemed.
          type: number
        redeem:
          description: >-
            A pass supports one of 3 modes (always, once, limit) for
            redemption.
          enum:
            - always
            - once
            - limit
          type: string
    PassbookList:
      properties:
        passbooks:
          type: array
          items:
            $ref: '#/components/schemas/PassbookModel'
        count:
          type: number
          example: 10
    PassbookModel:
      allOf:
        - properties:
            _id:
              $ref: '#/components/schemas/ObjectId'
            application:
              $ref: '#/components/schemas/ObjectId'
        - $ref: '#/components/schemas/PassbookCreate'
    PassbookCreate:
      properties:
        data:
          $ref: '#/components/schemas/PassData'
        passStyle:
          description: >-
            A pass template can have several styles. A style will define
            how your pass looks and behaves. This string will indicate
            what style to use (boarding, coupon, ticket, card, generic).
          type: string
          enum: [coupon, boarding, ticket, card, generic]
        name:
          type: string
          example: coupon example
      required:
        - passStyle
        - data
        - name
      type: object
    Permissions:
      description: The permisssions an account has, matching the access role
      properties:
        AUDIENCE_READ:
          type: boolean
          example: true
        AUDIENCE_WRITE:
          type: boolean
          example: true
        CAMPAIGNS:
          type: boolean
          example: true
        LOCATIONS:
          type: boolean
          example: true
        AUTOMATIONS:
          type: boolean
          example: true
        TRIGGERS:
          type: boolean
          example: true
        SCANNABLES:
          type: boolean
          example: true
        LINKS:
          type: boolean
          example: true
        LOYALTY:
          type: boolean
          example: true
        IN_APP_PURCHASE:
          type: boolean
          example: true
        MESSAGES_READ:
          type: boolean
          example: true
        MESSAGES_WRITE:
          type: boolean
          example: true
        MESSAGES_SEND:
          type: boolean
          example: true
        EVENTS:
          type: boolean
          example: true
        STATS:
          type: boolean
          example: true
        REPORTS:
          type: boolean
          example: true
        EXPORTS:
          type: boolean
          example: true
        IMPORTS:
          type: boolean
          example: true
        STORAGE:
          type: boolean
          example: true
        SETTINGS:
          type: boolean
          example: true
        RETENTION:
          type: boolean
          example: true
        SHARE:
          type: boolean
          example: true
        DISTRIBUTE:
          type: boolean
          example: true
        DELETE:
          type: boolean
          example: true
    ProductCreate:
      allOf:
        - $ref: '#/components/schemas/ProductBase'
        - type: object
          properties:
            identifier:
              type: string
              example: re.notifica.office.consumable
            name:
              type: string
              example: Consumable
            type:
              type: string
              enum: [consumable, onetime, subscription]
          required:
            - name
            - type
            - identifier
    ProductList:
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/ProductModel'
        count:
          type: number
          example: 2
      type: object
    ProductModel:
      allOf:
        - $ref: '#/components/schemas/ProductBase'
        - type: object
          properties:
            _id:
              $ref: '#/components/schemas/ObjectId'
            application:
              $ref: '#/components/schemas/ObjectId'
    ProductBase:
      properties:
        active:
          type: boolean
        identifier:
          type: string
          example: re.notifica.office.consumable
        name:
          type: string
          example: Consumable
        stores:
          items:
            type: string
            enum: [AppStore, GooglePlay]
            example:
              - AppStore
              - GooglePlay
          type: array
        type:
          type: string
          enum: [consumable, onetime, subscription]
      type: object
    Point:
      properties:
        coordinates:
          $ref: '#/components/schemas/Coordinates'
        type:
          type: string
          enum: [Point]
      required:
        - coordinates
        - type
      type: object
    Polygon:
      properties:
        coordinates:
          items:
            $ref: '#/components/schemas/CoordinatesRing'
          type: array
        type:
          type: string
          enum: [Polygon]
      required:
        - coordinates
        - type
      type: object
    PropertiesCriteria:
      description: >-
        A list of filters for device properties. The results are intersected / AND'ed
      items:
        $ref: '#/components/schemas/PropertiesCriterion'
      type: array
    PropertiesCriterion:
      properties:
        operator:
          description: >-
            Filter or select devices based on the value of their properties.
            `eq` means equal
            `ne` means not equal
            `lt` means less than, string-compared
            `lte` means less than or equal, string-compared
            `gt` means greater than, string-compared
            `gte` means greater than or equal, string-compared
            `in` means in, needs an array of values
            `nin` means not in, needs an array of values
            `sw` means starts with, only for string values
          enum:
            - eq
            - ne
            - lt
            - lte
            - gt
            - gte
            - in
            - nin
            - sw
          type: string
        property:
          description: >-
            Filter or select devices based on the value of their properties.
          type: string
          enum: [osVersion,sdkVersion,appVersion,transport,platform,origin,timeZoneOffset,language,region,country,autoGenerated,allowedUI,lastActive,lastActiveSeconds,registrationDate,registrationDateSeconds]
          example: platform
        value:
          oneOf:
            - type: string
            - type: array
              items:
                type: string
          example: Android
      type: object
    ResponseMessageFileInfo:
      allOf:
        - $ref: '#/components/schemas/ResponseMessage'
        - properties:
            fileInfo:
              properties:
                contentLength:
                  type: number
                lastModified:
                  type: number
    ResponseKeyCreated:
      allOf:
        - $ref: '#/components/schemas/ResponseCreated'
        - properties:
            key:
              type: string
          type: object
    ResponseMessageCreated:
      allOf:
        - $ref: '#/components/schemas/ResponseCreated'
        - $ref: '#/components/schemas/ResponseMessage'
    ResponseError:
      properties:
        error:
          type: string
      required:
        - error
      type: object
    ResponseMessageCount:
      allOf:
        - $ref: '#/components/schemas/ResponseMessage'
        - properties:
            count:
              type: number
              example: 2
          required:
            - count
          type: object
    ResponseStatus:
      properties:
        status:
          type: string
      required:
        - status
      type: object
    ResponseMessage:
      properties:
        message:
          type: string
      required:
        - message
      type: object
    ResponseCreated:
      type: object
      properties:
        _id:
          $ref: '#/components/schemas/ObjectId'
    ResponseDeviceCreated:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ObjectId'
        deviceID:
          type: string
          format: 'uuid'
    SegmentsCriteria:
      properties:
        quantifier:
          description: >-
            `all` means users that are in all of these segments,
            `any` means users that are in one or more of these segments,
            `none` means users that are in none of these segments
          enum:
            - all
            - any
            - none
          type: string
        segments:
          description: >-
            Filter or select users based on these segments.
          items:
            $ref: '#/components/schemas/ObjectId'
          type: array
      type: object
    ExportStorageConfigS3:
      allOf:
        - $ref: '#/components/schemas/StorageConfigS3'
        - properties:
            prefix:
              description: prefix of the file
              type: string
              example: /test
            fileName:
              description: file name of the export file, generated if omitted
              type: string
              example: test.csv
    ImportStorageConfigS3:
      allOf:
        - $ref: '#/components/schemas/StorageConfigS3'
        - properties:
            path:
              description: full path to the file
              type: string
              example: /test/test.csv
          required:
            - path
    StorageConfigS3:
      properties:
        region:
          type: string
          example: eu-west-1
        bucket:
          type: string
          example: notificare-test
        key:
          description: AWS Access Key Id
          type: string
          example: AKIAKADE7A77489A
        secret:
          description: AWS Secret Access Key
          type: string
          example: =aJs9aa9jthayaJKIainjaioo9hash8d88sh+shha8
      required:
        - region
        - bucket
        - key
        - secret
    ExportStorageConfigSFTP:
      allOf:
        - $ref: '#/components/schemas/StorageConfigSFTP'
        - properties:
            prefix:
              description: directory of the file
              type: string
              example: /test
            fileName:
              description: file name of the export file, generated if omitted
              type: string
              example: test.csv
    ImportStorageConfigSFTP:
      allOf:
        - $ref: '#/components/schemas/StorageConfigSFTP'
        - properties:
            path:
              description: full path to the file
              type: string
              example: /test/test.csv
          required:
            - path
    StorageConfigSFTP:
      properties:
        host:
          type: string
          example: test.example.com
        port:
          type: number
          default: 22
        username:
          type: string
          example: testuser
        password:
          description: password for the user if using password authentication
          type: string
          example: s3cr3t
        privateKey:
          description: private key for the user if using public key authentication
          type: string
          example: '-----BEGIN RSA PRIVATE KEY-----\nProc-Type: 4,ENCRYPTED\nDEK-Info: DES-EDE3-CBC\n\n\n-----END RSA PRIVATE KEY-----'
        passphrase:
          description: optional passphrase for the key if using public key authentication
          type: string
      required:
        - host
        - username
    ExportStorageConfigFTP:
      allOf:
        - $ref: '#/components/schemas/StorageConfigFTP'
        - properties:
            prefix:
              description: directory of the file
              type: string
              example: /test
            fileName:
              description: file name of the export file, generated if omitted
              type: string
              example: test.csv
    ImportStorageConfigFTP:
      allOf:
        - $ref: '#/components/schemas/StorageConfigFTP'
        - properties:
            path:
              description: full path to the file
              type: string
              example: /test/test.csv
          required:
            - path
    StorageConfigFTP:
      properties:
        host:
          type: string
          example: test.example.com
        port:
          type: number
          default: 21
        username:
          type: string
          example: testuser
        password:
          description: password for the user
          type: string
          example: s3cr3t
        secret:
          description: use TLS
          type: boolean
        allowSelfSignedCertificate:
          description: allow self-signed certificate when using TLS
          type: boolean
      required:
        - host
        - username
        - password
    ExportStorageConfigAzureBlob:
      allOf:
        - $ref: '#/components/schemas/StorageConfigAzureBlob'
        - properties:
            prefix:
              description: directory of the file
              type: string
              example: /test
            fileName:
              description: file name of the export file, generated if omitted
              type: string
              example: test.csv
    ImportStorageConfigAzureBlob:
      allOf:
        - $ref: '#/components/schemas/StorageConfigAzureBlob'
        - properties:
            path:
              description: full path to the file
              type: string
              example: /test/test.csv
          required:
            - path
    StorageConfigAzureBlob:
      properties:
        container:
          type: string
          example: notificare-test
        account:
          type: string
          example: notificare
        key:
          description: password for the user
          type: string
          example: DJIdjaurbbandfu7w7785jnabasnaiija+a9a9jc91md9
      required:
        - container
        - account
        - key
    ExportStorageConfigGoogleCloud:
      allOf:
        - $ref: '#/components/schemas/StorageConfigGoogleCloud'
        - properties:
            prefix:
              description: directory of the file
              type: string
              example: /test
            fileName:
              description: file name of the export file, generated if omitted
              type: string
              example: test.csv
    ImportStorageConfigGoogleCloud:
      allOf:
        - $ref: '#/components/schemas/StorageConfigGoogleCloud'
        - properties:
            path:
              description: full path to the file
              type: string
              example: /test/test.csv
          required:
            - path
    StorageConfigGoogleCloud:
      properties:
        bucket:
          type: string
          example: test.notifica.re
        projectId:
          type: string
          example: notificare-test
        clientEmail:
          description: email address of the service account
          type: string
          example: test@notificare-test.iam.gserviceaccount.com
        privateKey:
          description: key for the service account
          type: string
          example: -----BEGIN PRIVATE KEY-----\n\n-----END PRIVATE KEY-----\n
      required:
        - bucket
        - projectId
        - clientEmail
        - privateKey
    TagsCriteria:
      properties:
        tags:
          description: >-
            Filter or select devices based on these tags.
          items:
            type: string
            example: tag_test
          type: array
        quantifier:
          description: >-
            `all` means devices that have all these tags,
            `any` means devices that have one or more of these tags,
            `none` means devices that have none of these tags
          enum:
            - all
            - any
            - none
          type: string
      type: object
    TriggerList:
      properties:
        triggers:
          type: array
          items:
            $ref: '#/components/schemas/TriggerModel'
        count:
          type: number
          example: 10
    TriggerModel:
      allOf:
        - $ref: '#/components/schemas/TriggerBase'
        - properties:
            _id:
              $ref: '#/components/schemas/ObjectId'
            application:
              $ref: '#/components/schemas/ObjectId'
            source:
              description: >-
                The region or beacon this trigger is attached to. See notes
                above.
              type: string
    TriggerCreate:
      allOf:
        - $ref: '#/components/schemas/TriggerBase'
        - properties:
            name:
              description: The name as it appears in the list.
              type: string
            source:
              description: >-
                The region or beacon this trigger is attached to. See notes
                above.
              type: string
    TriggerBase:
      properties:
        active:
          description: This trigger is active or not.
          type: boolean
          default: false
        criteria:
          $ref: '#/components/schemas/Criteria'
        campaign:
          description: >-
            If a trigger belongs to a campaing, this is the campaign id
          readOnly: true
          example: 1d9e80ef851d212aca82cf23
          type: string
        dayEnd:
          description: Triggers will not fire after this time of day.
          type: string
          example: 18:00
        dayStart:
          description: Triggers will not fire before this time of day.
          type: string
          example: 10:00
        delayMinutes:
          description: >-
            Trigger will fire after this amount of minutes, if not
            canceled by the opposite geo-transition.
          type: number
          example: 0
        frequency:
          description: >-
            How often the trigger should be fired. Can be `once`,
            `always` or `time`. The latter value requires an interval to
            be provided.
          enum:
            - once
            - always
            - time
          type: string
        interval:
          description: >-
            Minimal interval in seconds before a trigger will be fired
            again.
          type: number
          example: 86400
        name:
          description: The name as it appears in the list.
          example: Enter Rotterdam
          type: string
        notAfter:
          description: Triggers will not fire after this date.
          type: string
          format: 'date-time'
        notBefore:
          description: Triggers will not fire before this date.
          type: string
          format: 'date-time'
        notification:
          description: >-
            Previously created notification to be sent when trigger is
            fired. See notes above.
          type: string
          example: 1d9e80ef851d212aca82cf23
        occasion:
          description: Only fire the nth time
          type: number
          example: 2
        rules:
          description: >-
            Rules to be executed upon firing of this trigger. See
            Notifications for an overview of rules.
          items:
            $ref: '#/components/schemas/MessageRule'
          type: array
        skipDays:
          description: Triggers will not fire on any of these days. Sunday is `0`.
          items:
            type: number
          type: array
          example: [0, 7]
        type:
          description: >-
            Defines the type of trigger. Types of triggers are
            represented by namespaces. Trigger types should be match the
            following namespace: re.notifica.trigger.*. Please refer to
            Trigger Types for all available types.
          type: string
          example: re.notifica.trigger.region.Enter
    UserDataCriteria:
      description: >-
        A list of filters for user data fields. The results are intersected / AND'ed
      items:
        $ref: '#/components/schemas/UserDataCriterion'
      type: array
    UserDataCriterion:
      properties:
        operator:
          description: >-
            Filter or select devices based on the value of user data fields.
            `eq` means equal
            `ne` means not equal
            `lt` means less than, string-compared
            `lte` means less than or equal, string-compared
            `gt` means greater than, string-compared
            `gte` means greater than or equal, string-compared
            `in` means in, needs an array of values
            `nin` means not in, needs an array of values
            `sw` means starts with, only for string values
          enum:
            - eq
            - ne
            - lt
            - lte
            - gt
            - gte
            - in
            - nin
            - sw
          type: string
        key:
          description: >-
            The key of the user data field to filter. The key need to be defined in
            the Settings > Configure App > User Data Fields menu before they can be
            used in criteria.
          type: string
          example: firstName
        value:
          oneOf:
            - type: string
            - type: number
            - type: boolean
            - type: array
              items:
                oneOf:
                  - type: string
                  - type: number
                  - type: boolean
          example: John
      type: object
    UserSegmentCreate:
      properties:
        name:
          type: string
      type: object
    UserStats:
      properties:
        date:
          type: string
          format: 'date-time'
          example: '2014-02-01T00:00:00.000Z'
        year:
          type: number
          example: 2014
        month:
          type: number
          example: 2
          default: 1
        day:
          type: number
          example: 1
          default: 1
        hour:
          type: number
          example: 2
          default: '0'
        count:
          description: Total number of active users at this time
          type: number
          example: 1000
        count0:
          description: Total number of users active during the last month
          type: number
          example: 200
        count1:
          description: Total number of users last active between 1 and 3 months ago
          type: number
          example: 100
        count3:
          description: Total number of users last active between 3 and 6 months ago
          type: number
          example: 100
        count6:
          description: Total number of users last active more than 6 months ago
          type: number
          example: 600
        autoGenerated:
          description: Total number of active users with an auto-generated / anonymous userID
          type: number
          example: 100
tags:
  - description: >-
      Handles authentication with the REST API.

      Includes the `token` that will be required to create, edit and delete
      applications and get global stats about your account.
    name: Account
  - description: >-
      Your account can create as many applications as you want.

      Applications must provide a name, a category and the environment it should
      use. When you create an application three access keys will be
      automatically created for you.

      These keys will be used in by both your apps and this API to access your
      applications. Make sure you never share these keys publicly online.
    name: Application
  - description: >-
      Storage is an add-on of Notificare. When active this add-on will let you
      manage files and create groups of assets to be used in your applications.

      Therefore this add-on is divided in two different endpoints: assets and
      asset groups. Assets being the files you can upload to Notificare and
      asset groups being the groups of files that can be used in an application.
    name: Asset
  - description: >-
      Automation is an add-on of Notificare. It will give you access to
      mechanisms that can automate how you send notifications.
    name: Automation
  - description: >-
      Methods to manage your beacons. Be sure to add the
      `regionConfig.proximityUUID` in your Application and create a Region
      first.

      Also beacons require that you create a triggered message previously.
    name: Beacon
  - description: >-
      Methods to manage devices.

      Use these methods to retrieve information about devices for an
      application, for a specific user, for a specific tag or in a specific
      location.

      Management of devices is exclusively made by our SDK libraries therefore
      you only get access to read operations.
    name: Device
  - description: Create email contacts for you apps.
    name: Email
  - description: >-
      Get all the Events stored for a specific application.


      ## Event Types:


      | type | description |

      |:---------:|----------------------------------|

      | re.notifica.event.application.Install | Stored whenever a new device
      installs the app. |
      
      | re.notifica.event.application.Registration | Stored whenever we detect 
      a device for the first time after the app has been installed. 
      Please note that this event was first introduced in SDK 1.10.0. |

      | re.notifica.event.application.Uninstall | Stored whenever an app was
      removed from the device, as reported by APNS, GCM or HMS feedback. |

      | re.notifica.event.application.Upgrade | Stored whenever we detect a 
      different app version in comparison with the last known version. 
      This will only happen when a user opens the app for the first time 
      after it has been updated. |

      | re.notifica.event.application.Open | Stored whenever the application
      becomes active. |

      | re.notifica.event.application.Close | Stored whenever the application
      goes to background. |
      
      | re.notifica.event.push.Registration | Stored the first time a user 
      enables and allows push notifications. Please note that this event was 
      first introduced in SDK 3.0.0. |

      | re.notifica.event.notification.Influenced | Stored whenever a
      notification is open when app is not active. |

      | re.notifica.event.notification.Sent | Stored whenever a notification is
      sent. |

      | re.notifica.event.notification.Receive | Stored whenever a notification
      arrives. |

      | re.notifica.event.notification.Open | Stored whenever a notification is
      open. |

      | re.notifica.event.email.Subscribe | Stored whenever an email contact 
      confirms its subscription, either via one of our email subscription forms 
      or when you create a new contact that requires opt-in. |

      | re.notifica.event.email.Unsubscribe | Stored whenever an email contact 
      clicks an unsubscribe link. |

      | re.notifica.event.email.Bounce | Stored whenever an email message could
      not be delivered / bounced. |

      | re.notifica.event.email.Complaint | Stored whenever an email message 
      received a complaint. |

      | re.notifica.event.email.Deactivate | Stored whenever an email contact 
      was deactivated after a message bounced. |
      
      | re.notifica.event.email.ViewOnline | Stored whenever an email contact
      views a message online. |

      | re.notifica.event.email.LinkTracked | Stored whenever an email contact 
      clicks in a link in any of your messages (when link tracking is enabled). |

      | re.notifica.event.sms.Subscribe | Stored whenever an SMS contact 
      confirms its subscription, either via one of our SMS subscription forms 
      or when you create a new contact that requires opt-in. |

      | re.notifica.event.sms.Unsubscribe | Stored whenever an SMS contact 
      clicks an unsubscribe link. |

      | re.notifica.event.sms.Nondeliverable | Stored whenever an SMS message 
      could not be delivered. |

      | re.notifica.event.region.Session | Stored whenever a user enters and
      leaves a region. |

      | re.notifica.event.beacon.Session | Stored whenever a user is on the
      proximity of a beacon. |

      | re.notifica.event.pass.Add | Stored whenever a pass is added to a
      device's wallet. |

      | re.notifica.event.pass.Remove | Stored whenever a pass is removed from a
      device's wallet. |

      | re.notifica.event.pass.Redeem | Stored whenever a pass is redeemed. |

      | re.notifica.event.asset.Load | Stored whenever an asset group is loaded. |

      | re.notifica.event.scannable.Scan | Stored whenever a scannable is
      scanned. |

      | re.notifica.event.product.Buy | Stored whenever a purchase is done. |

      | re.notifica.event.product.Buy.{store} | Stored whenever a purchase is
      done, where store is AppStore or GooglePlay. |

      | re.notifica.event.product.Buy.{store}.{identifier} | Stored whenever a
      purchase is done, where store is AppStore or GooglePlay. |
    name: Event
  - description: Methods for exporting users and devices.
    name: Export
  - description: >-
      Methods for importing collections of items. Files are assumed to be
      uploaded to Notificare Storage before they can be used in a new import.
      Use this [endpoint](https://api-docs.notifica.re/#tag/Upload) to
      upload a file.
    name: Import
  - description: >-
      Methods to create short links in Notificare. Links can be used to redirect
      users to existing web pages or to server HTML markup hosted in Notificare.
    name: Links
  - description: >-
      Methods to create, send and schedule messages to your audience. We support
      several channels: Push (iOS, Android & Web), Email and SMS.

      You can send a broadcast, select a group of users (Segments), select a
      group of devices (Tags), select devices that executed certain events or
      combine segments, tags, location and device properties in a powerful
      criteria for fine-grained results.


      # Push


      ## Message Types:


      | type | description |

      |:---------:|-------------|

      | re.notifica.notification.Alert | The simplest form of push messages, it
      will display the message in a dialog/alert window. It does not require a
      content object. You can although add Action objects to it, actions will be
      added to the window as buttons. |

      | re.notifica.notification.WebView | This type allows you to show any
      piece of HTML. It requires a Content object of type
      `re.notifica.content.HTML`. You can additionally add Action objects to
      this type of push message. |

      | re.notifica.notification.URL | Use this type to open any URL. It
      requires a Content object of type `re.notifica.content.URL`. You can
      additionally add Action objects to this type of push message. |

      | re.notifica.notification.Image | Add one or more images to your push
      messages. It requires one or more Content objects of types
      `re.notifica.content.JPEG`, `re.notifica.content.PNG` or
      `re.notifica.content.GIF`. You can additionally add Action objects to this
      type of push message. |

      | re.notifica.notification.Map | This type of push message will use the
      device's native maps (iOS & Android) or any map library (Web) to display
      one or more locations. It requires one or more Content objects of type
      `re.notifica.content.Marker`. You can additionally add Action objects to
      this type of push message. |

      | re.notifica.notification.Rate | This type is used exclusively to send a
      dialog window with three Action objects included. The user can then choose
      to rate the app in App Store/Google Play, to be remembered later to rate
      or to not rate at all. This type of push message does not require any
      Content object. Also you cannot add any more Action objects to this type
      of push message. |

      | re.notifica.notification.Passbook | Use this type to easily send .pkpass
      files in your push notifications. Distribute your Passbook Passes directly
      to your app users. This type does not allow any Action objects. |

      | re.notifica.notification.Video | This type of push message is used to
      send video content to your users. It requires one of these three types of
      content: `re.notifica.content.YouTube`, `re.notifica.content.Vimeo` or
      `re.notifica.content.HTML5Video`. You can additionally add Action objects
      to this type of push message. This type is only available for SDKs 1.8.0
      and up. |

      | re.notifica.notification.URLScheme | Use this type of push message to
      deep link messages to areas of your mobile app (iOS & Android) or web
      pages (Web). You will need to make sure your app responds to these URL
      Schemes by providing them in you app's Info.plist (iOS) or
      AndroidManifest.xml (Android). This type is only available for SDKs 1.8.0
      and up. |

      | re.notifica.notification.None | Use this type if you do not wish to show
      any UI in Notificare but still make sure we gather metrics. When using
      this type you can still handle the notifications yourself so it is
      possible to still include content, actions or extra parameters. This type
      is only available for SDKs 1.8.0 and up. |


      ## Content Objects:


      | type | data |

      |:---------:|-------------|

      | re.notifica.content.Text | string (eg.: "Hello World!") |

      | re.notifica.content.HTML | string (eg.: "\<h1>Hello World!\</h1>") |

      | re.notifica.content.URL | string (eg.: "http://notifica.re") |

      | re.notifica.content.Image | string (eg.:
      "https://s3-eu-west-1.amazonaws.com/notificare-storage/notifications/9fd.../6ccd..")
      |

      | re.notifica.content.Marker | object (eg.: {"title":"Some Place",
      "description":"Some description about that place", "latitude": 4.098765,
      "longitude": 5.08875}) |

      | re.notifica.content.PKPass | string (eg.:
      "http://notifica.re/path/to/my/pass.pkpass") |

      | re.notifica.content.YouTube | string (eg.: "3t_EN-HZVLw") |

      | re.notifica.content.Vimeo | string (eg.: "75196023") |

      | re.notifica.content.HTML5Video | string (eg.:
      "https://push.notifica.re/asset/file/3d99d18.../1b029...") |


      ## Action Objects:


      | type | label | target | keyboard | camera | rules |

      |:---------:|:---------:|:---------:|:---------:|:---------:|:---------:|

      | re.notifica.action.Callback | string (eg.: "open cam") | string (eg.:
      "http://api.notifica.re/register?action=xpto&var=xyz") | boolean | boolean
      | array (eg.:
      [{"type":"re.notifica.rule.segment.Add",params:["532434df434657df4664"]}])
      |

      | re.notifica.action.Telephone | string (eg.: "make a call") | string
      (eg.: "tel:0500666858") | n/a | n/a | array (eg.:
      [{"type":"re.notifica.rule.segment.Add",params:["532434df434657df4664"]}])
      |

      | re.notifica.action.SMS | string (eg.: "send sms") | string (eg.:
      "0500666858") | n/a | n/a | array (eg.:
      [{"type":"re.notifica.rule.segment.Add",params:["532434df434657df4664"]}])
      |

      | re.notifica.action.Mail | string | string (eg.:
      "me@company.com","you@company.com") | n/a | n/a | array (eg.:
      [{"type":"re.notifica.rule.segment.Add",params:["532434df434657df4664"]}])
      |

      | re.notifica.action.Browser | string (eg.: "open notifica.re") | string
      (eg.:"http://notifica.re") | n/a | n/a | array (eg.:
      [{"type":"re.notifica.rule.segment.Add",params:["532434df434657df4664"]}])
      |

      | re.notifica.action.App | string (e.g., "open facebook") | string (eg.:
      "fb://") | n/a | n/a | array (eg.:
      [{"type":"re.notifica.rule.segment.Add",params:["532434df434657df4664"]}])
      |

      | re.notifica.action.Custom | string (eg.: "open tab") | string (eg.:
      "openTabInMyCode") | n/a | n/a | array (eg.:
      [{"type":"re.notifica.rule.segment.Add",params:["532434df434657df4664"]}])
      |


      ## Rules Objects:


      | type | params |

      |:---------:|-------------|

      | re.notifica.rule segment.Add | array of segment Ids (eg.:
      ["532434df434657df4664","532434df434657df4664"]) |

      | re.notifica.rule segment.Remove | array of segment Ids (eg.:
      ["532434df434657df4664","532434df434657df4664"]) |

      | re.notifica.rule tag.Add | array of tags (eg.: ["tag_news","tag_press"])
      |

      | re.notifica.rule tag.Remove | array of tags (eg.:
      ["tag_news","tag_press"]) |


      # Email


      ## Email Message Types:


      | type | description |

      |:---------:|-------------|

      | re.notifica.notification.email.HTML | The most flexible type of email
      messages. You can should your own HTML to design your email messages. |

      | re.notifica.notification.email.Notificare | This type is reserved for
      messages designed in our dashboard. It will expect a certain structure to
      be compatible with our email designer composer and therefore should only
      be used via these endpoints if you are familiar with it.  |


      ## Content Objects:


      | type | data |

      |:---------:|-------------|

      | re.notifica.content.Text | string (eg.: "Hello World!") |

      | re.notifica.content.HTML | string (eg.: "\<h1>Hello World!\</h1>") |


      ## Rules Objects:


      | type | params |

      |:---------:|-------------|

      | re.notifica.rule segment.Add | array of segment Ids (eg.:
      ["532434df434657df4664","532434df434657df4664"]) |

      | re.notifica.rule segment.Remove | array of segment Ids (eg.:
      ["532434df434657df4664","532434df434657df4664"]) |

      | re.notifica.rule tag.Add | array of tags (eg.: ["tag_news","tag_press"])
      |

      | re.notifica.rule tag.Remove | array of tags (eg.:
      ["tag_news","tag_press"]) |
    name: Messages
  - description: >-
      Methods for retrieving and deleting message error logs.
    name: Message Log
  - description: >-
      Methods for retrieving, creating and edit message partials. Partials can
      be created for different types of channels. 
      Supported channels are: push and email.
    name: Message Partial
  - description: >-
      Methods to create, list, modify or cancel scheduled messages. Schedule
      tasks can be set according to a specific time (in UTC) or according to the
      local timezone on the device.

      In the first case, the schedule will only run once, in the latter case,
      the schedule will run until all timezones have passed the time in the
      schedule.

      A schedule can have a status of `scheduled`, `running`, `finished` or
      `canceled`. Only when in the `scheduled` status messages or its scheduled
      date can be modified.

      These methods operate on existing notifications, so create a notification
      first with the `scheduled` property set.

      Use its `_id` property to refer to it in any of these methods.
    name: Message Schedule
  - description: >-
      Methods for retrieving, creating and edit message templates. Templates can
      be created for different types of channels. Supported channels are: push,
      email and sms.
    name: Message Template
  - description: >-
      Methods to test audience selection. Retrieves information about the
      current number of users or devices your selection will reach. These
      endpoints execute a dry-run for your audience selection and will not send
      any message.
    name: Message Test
  - description: >-
      Methods to manage your passes. Before creating passes you must create
      passbook templates. To create, edit and delete templates see the
      [Pass Templates](https://api-docs.notifica.re/#tag/Pass-Templates) endpoints.
    name: Pass
  - description: >-
      Methods to manage your passbook templates. These templates should be
      created before you can start creating passes.

      They will help you pre-define the template styles your application needs
      and accelerate pass creation. To create and redeem passes see also the
      [Pass](https://api-docs.notifica.re/#tag/Pass) endpoints. Pass
      templates will require images, see also the
      [Uploads](https://api-docs.notifica.re/#tag/Upload) endpoints to
      learn how to upload a file.
    name: Pass Templates
  - description: >-
      Methods to manage your virtual products. Products can be purchased inside
      your application through both the App Store and Google Play.
    name: Product
  - name: Purchase
  - description: >-
      Methods to manage your regions. Regions are geo-fences that can eventually
      have Triggers and/or Beacons.

      When none are created your region will just gather the session data as
      users enter and leave that area or are in the range of your beacons.

      You can have a combination of Triggers and Beacons or just one of them.
      Note that iBeacon technology requires users to turn on Bluetooth to work.
    name: Region
  - description: >-
      A Reply object is what Notificare creates when users interact with
      notifications with actions.

      These objects hold every single interaction and data your users send you.
    name: Reply
  - description: >-
      Methods for scheduling imports or exports of data from and to
      external storage on a daily or hourly basis
    name: Scheduled Tasks
  - description: >-
      Methods to retrieve usage reports of application resources in the API.

      These requests must be authenticated with the `applicationKey` and
      `masterSecret`.
    name: Application Stats
  - description: |-
      Methods to retrieve usage reports of account resources in the API.
      These requests must be authenticated with the `token`.
    name: Account Stats
  - description: Create sms numbers for you apps.
    name: SMS
  - description: >-
      Public methods to retrieve information about the status and health of the
      API
    name: Status
  - description: >-
      Methods to retrieve tags.

      Use these methods to retrieve information about device tags for an
      application.

      Management of tags is exclusively made by our SDK libraries therefore you
      only get access to read operations.
    name: Tag
  - description: >-
      Methods to manage your triggers. Triggers are used to send messages when a
      transition into or out of a region occurs.

      There are two types of triggers, Region triggers and Beacon triggers. They
      are used by regions and beacons to send notifications whenever a device
      enters/exits a Region or is in the proximity range of a Beacon.


      ## Trigger Types:


      | type | description |

      |:---------:|-------------|

      | re.notifica.trigger.region.Enter | Device entered a region |

      | re.notifica.trigger.region.Exit | Device exited a region |

      | re.notifica.trigger.beacon.Enter | Device entered a beacon range |

      | re.notifica.trigger.beacon.Exit | Device exited a beacon range |
    name: Trigger
  - description: >-
      These methods let you manage files.

      All the files you upload to Notificare can be used as content of your
      notifications, replies, import jobs, WebPush icons and passes.
    name: Upload
  - description: >-
      These methods let you create, change and remove user segments as well as
      manage add, remove or clear all users from a segment.
    name: User Segment
  - description: >-
      Methods for retrieving (groups of) users. Additionally you can also add
      and remove them from user segments.
    name: User
