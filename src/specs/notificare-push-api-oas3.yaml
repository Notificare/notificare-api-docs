openapi: 3.0.0
info:
  description: >-
    Unified remote push notifications, location services, actionable analytics,
    loyalty and marketing automation for iOS, Android and Web apps.

    Create user profiles, categorize your users and devices, create & schedule
    any rich and interactive notification.

    Tap into millions of App Store and Google Play users with in-app products,
    run reward and loyalty programs with digital cards in Wallet and use
    Geo-Targeting, Geo-Fencing or iBeacon technology to provide the ultimate
    messaging experience.


    Sign up for free [here](https://dashboard.notifica.re/#/sign-up).


    The API calls below are all authenticated. There are 4 types of
    authentication credentials:


    - `email` / `password`: Used for signing in to your account and retrieving a
    session token


    - `token`: Used for all calls that need account-wide access, such as stats,
    lists of applications, etc.


    - `applicationKey` / `applicationSecret`: Only used for calls that originate
    from the device, e.g., registration, tags.


    - `applicationKey` / `masterSecret`: Used for calls that are related to a
    specific application and originate from your backend system, e.g., push,
    user segments, user lists, device lists, regions.


    All 4 types use normal Basic HTTP Authentication (username + password), in
    case of token, the password is ignored, so can be anything, e.g. "xxx"


    For more information about this API, please [contact
    us](http://notifica.re/contact).
  title: Notificare REST API
  version: ''
servers:
  - url: 'https://push.notifica.re/'
paths:
  /account/login:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                value:
                  account: "5245bc5b3e66a3b01f0024d4"
                  token: "5245bc5b3e66a3b01f2224d4"
                  expires: "2013-11-25T15:19:10.000Z"
                  needsSecondFactor: false
          description: Created
        '401':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: wrong credentials
          description: Wrong credentials
        '403':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: account blocked
          description: Account blocked
        '404':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: account not found
          description: Account not found
        '429':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: too many login attempts
          description: Too many login attempts
      tags:
        - Account
      description: >-
        Retrieve session token based on account credentials. This request must
        be authenticated with the `email` and `password`.
      operationId: postAccountLogin
      summary: Account Login
    delete:
      responses:
        '204':
          description: No Content
      tags:
        - Account
      description: >-
        Delete account session. This request must be authenticated with the
        `token`.
      operationId: deleteAccountLogin
      summary: Account Logout
  /account/login/totp:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                account: "5245bc5b3e66a3b01f0024d4"
                token: "5245bc5b3e66a3b01f2224d4"
                expires: "2013-11-25T15:19:10.000Z"
                needsSecondFactor: false
          description: Created
      tags:
        - Account
      description: >-
        Provide the 6 digit code after retrieving session token with account
        credentials. This request must be authenticated with the `token`.
      requestBody:
        content:
          application/json:
            schema:
              properties:
                code:
                  description: The code generated by Google Authenticator app.
                  type: number
                  example: '123456'
              required:
                - code
              type: object
      operationId: postAccountLoginTotp
      summary: Create TOTP
  /account/2fa:
    get:
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              example:
                use2FA: false
                totp:
                  configured: false
                  verified: false
                  date: '2013-11-25T15:19:10.000Z'
                u2f:
                  configured: false
      tags:
        - Account
      description: >-
        Retrieve the account 2FA state. This should provide information about
        2FA functionality for your account. This request must be authenticated
        with the `token`.
      operationId: getAccount2fa
      summary: Check 2FA
  /account/2fa/totp:
    post:
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                key: "xxx"
                url: "otpauth://totp/xxx?secret=xxx&period=30&issuer=xxx"
          description: Registered TOTP
        '403':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: authenticator already setup
          description: Authenticator already setup
      tags:
        - Account
      description: >-
        Register your account for TOTP. This endpoint will provide you a key
        (for manual setup) and URL (to create a QRCode) that allows you to
        configure the Google Authenticator app. This request must be
        authenticated with the `token`.
      operationId: Register TOTP
      summary: Register TOTP
    delete:
      responses:
        '204':
          description: Unregistered TOTP
        '403':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: authenticator not setup
          description: Authenticator not setup
      tags:
        - Account
      description: >-
        Unregister your account for TOTP. This endpoint will delete the setup
        for the Google Authenticator app. This request must be authenticated
        with the `token`.
      operationId: deleteAccountTotp
      summary: Unregister TOTP
  /account/2fa/enable:
    put:
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                enabled:
                  value:
                    message: "second factor enabled"
                already enabled:
                  value:
                    message: "second factor already enabled"
          description: Enabled 2FA
        '403':
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                not verified:
                  value:
                    error: no verified second factor
                not configured:
                  value:
                    error: no second factor configured
          description: No second factor
      tags:
        - Account
      description: >-
        At any time when your account has been configured for 2FA, you can use
        this endpoint to enable it. This request must be authenticated with the
        `token`.
      operationId: putAccount2faEnable
      summary: Enable 2FA
  /account/2fa/disable:
    put:
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                disabled:
                  value:
                    message: "second factor disabled"
                already disabled:
                  value:
                    message: "second factor already disabled"
          description: Disabled 2FA
      tags:
        - Account
      description: >-
        At any time when your account has been configured for 2FA and is
        enabled, you can disable it. This request must be authenticated with the
        `token`.
      operationId: putAccount2faDisable
      summary: Disable 2FA
  /application:
    get:
      parameters:
        - description: The number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 50
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                applications:
                  - _id: 5245bc5b3e66a3b01f0024d4
                    account: 5245bc5b3e66a3b01f0024d4
                    actionCategories:
                      - actions:
                          - camera: false
                            destructive: false
                            keyboard: false
                            label: follow
                            target: ''
                            type: re.notifica.action.Callback
                        name: MyTemplate
                        type: re.notifica.notification.Alert
                    active: true
                    apnsConfig:
                      info:
                        issuer:
                          C: US
                          CN: >-
                            Apple Worldwide Developer Relations
                            Certification Authority
                          O: Apple Inc.
                          OU: Apple Worldwide Developer Relations
                        notAfter: '2014-11-25T15:19:10.000Z'
                        notBefore: '2013-11-25T15:19:10.000Z'
                        serial: xxxxxx
                        subject:
                          C: NL
                          CN: >-
                            Apple Development IOS Push Services:
                            re.notifica.test
                          OU: XXXXXXXXXX
                          UID: re.notifica.test
                      certificate: raw certificate
                    applicationKey: xxxxxxxxxxxxx
                    applicationSecret: xxxxxxxxxxxx
                    authProviders:
                      - provider: twitter
                    blocked: false
                    category: Other
                    date: '2012-11-28T15:31:54.904Z'
                    gcmConfig:
                      key: xxxxxxxxxxxxxxxxxxxxx
                    locationTtl: 7
                    masterSecret: xxxxxxxxxx
                    name: Your App
                    production: false
                    regionConfig:
                      proximityUUID: f7826da6-4fa2-4e98-8024-bc5b71e0893e
          description: Created
      tags:
        - Application
      description: >-
        Get your active applications. This request must be authenticated with
        the `token`.
      operationId: getApplication
      summary: List Applications
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  application:
                    $ref: '#/components/schemas/ObjectCreated'
          description: Created
      tags:
        - Application
      description: >-
        Create a new application. This request must be authenticated with the
        `token`.
      operationId: postApplication
      requestBody:
        content:
          application/json:
            schema:
              properties:
                category:
                  description: Your application's category.
                  type: string
                name:
                  description: Your application's name.
                  type: string
                production:
                  description: If your application is set to production or not.
                  type: boolean
              required:
                - name
                - production
                - category
              type: object
      summary: Create Application
  /application/shared:
    get:
      parameters:
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 50
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                applications:
                  - _id: 5245bc5b3e66a3b01f0024d4
                    account: 5245bc5b3e66a3b01f0024d4
                    actionCategories:
                      - actions:
                          - camera: false
                            destructive: false
                            keyboard: false
                            label: follow
                            target: ''
                            type: re.notifica.action.Callback
                        name: MyTemplate
                        type: re.notifica.notification.Alert
                    active: true
                    apnsConfig:
                      info:
                        issuer:
                          C: US
                          CN: >-
                            Apple Worldwide Developer Relations
                            Certification Authority
                          O: Apple Inc.
                          OU: Apple Worldwide Developer Relations
                        notAfter: '2014-11-25T15:19:10.000Z'
                        notBefore: '2013-11-25T15:19:10.000Z'
                        serial: xxxxxx
                        subject:
                          C: NL
                          CN: >-
                            Apple Development IOS Push Services:
                            re.notifica.test
                          OU: XXXXXXXXXX
                          UID: re.notifica.test
                      certificate: raw certificate
                    applicationKey: xxxxxxxxxxxxx
                    applicationSecret: xxxxxxxxxxxx
                    authProviders:
                      - provider: twitter
                    blocked: false
                    category: Other
                    date: '2012-11-28T15:31:54.904Z'
                    gcmConfig:
                      key: xxxxxxxxxxxxxxxxxxxxx
                    locationTtl: 7
                    masterSecret: xxxxxxxxxx
                    name: Your App
                    production: false
                    regionConfig:
                      proximityUUID: f7826da6-4fa2-4e98-8024-bc5b71e0893e
          description: Created
      tags:
        - Application
      description: >-
        Get all the active applications that are shared with your account. This
        request must be authenticated with the `token`.
      operationId: getApplicationShared
      summary: List Shared Applications
  '/application/{application}':
    delete:
      parameters:
        - description: The account id of an active application.
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: application
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                message: application deactivated
          description: Deactivated
      tags:
        - Application
      description: >-
        Destroy an application. This operation can not be undone. This request
        must be authenticated with the `token`.
      operationId: deleteApplicationById
      summary: Delete Application
    get:
      parameters:
        - description: The account id of an active application.
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: application
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                application:
                  _id: 5245bc5b3e66a3b01f0024d4
                  account: xxxxxxxxxxx
                  actionCategories:
                    - actions:
                        - camera: false
                          destructive: false
                          keyboard: false
                          label: follow
                          target: ''
                          type: re.notifica.action.Callback
                      name: MyTemplate
                      type: re.notifica.notification.Alert
                  active: true
                  apnsConfig:
                    info:
                      issuer:
                        C: US
                        CN: >-
                          Apple Worldwide Developer Relations Certification
                          Authority
                        O: Apple Inc.
                        OU: Apple Worldwide Developer Relations
                      notAfter: '2014-11-25T15:19:10.000Z'
                      notBefore: '2013-11-25T15:19:10.000Z'
                      serial: xxxxxx
                      subject:
                        C: NL
                        CN: >-
                          Apple Development IOS Push Services:
                          re.notifica.test
                        OU: XXXXXXXXXX
                        UID: re.notifica.test
                    certificate: raw certificate
                  applicationKey: xxxxxxxxxxxxx
                  applicationSecret: xxxxxxxxxxxx
                  authProviders:
                    - provider: twitter
                  blocked: false
                  category: Other
                  date: '2012-11-28T15:31:54.904Z'
                  gcmConfig:
                    key: xxxxxxxxxxxxxxxxxxxxx
                  locationTtl: 7
                  masterSecret: xxxxxxxxxx
                  name: Your App
                  production: false
                  regionConfig:
                    proximityUUID: f7826da6-4fa2-4e98-8024-bc5b71e0893e
          description: Application
      tags:
        - Application
      description: >-
        Get an application object. This request must be authenticated with the
        `token`.
      operationId: getApplicationById
      summary: Get Application
    put:
      parameters:
        - description: The account id of an active application.
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: application
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                message: application changes saved
          description: OK
      tags:
        - Application
      description: >-
        Modify an application. This request must be authenticated with the
        `token`.
      operationId: putApplicationById
      requestBody:
        content:
          application/json:
            schema:
              example:
                category: Business
                name: My Amazing App
                production: true
              properties:
                category:
                  type: string
                name:
                  type: string
                production:
                  type: boolean
              type: object
      summary: Update Application
  /asset:
    get:
      parameters:
        - description: The (partial) content type of assets to list.
          example: 'image'
          in: query
          name: type
          required: false
          schema:
            type: string
        - description: The original filename of assets to list.
          example: 'test'
          in: query
          name: name
          required: false
          schema:
            type: string
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                assets:
                  - _id: 5708dff98f252b8f23fe05100
                    application: 5354f0bb3fa544f52ff4cff0
                    contentDisposition: >-
                      form-data; name="file";
                      filename="Screenshot_2016-04-07-13-17-31.png"
                    contentLength: 59609
                    contentType: image/png
                    customSortOrder: 0
                    fileName: >-
                      /notifications/3d99d18148e6f3dbcf4ff891c9a0ff63b0311feccc7b9d0c8c79fee9b4dde19/e457c97c76bc41ff524af3697cc5236cc06fd982a83f983046fff68ea56b1b6
                    key: >-
                      3d99d18148e6f3dbcf4ff891c9a0ff63b0311feccc7b9d0c8c79fee9b4dde19/e457c97c76bc41ff524af3697cc5236cc06fd982a83f983046fff68ea56b1b6
                    lastModified: '2016-04-09T10:25:28.129Z'
                    originalFileName: Screenshot_2016-04-07-13-17-31.png
                  - _id: 5708dff98f252b8f23fe05100
                    application: 5354f0bb3fa544f52ff4cff0
                    contentDisposition: >-
                      form-data; name="file";
                      filename="Screenshot_2016-04-07-13-17-31.png"
                    contentLength: 59609
                    contentType: image/png
                    customSortOrder: 0
                    fileName: >-
                      /notifications/3d99d18148e6f3dbcf4ff891c9a0ff63b0311feccc7b9d0c8c79fee9b4dde19/e457c97c76bc41ff524af3697cc5236cc06fd982a83f983046fff68ea56b1b6
                    key: >-
                      3d99d18148e6f3dbcf4ff891c9a0ff63b0311feccc7b9d0c8c79fee9b4dde19/e457c97c76bc41ff524af3697cc5236cc06fd982a83f983046fff68ea56b1b6
                    lastModified: '2016-04-09T10:25:28.129Z'
                    originalFileName: Screenshot_2016-04-07-13-17-31.png
                count: 2
          description: OK
      tags:
        - Asset
      description: >-
        Get all the assets for an application.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getAsset
      summary: List Assets
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                _id: 570bff9ff09c7c399e721897
                key: >-
                  3d99d18148e6f3dbcf4ff891c9a02ffb0311feccc7b9d0c8c79fee9dddde19/51b73467c0665add7abfd4bc47ebfdff843f77f58dcb12cdeb3d0c094f0e9835
          description: Created
      tags:
        - Asset
      description: >-
        Create an asset in a specific application. Uploads a file to Notificare.
        The resulting filename is the path of that file inside the notificare
        storage. This can be used as a reference to the file in further
        processing or deleting.

        The contents of the file should be in the body of the request and with
        the correct mime-type. So, e.g. an image should be of type `image/png`,
        `image/jpg` or `image/gif`, a pdf should be `application/pdf` and a
        video should be `video/mp4`.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postAsset
      requestBody:
        content:
          image/png:
            schema:
              type: string
              format: binary
          image/jpeg:
            schema:
              type: string
              format: binary
          image/gif:
            schema:
              type: string
              format: binary
          application/pdf:
            schema:
              type: string
              format: binary
          video/mp4:
            schema:
              type: string
              format: binary
      summary: Create Asset
  '/asset/{id}':
    get:
      parameters:
        - description: The asset's id.
          example: 5245bc5b3e66a3b01fff24d4
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                asset:
                  _id: 5708dff98f252b8f23fe05100
                  application: 5354f0bb3fa544f52ff4cff0
                  contentDisposition: >-
                    form-data; name="file";
                    filename="Screenshot_2016-04-07-13-17-31.png"
                  contentLength: 59609
                  contentType: image/png
                  customSortOrder: 0
                  fileName: >-
                    /notifications/3d99d18148e6f3dbcf4ff891c9a0ff63b0311feccc7b9d0c8c79fee9b4dde19/e457c97c76bc41ff524af3697cc5236cc06fd982a83f983046fff68ea56b1b6
                  key: >-
                    3d99d18148e6f3dbcf4ff891c9a0ff63b0311feccc7b9d0c8c79fee9b4dde19/e457c97c76bc41ff524af3697cc5236cc06fd982a83f983046fff68ea56b1b6
                  lastModified: '2016-04-09T10:25:28.129Z'
                  originalFileName: Screenshot_2016-04-07-13-17-31.png
          description: OK
      tags:
        - Asset
      description: >-
        Get the asset.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getAssetById
      summary: Get Asset
    put:
      parameters:
        - description: The asset's id.
          example: 5245bc5b3e66a3b01fff24d4
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                message: asset updated
          description: OK
      tags:
        - Asset
      description: >-
        Modify a specific asset.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: putAssetById
      requestBody:
        content:
          image/png:
            schema:
              type: string
              format: binary
          image/jpeg:
            schema:
              type: string
              format: binary
          image/gif:
            schema:
              type: string
              format: binary
          application/pdf:
            schema:
              type: string
              format: binary
          video/mp4:
            schema:
              type: string
              format: binary
      summary: Update Asset
    delete:
      parameters:
        - description: The asset's id.
          example: 5245bc5b3e66a3b01fff24d4
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
      tags:
        - Asset
      description: >-
        Delete an asset. This operation can not be undone.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: deleteAssetById
      summary: Delete Asset
  '/asset/{id}/order':
    put:
      parameters:
        - description: The asset's id.
          example: 5245bc5b3e66a3b01fff24d4
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                message: asset updated
          description: OK
      tags:
        - Asset
      description: >-
        Modify a specific asset.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: putAssetOrder
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                customSortOrder:
                  type: number
                  example: 2
              required:
                - customSortOrder
      summary: Update Asset Order
  /asset/group:
    get:
      parameters:
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                assetGroups:
                  - _id: 56f3444fc34c01653ffccdf0
                    application: 5354f0bb3fa54ff52ff4c7c0
                    assets:
                      - _id: 56f3444fcff01653c7ccdf1
                        button:
                          action: ''
                          label: ''
                        description: ''
                        key: >-
                          3d99d18148e6f3dbcf4ff891c9a02646ff311feccc7b9d0c8c79fee9b4dde19/c76c6363a7e014fae1586fa9b8ff1c61faa7b79036fd2670db2840de979cab03
                        title: Screen Shot 2016-03-24 at 00.04.49.png
                    name: testing
                    notAfter: null
                    notBefore: null
                    segment: 5354f0bb3fa54ff52ff4c7c0
                  - _id: 56f3444fc34c01653c7ccdf0
                    application: 5354f0bb3fa544452ff4c7c0
                    assets:
                      - _id: 56f3444fc34c01653c7ccdf1
                        button:
                          action: ''
                          label: ''
                        description: ''
                        key: >-
                          3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/c76c6363a7e014fae1586fa9b83b1c61faa7b79036fd2670db2840de979cab03
                        title: Screen Shot 2016-03-24 at 00.04.49.png
                    name: testing
                    notAfter: null
                    notBefore: null
                    segment: 5354f0bb3fa54ff52ff4c7c0
                count: 2
          description: OK
      tags:
        - Asset
      description: >-
        Get all the asset groups for an application.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getAssetGroup
      summary: List Asset Groups
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  assetGroup:
                    $ref: '#/components/schemas/ObjectCreated'
          description: Created
      tags:
        - Asset
      description: >-
        Create an asset group in a specific application. This allows you to
        group assets in a group can then later be retrieved in your applications
        using the SDKs.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postAssetGroup
      requestBody:
        $ref: '#/components/requestBodies/AssetGroup'
      summary: Create Asset Group
  '/asset/group/byname/{name}':
    get:
      parameters:
        - description: The name of the asset group
          example: testing
          in: path
          name: name
          required: true
          schema:
            type: string
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                assetGroups:
                  - _id: 56f3444fc34c01653ffccdf0
                    application: 5354f0bb3fa54ff52ff4c7c0
                    assets:
                      - _id: 56f3444fcff01653c7ccdf1
                        button:
                          action: ''
                          label: ''
                        description: ''
                        key: >-
                          3d99d18148e6f3dbcf4ff891c9a02646ff311feccc7b9d0c8c79fee9b4dde19/c76c6363a7e014fae1586fa9b8ff1c61faa7b79036fd2670db2840de979cab03
                        title: Screen Shot 2016-03-24 at 00.04.49.png
                    name: testing
                    notAfter: null
                    notBefore: null
                    segment: 5354f0bb3fa54ff52ff4c7c0
                  - _id: 56f3444fc34c01653c7ccdf0
                    application: 5354f0bb3fa544452ff4c7c0
                    assets:
                      - _id: 56f3444fc34c01653c7ccdf1
                        button:
                          action: ''
                          label: ''
                        description: ''
                        key: >-
                          3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/c76c6363a7e014fae1586fa9b83b1c61faa7b79036fd2670db2840de979cab03
                        title: Screen Shot 2016-03-24 at 00.04.49.png
                    name: testing
                    notAfter: null
                    notBefore: null
                    segment: 5354f0bb3fa54ff52ff4c7c0
                count: 2
          description: OK
      tags:
        - Asset
      description: >-
        Get all the asset groups for an application. Because asset groups can
        share the same name you might need to get all asset groups with the same
        name. Use this endpoint to retrieve assets with the same name.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getAssetGroupByName
      summary: List Asset Groups By Name
  '/asset/group/{id}':
    get:
      parameters:
        - description: The asset group's id.
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                assetGroup:
                  _id: 56f3444fc34c01653ffccdf0
                  application: 5354f0bb3fa54ff52ff4c7c0
                  assets:
                    - _id: 56f3444fcff01653c7ccdf1
                      button:
                        action: ''
                        label: ''
                      description: ''
                      key: >-
                        3d99d18148e6f3dbcf4ff891c9a02646ff311feccc7b9d0c8c79fee9b4dde19/c76c6363a7e014fae1586fa9b8ff1c61faa7b79036fd2670db2840de979cab03
                      title: Screen Shot 2016-03-24 at 00.04.49.png
                  name: testing
                  notAfter: null
                  notBefore: null
                  segment: 5354f0bb3fa54ff52ff4c7c0
          description: OK
      tags:
        - Asset
      description: >-
        Get a specific asset group.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getAssetGroupById
      summary: Get Asset Group
    put:
      parameters:
        - description: The asset group's id.
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                message: asset group updated
          description: OK
      tags:
        - Asset
      description: >-
        Modify a specific asset group.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: putAssetGroupById
      requestBody:
        $ref: '#/components/requestBodies/AssetGroup'
      summary: Update Asset Group
    delete:
      parameters:
        - description: The asset group's id.
          example: 5245bc5b3e66a3b01fff24d4
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                message: asset group removed
          description: OK
      tags:
        - Asset
      description: >-
        Delete an asset group. This operation cannot be undone.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: deleteAssetGroupById
      summary: Delete Asset Group
  /beacon:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  beacon:
                    $ref: '#/components/schemas/ObjectCreated'
          description: Created
      tags:
        - Beacon
      description: >-
        Create a new beacon for a region. To complete this request you must
        create a triggered Notification first.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postBeacon
      requestBody:
        $ref: '#/components/requestBodies/BeaconCreate'
      summary: Create Beacon
  '/beacon/forregion/{region}':
    get:
      parameters:
        - description: The id of an active region.
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: region
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                beacons:
                  - _id: 5245bc5b3e66a3b01f0024d4
                    region: 5245bc5b3e66a3b01f0024d4
                    major: 1
                    minor: 100
                    name: My Beacon
                    notification: 6245bc5b3e66a3b01f0024d5
                    proximity: immediate
                  - _id: 5245bc5b3e66a3b01f0024d6
                    region: 5245bc5b3e66a3b01f0024d4
                    major: 1
                    minor: 101
                    name: My Beacon
                    notification: 6245bc5b3e66a3b01f0024d5
                    proximity: immediate
          description: OK
      tags:
        - Beacon
      description: >-
        Get all beacons for a certain region.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getBeaconForRegion
      summary: List Beacons For Region
  '/beacon/{id}':
    get:
      parameters:
        - description: The beacon id of an active beacon.
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                beacon:
                  _id: 5245bc5b3e66a3b01f0024d4
                  region: 5245bc5b3e66a3b01f0024d4
                  major: 1
                  minor: 100
                  name: My Beacon
                  notification: 6245bc5b3e66a3b01f0024d5
                  proximity: immediate
          description: OK
      tags:
        - Beacon
      description: >-
        Get a beacon object.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getBeaconById
      summary: Get Beacon
    put:
      parameters:
        - description: The beacon id of an active beacon.
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                message: beacon updated
          description: OK
      tags:
        - Beacon
      description: >-
        Modify a beacon.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: putBeaconById
      requestBody:
        $ref: '#/components/requestBodies/BeaconUpdate'
      summary: Update Beacon
    delete:
      parameters:
        - description: The beacon id of an active beacon.
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                message: beacon deleted
          description: OK
      tags:
        - Beacon
      description: >-
        Delete a beacon. This operation cannot be undone.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: deleteBeaconById
      summary: Delete Beacon
  /datasource:
    get:
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                count: 2
                datasources:
                  - _id: 55c0c7f4fed3e3bb70e2e86b
                    active: true
                    application: 5489b42ff23e5815132b492a
                    categoryMap: []
                    config:
                      messageType: re.notifica.notification.Alert
                      url: 'http://notifica.re/blog/feed.xml'
                    feedMap: tag_newsletter
                    lastParsed: '2015-11-12T08:28:53.000Z'
                    lastRun: '2015-11-13T15:19:10.698Z'
                    mapTarget: tag
                    mapType: feed
                    name: Blog
                    nextRun: '2015-11-13T15:34:10.698Z'
                    type: feed
                  - _id: 55c0c7f4fed3e3bb70e2e86b
                    active: true
                    application: 5489b42ff23e5815132b492a
                    categoryMap: []
                    config:
                      messageType: re.notifica.notification.Alert
                      url: 'http://notifica.re/blog/feed.xml'
                    feedMap: tag_newsletter
                    lastParsed: '2015-11-12T08:28:53.000Z'
                    lastRun: '2015-11-13T15:19:10.698Z'
                    mapTarget: tag
                    mapType: feed
                    name: Blog
                    nextRun: '2015-11-13T15:34:10.698Z'
                    type: feed
          description: OK
      tags:
        - Automation
      description: >-
        Get all the datasources for an application.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getDatasource
      summary: List Datasources
    post:
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                datasource:
                  $ref: '#/components/schemas/ObjectCreated'
          description: OK
      tags:
        - Automation
      description: >-
        Create a datasource.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postDatasource
      requestBody:
        $ref: '#/components/requestBodies/DatasourceCreate'
      summary: Create Datasource
  /datasource/test:
    post:
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                feed:
                  items:
                    - date: '2016-06-24T09:00:00.000Z'
                      description: |-
                        <p><br />
                        <strong>Press release</strong>...
                      link: >-
                        http://notifica.re/blog/2016/06/24/MobileStrategy-Notificare-Partnership/
                      title: MobileStrategy and Notificare announce...
                    - date: '2016-02-26T13:02:00.000Z'
                      description: |-
                        <p><br />
                        From day 1, we set out to provide...
                      link: >-
                        http://notifica.re/blog/2016/02/26/Notificare-ISO-Certification/
                      title: Notificare receives ISO 27001 certification
                  meta:
                    date: '2016-06-24T09:00:00.000Z'
                    description: Our Blog
                    title: Notificare
          description: OK
      tags:
        - Automation
      description: >-
        Test a datasource feed before actually creating it.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postDatasourceTest
      requestBody:
        content:
          application/json:
            schema:
              properties:
                config:
                  properties:
                    messageType:
                      description: The type of message to send
                      type: string
                    url:
                      description: The URL to fetch the RSS Feed from
                      type: string
                  required:
                    - url
                    - messageType
                  type: object
              type: object
      summary: Test New Datasource
  '/datasource/{id}':
    get:
      parameters:
        - description: The source's id.
          example: 55c0c7f4fed3e3ff70e2e86b
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                datasource:
                  _id: 55c0c7f4fed3e3bb70e2e86b
                  active: true
                  application: 5489b42ff23e5815132b492a
                  categoryMap: []
                  config:
                    messageType: re.notifica.notification.Alert
                    url: 'http://notifica.re/blog/feed.xml'
                  feedMap: tag_newsletter
                  lastParsed: '2015-11-12T08:28:53.000Z'
                  lastRun: '2015-11-13T15:19:10.698Z'
                  mapTarget: tag
                  mapType: feed
                  name: Blog
                  nextRun: '2015-11-13T15:34:10.698Z'
                  type: feed
          description: OK
          headers: {}
      tags:
        - Automation
      description: >-
        Get a specific datasource.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getDatasourceById
      summary: Get Datasource
    put:
      parameters:
        - description: The source's id.
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                message: datasource updated
          description: OK
          headers: {}
      tags:
        - Automation
      description: >-
        Modify a datasource.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: putDatasourceById
      requestBody:
        $ref: '#/components/requestBodies/DatasourceUpdate'
      summary: Update Datasource
    delete:
      parameters:
        - description: The source's id.
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                message: datasource deleted
          description: OK
      tags:
        - Automation
      description: >-
        Delete a datasource. This operation cannot be undone.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: deleteDatasourceById
      summary: Delete Datasource
  '/datasource/{id}/test':
    put:
      parameters:
        - description: The source's id.
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                feed:
                  items:
                    - date: '2016-06-24T09:00:00.000Z'
                      description: |-
                        <p><br />
                        <strong>Press release</strong>...
                      link: >-
                        http://notifica.re/blog/2016/06/24/MobileStrategy-Notificare-Partnership/
                      title: MobileStrategy and Notificare announce...
                    - date: '2016-02-26T13:02:00.000Z'
                      description: |-
                        <p><br />
                        From day 1, we set out to provide...
                      link: >-
                        http://notifica.re/blog/2016/02/26/Notificare-ISO-Certification/
                      title: Notificare receives ISO 27001 certification
                  meta:
                    date: '2016-06-24T09:00:00.000Z'
                    description: Our Blog
                    title: Notificare
          description: OK
      tags:
        - Automation
      description: >-
        Test a datasource feed that is already created.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: putDatasourceTest
      summary: Test Existing Datasource
  /device:
    get:
      parameters:
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: number
        - description: The number of results to skip.
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
        - description: The channel you wish to filter results for.
          example: push
          in: query
          name: medium
          required: false
          schema:
            default: push
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                count: 2
                devices:
                  - tags: []
                    _id: 5245bc5b3e66a3b01f0024d4
                    active: true
                    appVersion: '1.0'
                    application: 52458981394c07916000492c
                    deviceID: 00a9b9bf-c099-45aa-9278-64d6a3f22476
                    deviceString: MacIntel
                    language: en
                    lastActive: '2014-03-11T16:20:55.084Z'
                    location:
                      coordinates:
                        - 4.2345
                        - 5.6789
                      type: Point
                    medium: push
                    osString: Mac OS X 10.9.2
                    osVersion: 10.9.2
                    platform: Mac OS X
                    sdkVersion: 0.0.1
                    timeZoneOffset: -5
                    transport: Websocket
                    userID: info@notifica.re
                  - tags: []
                    _id: 5245bc5b3e66a3b01f0024d4
                    active: true
                    appVersion: '1.0'
                    application: 52458981394c07916000492c
                    deviceID: 00a9b9bf-c099-45aa-9278-64d6a3f22476
                    deviceString: MacIntel
                    language: en
                    last_active: '2014-03-11T16:20:55.084Z'
                    location:
                      coordinates:
                        - 4.2345
                        - 5.6789
                      type: Point
                    medium: push
                    osString: Mac OS X 10.9.2
                    osVersion: 10.9.2
                    platform: Mac OS X
                    sdkVersion: 0.0.1
                    timeZoneOffset: -5
                    transport: Websocket
                    userID: info@notifica.re
          description: OK
      tags:
        - Device
      description: >-
        Get all the devices for a specific application. If skip and limit are
        not used, there is a default size of 100 devices. Please note that there
        is a max. size of 1000 devices per page. When the medium property is
        used we will filter the results by the type of channel your devices were
        registered for.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getDevice
      summary: List Devices
  /device/bygeometry:
    post:
      parameters:
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                count: 2
                devices:
                  - tags:
                      - toys
                    _id: 5245bc5b3e66a3b01f0024d4
                    active: true
                    appVersion: '1.0'
                    application: 52458981394c07916000492c
                    deviceID: 00a9b9bf-c099-45aa-9278-64d6a3f22476
                    deviceString: MacIntel
                    language: en
                    lastActive: '2014-03-11T16:20:55.084Z'
                    location:
                      coordinates:
                        - 4.2345
                        - 5.6789
                      type: Point
                    medium: push
                    osString: Mac OS X 10.9.2
                    osVersion: 10.9.2
                    platform: Mac OS X
                    sdkVersion: 0.0.1
                    timeZoneOffset: -5
                    transport: Websocket
                    userID: info@notifica.re
                  - tags:
                      - toys
                    _id: 5245bc5b3e66a3b01f0024d4
                    active: true
                    appVersion: '1.0'
                    application: 52458981394c07916000492c
                    deviceID: 00a9b9bf-c099-45aa-9278-64d6a3f22476
                    deviceString: MacIntel
                    language: en
                    lastActive: '2014-03-11T16:20:55.084Z'
                    location:
                      coordinates: []
                      type: Point
                    medium: push
                    osString: Mac OS X 10.9.2
                    osVersion: 10.9.2
                    platform: Mac OS X
                    sdkVersion: 0.0.1
                    timeZoneOffset: -5
                    transport: Websocket
                    userID: info@notifica.re
          description: OK
      tags:
        - Device
      description: >-
        Get all the devices in a specific geometric shape. If skip and limit are
        not used, there is a default size of 100 devices. Please note that there
        is a max. size of 1000 devices per page.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postDeviceByGeometry
      requestBody:
        content:
          application/json:
            schema:
              properties:
                geometry:
                  $ref: '#/components/schemas/Polygon'
                  description: >-
                    A simple polygon geoJSON object used to query the devices'
                    location
              required:
                - geometry
              type: object
      summary: List Devices For Polygon
  '/device/bylocation/{lat1}/{long1}/{lat2}/{long2}':
    get:
      parameters:
        - description: The desired south-east latitude
          example: '4.2345'
          in: path
          name: lat1
          required: true
          schema:
            type: number
        - description: The desired south-east longitude
          example: '5.6789'
          in: path
          name: long1
          required: true
          schema:
            type: number
        - description: The desired north-west latitude
          example: '4.2345'
          in: path
          name: lat2
          required: true
          schema:
            type: number
        - description: The desired north-west longitude
          example: '5.6789'
          in: path
          name: long2
          required: true
          schema:
            type: number
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                count: 2
                devices:
                  - tags:
                      - toys
                    _id: 5245bc5b3e66a3b01f0024d4
                    active: true
                    appVersion: '1.0'
                    application: 52458981394c07916000492c
                    deviceID: 00a9b9bf-c099-45aa-9278-64d6a3f22476
                    deviceString: MacIntel
                    language: en
                    lastActive: '2014-03-11T16:20:55.084Z'
                    location:
                      coordinates:
                        - 4.2345
                        - 5.6789
                      type: Point
                    medium: push
                    osString: Mac OS X 10.9.2
                    osVersion: 10.9.2
                    platform: Mac OS X
                    sdkVersion: 0.0.1
                    timeZoneOffset: -5
                    transport: Websocket
                    userID: info@notifica.re
                  - tags:
                      - toys
                    _id: 5245bc5b3e66a3b01f0024d4
                    active: true
                    appVersion: '1.0'
                    application: 52458981394c07916000492c
                    deviceID: 00a9b9bf-c099-45aa-9278-64d6a3f22476
                    deviceString: MacIntel
                    language: en
                    lastActive: '2014-03-11T16:20:55.084Z'
                    location:
                      coordinates: []
                      type: Point
                    medium: push
                    osString: Mac OS X 10.9.2
                    osVersion: 10.9.2
                    platform: Mac OS X
                    sdkVersion: 0.0.1
                    timeZoneOffset: -5
                    transport: Websocket
                    userID: info@notifica.re
          description: OK
      tags:
        - Device
      description: >-
        Get all the devices withing a specific bounds. Bounds form a rectangle
        from the points at its south-west and north-east corners. If skip and
        limit are not used, there is a default size of 100 devices. Please note
        that there is a max. size of 1000 devices per page.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getDeviceForBounds
      summary: List Devices For Bounds
  '/device/bylocation/{latitude}/{longitude}/{distance}':
    get:
      parameters:
        - description: The desired latitude
          example: '4.2345'
          in: path
          name: latitude
          required: true
          schema:
            type: number
        - description: The desired longitude
          example: '5.6789'
          in: path
          name: longitude
          required: true
          schema:
            type: number
        - description: >-
            The distance in kilometers of your search area relative to the
            latitude and longitude
          example: '1.5'
          in: path
          name: distance
          required: true
          schema:
            type: number
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                count: 2
                devices:
                  - tags:
                      - toys
                    _id: 5245bc5b3e66a3b01f0024d4
                    active: true
                    appVersion: '1.0'
                    application: 52458981394c07916000492c
                    deviceID: 00a9b9bf-c099-45aa-9278-64d6a3f22476
                    deviceString: MacIntel
                    language: en
                    lastActive: '2014-03-11T16:20:55.084Z'
                    location:
                      coordinates:
                        - 4.2345
                        - 5.6789
                      type: Point
                    medium: push
                    osString: Mac OS X 10.9.2
                    osVersion: 10.9.2
                    platform: Mac OS X
                    sdkVersion: 0.0.1
                    timeZoneOffset: -5
                    transport: Websocket
                    userID: info@notifica.re
                  - tags:
                      - toys
                    _id: 5245bc5b3e66a3b01f0024d4
                    active: true
                    appVersion: '1.0'
                    application: 52458981394c07916000492c
                    deviceID: 00a9b9bf-c099-45aa-9278-64d6a3f22476
                    deviceString: MacIntel
                    language: en
                    lastActive: '2014-03-11T16:20:55.084Z'
                    location:
                      coordinates: []
                      type: Point
                    medium: push
                    osString: Mac OS X 10.9.2
                    osVersion: 10.9.2
                    platform: Mac OS X
                    sdkVersion: 0.0.1
                    timeZoneOffset: -5
                    transport: Websocket
                    userID: info@notifica.re
          description: OK
      tags:
        - Device
      description: >-
        Get all the devices in a specific location. If skip and limit are not
        used, there is a default size of 100 devices. Please note that there is
        a max. size of 1000 devices per page.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getDeviceByLocation
      summary: List Devices By Location
  '/device/forregion/{region}':
    get:
      parameters:
        - description: The id of the region
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: region
          required: true
          schema:
            type: string
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                count: 2
                devices:
                  - tags:
                      - toys
                    _id: 5245bc5b3e66a3b01f0024d4
                    active: true
                    appVersion: '1.0'
                    application: 52458981394c07916000492c
                    deviceID: 00a9b9bf-c099-45aa-9278-64d6a3f22476
                    deviceString: MacIntel
                    language: en
                    lastActive: '2014-03-11T16:20:55.084Z'
                    location:
                      coordinates:
                        - 4.2345
                        - 5.6789
                      type: Point
                    medium: push
                    osString: Mac OS X 10.9.2
                    osVersion: 10.9.2
                    platform: Mac OS X
                    sdkVersion: 0.0.1
                    timeZoneOffset: -5
                    transport: Websocket
                    userID: info@notifica.re
                  - tags:
                      - toys
                    _id: 5245bc5b3e66a3b01f0024d4
                    active: true
                    appVersion: '1.0'
                    application: 52458981394c07916000492c
                    deviceID: 00a9b9bf-c099-45aa-9278-64d6a3f22476
                    deviceString: MacIntel
                    language: en
                    lastActive: '2014-03-11T16:20:55.084Z'
                    location:
                      coordinates: []
                      type: Point
                    medium: push
                    osString: Mac OS X 10.9.2
                    osVersion: 10.9.2
                    platform: Mac OS X
                    sdkVersion: 0.0.1
                    timeZoneOffset: -5
                    transport: Websocket
                    userID: info@notifica.re
          description: OK
      tags:
        - Device
      description: >-
        Get all the devices in a specific region. If skip and limit are not
        used, there is a default size of 100 devices. Please note that there is
        a max. size of 1000 devices per page.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getDeviceForRegion
      summary: List Devices For Region
  '/device/forsubscription/{subscription}':
    get:
      parameters:
        - description: The subscription Id the device is associated with
          example: 00a9b9bf-c099-45aa-9278-64d6a3f22476
          in: path
          name: subscription
          required: true
          schema:
            type: string
        - description: >-
            The medium for the device. Possible values are `push`, `email` or
            `sms`
          example: push
          in: query
          name: medium
          required: true
          schema:
            type: string
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                count: 2
                devices:
                  - tags: []
                    _id: 5245bc5b3e66a3b01f0024d4
                    active: true
                    appVersion: '1.0'
                    application: 52458981394c07916000492c
                    deviceID: 00a9b9bf-c099-45aa-9278-64d6a3f22476
                    deviceString: MacIntel
                    language: en
                    lastActive: '2014-03-11T16:20:55.084Z'
                    location:
                      coordinates:
                        - 4.2345
                        - 5.6789
                      type: Point
                    medium: push
                    osString: Mac OS X 10.9.2
                    osVersion: 10.9.2
                    platform: Mac OS X
                    sdkVersion: 0.0.1
                    timeZoneOffset: -5
                    transport: Websocket
                    userID: info@notifica.re
          description: OK
      tags:
        - Device
      description: >-
        Get a device by its specific subscription Id. The subscription Id is
        generated automatically for each device created.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getDeviceForSubscription
      summary: Get Device For Subscription
  '/device/fortag/{tag}':
    get:
      parameters:
        - description: The tag the device is associated with
          example: toys
          in: path
          name: tag
          required: true
          schema:
            type: string
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                count: 2
                devices:
                  - tags: []
                    _id: 5245bc5b3e66a3b01f0024d4
                    active: true
                    appVersion: '1.0'
                    application: 52458981394c07916000492c
                    deviceID: 00a9b9bf-c099-45aa-9278-64d6a3f22476
                    deviceString: MacIntel
                    language: en
                    lastActive: '2014-03-11T16:20:55.084Z'
                    location:
                      coordinates:
                        - 4.2345
                        - 5.6789
                      type: Point
                    medium: push
                    osString: Mac OS X 10.9.2
                    osVersion: 10.9.2
                    platform: Mac OS X
                    sdkVersion: 0.0.1
                    timeZoneOffset: -5
                    transport: Websocket
                    userID: info@notifica.re
                  - tags: []
                    _id: 5245bc5b3e66a3b01f0024d4
                    active: true
                    appVersion: '1.0'
                    application: 52458981394c07916000492c
                    deviceID: 00a9b9bf-c099-45aa-9278-64d6a3f22476
                    deviceString: MacIntel
                    language: en
                    lastActive: '2014-03-11T16:20:55.084Z'
                    location:
                      coordinates:
                        - 4.2345
                        - 5.6789
                      type: Point
                    medium: push
                    osString: Mac OS X 10.9.2
                    osVersion: 10.9.2
                    platform: Mac OS X
                    sdkVersion: 0.0.1
                    timeZoneOffset: -5
                    transport: Websocket
                    userID: info@notifica.re
          description: OK
      tags:
        - Device
      description: >-
        Get all the devices for a specific tag. If skip and limit are not used,
        there is a default size of 100 devices. Please note that there is a max.
        size of 1000 devices per page.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getDeviceForTag
      summary: List Devices For Tag
  '/device/foruser/{userID}':
    get:
      parameters:
        - description: >-
            The user ID is the one the client device registered with, e.g., the
            user's email address.
          example: testuser@example.com
          in: path
          name: userID
          required: true
          schema:
            type: string
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                count: 2
                devices:
                  - tags: []
                    _id: 5245bc5b3e66a3b01f0024d4
                    active: true
                    appVersion: '1.0'
                    application: 52458981394c07916000492c
                    deviceID: 00a9b9bf-c099-45aa-9278-64d6a3f22476
                    deviceString: MacIntel
                    language: en
                    lastActive: '2014-03-11T16:20:55.084Z'
                    location:
                      coordinates:
                        - 4.2345
                        - 5.6789
                      type: Point
                    medium: push
                    osString: Mac OS X 10.9.2
                    osVersion: 10.9.2
                    platform: Mac OS X
                    sdkVersion: 0.0.1
                    timeZoneOffset: -5
                    transport: Websocket
                    userID: info@notifica.re
                  - tags: []
                    _id: 5245bc5b3e66a3b01f0024d4
                    active: true
                    appVersion: '1.0'
                    application: 52458981394c07916000492c
                    deviceID: 00a9b9bf-c099-45aa-9278-64d6a3f22476
                    deviceString: MacIntel
                    language: en
                    lastActive: '2014-03-11T16:20:55.084Z'
                    location:
                      coordinates:
                        - 4.2345
                        - 5.6789
                      type: Point
                    medium: push
                    osString: Mac OS X 10.9.2
                    osVersion: 10.9.2
                    platform: Mac OS X
                    sdkVersion: 0.0.1
                    timeZoneOffset: -5
                    transport: Websocket
                    userID: info@notifica.re
          description: OK
      tags:
        - Device
      description: >-
        Get all the devices for a specific user. If skip and limit are not used,
        there is a default size of 100 devices. Please note that there is a max.
        size of 1000 devices per page.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getDeviceForUser
      summary: List Devices For User
  /device/tags:
    get:
      parameters:
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                tags:
                  - deviceCount: 2
                    tag: toys
                  - deviceCount: 5
                    tag: kitchen
                count: 2
          description: OK
      tags:
        - Tag
      description: >-
        Get the list of all tags for this application. If skip and limit are not
        used, there is a default size of 100 devices. Please note that there is
        a max. size of 1000 devices per page.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getDeviceTags
      summary: List Tags
  '/device/tags/{tag}':
    get:
      parameters:
        - description: The string to search for
          example: toys
          in: path
          name: tag
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                tags:
                  - deviceCount: 2
                    tag: toys
                  - deviceCount: 5
                    tag: kitchen
                count: 2
          description: OK
      tags:
        - Tag
      description: >-
        Get all the tags that match match partially or totally a specific query.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getDeviceTagsForTag
      summary: Search Tags
  '/device/{deviceID}':
    get:
      parameters:
        - description: The deviceID is the unique identifier provided by APNS or GCM.
          example: 00a9b9bf-xxx9278-64d6a3f22476
          in: path
          name: deviceID
          required: true
          schema:
            type: string
        - description: A property that defines if inactive devices should also be found.
          example: any
          in: query
          name: active
          required: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                device:
                  tags: []
                  _id: 5245bc5b3e66a3b01f0024d4
                  active: true
                  appVersion: '1.0'
                  application: 52458981394c07916000492c
                  deviceID: 00a9b9bf-c099-45aa-9278-64d6a3f22476
                  deviceString: MacIntel
                  language: en
                  lastActive: '2014-03-11T16:20:55.084Z'
                  location:
                    coordinates:
                      - 4.2345
                      - 5.6789
                    type: Point
                  medium: push
                  osString: Mac OS X 10.9.2
                  osVersion: 10.9.2
                  platform: Mac OS X
                  sdkVersion: 0.0.1
                  timeZoneOffset: -5
                  transport: Websocket
                  userID: info@notifica.re
          description: OK
      tags:
        - Device
      description: >-
        Get a specific device based on the deviceID.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getDeviceById
      summary: Get Device
  '/device/{deviceID}/user':
    put:
      parameters:
        - description: The deviceID is the unique identifier provided by APNS or GCM.
          example: 00a9b9bf-xxx9278-64d6a3f22476
          in: path
          name: deviceID
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                message: device updated
          description: OK
      tags:
        - Device
      description: >-
        Register a userID and userName to a device. For this endpoint to work,
        you need to set the User Registration to API Level. This can be done
        from the Settings > Configure App > User Registration or (if you have
        the Users & Authentication add-on) from the Users & Authentication
        add-on service page. This will prevent you apps from registering users
        with only the app keys and instead you can take care of this at the
        server side. Use this method to add a userID and userName to a device.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: putDeviceUser
      requestBody:
        content:
          application/json:
            schema:
              example:
                userID: '12345678'
                userName: John Doe
              properties:
                userID:
                  type: string
                userName:
                  type: string
              type: object
      summary: Register User To Device
    delete:
      parameters:
        - description: The deviceID is the unique identifier provided by APNS or GCM.
          example: 00a9b9bf-xxx9278-64d6a3f22476
          in: path
          name: deviceID
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                message: device updated
          description: OK
          headers: {}
      tags:
        - Device
      description: >-
        Unregister a userID and userName from a device. For this endpoint to
        work, you need to set the User Registration to API Level. This can be
        done from the Settings > Configure App > User Registration or (if you
        have the Users & Authentication add-on) from the Users & Authentication
        add-on service page. This will prevent you apps from registering users
        with only the app keys and instead you can take care of this at the
        server side. Use this method to remove a userID and userName from a
        device.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: deleteDeviceUser
      summary: Unregister User From Device
  /email:
    post:
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                message: subscription updated
          description: OK
        '202':
          content:
            application/json; charset=utf-8:
              example:
                message: subscription is being processed
          description: Accepted
      tags:
        - Email
      description: >-
        Create an email contact for your application.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postEmail
      requestBody:
        content:
          application/json:
            schema:
              properties:
                tags:
                  description: A list of tags you wish to assign to the email address.
                  items:
                    type: string
                  type: array
                  example: ['tag1']
                email:
                  description: The email address you wish to subscribe to your app.
                  type: string
                  format: email
                language:
                  description: The language you wish to assign the contact to.
                  type: string
                  example: 'nl'
                region:
                  description: The region you wish to assign the contact to.
                  type: string
                  example: 'NL'
                userID:
                  description: The userID your wish to assign the contact to.
                  type: string
                  example: '173661892772'
                userName:
                  description: The userName your wish to assign the contact to.
                  type: string
                  example: Test User
                verify:
                  description: >-
                    If you wish to require verification before activating the
                    email contact set this property to `true`.
                  type: boolean
              required:
                - email
              type: object
      summary: Create Email Contact
  '/event/custom/{type}/{userID}':
    post:
      parameters:
        - description: >-
            The type of custom event. This event type is automatically prepended
            with `re.notifica.event.custom.` namespace to prevent collisions.
          example: MyCustomEvent
          in: path
          name: type
          required: true
          schema:
            type: string
        - description: >-
            The user this event is triggered for. All automations and
            notification will apply to all of the devices of this user.
          example: test@example.com
          in: path
          name: userID
          required: true
          schema:
            type: string
      responses:
        '202':
          content:
            application/json; charset=utf-8:
              example:
                message: event is being processed
          description: Accepted
      tags:
        - Event
      description: >-
        Generate Custom Event for a specific User. Data sent in the payload can
        be accessed as placeholder data in automated notifications. In the
        example below, a placeholder `{{test}}` in an automated notification
        would be replaced by `a test value`.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postEventCustomForUser
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  additionalProperties:
                    type: string
                  example:
                    key1: value1
                    key2: value2
                  type: object
              type: object
      summary: Create Custom Event
  '/event/fortype/{type}':
    get:
      parameters:
        - description: The type of event.
          example: re.notifica.event.application.Install
          in: path
          name: type
          required: true
          schema:
            type: string
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
        - description: When provided will only retrieve events after this date
          example: '2014-10-03'
          in: query
          name: since
          required: false
          schema:
            type: string
        - description: >-
            When provided will only retrieve events before this date (only
            available when a since date is provided)
          example: '2014-10-04'
          in: query
          name: before
          required: false
          schema:
            type: string
        - description: >-
            When provided will only retrieve events for the userID. Requires
            since and before to be set as well.
          example: user@example.com
          in: query
          name: userID
          required: false
          schema:
            type: string
        - description: >-
            When provided will only retrieve events for the deviceID. Requires
            since and before to be set as well.
          example: bbff2ce9b547d2df4731bac277xxx
          in: query
          name: deviceID
          required: false
          schema:
            type: string
        - description: >-
            The region's id of an event of type re.notifica.event.region.Session
            or re.notifica.event.beacon.Session
          in: query
          name: region
          required: false
          schema:
            $ref: '#/components/schemas/ObjectId'
        - description: >-
            The beacon's fence region id of an event of type
            re.notifica.event.beacon.Session
          in: query
          name: fence
          required: false
          schema:
            $ref: '#/components/schemas/ObjectId'
        - description: >-
            The pass id of an event of type re.notifica.event.pass.Add,
            re.notifica.event.pass.Remove or re.notifica.event.pass.Redeem
          in: query
          name: pass
          required: false
          schema:
            $ref: '#/components/schemas/ObjectId'
        - description: >-
            The pass serial of an event of type re.notifica.event.pass.Add,
            re.notifica.event.pass.Remove or re.notifica.event.pass.Redeem
          in: query
          name: serial
          required: false
          schema:
            type: string
            format: uuid
        - description: >-
            The asset group's id of an event of type
            re.notifica.event.asset.Load
          in: query
          name: group
          required: false
          schema:
            $ref: '#/components/schemas/ObjectId'
        - description: >-
            The scannable's id of an event of type
            re.notifica.event.scannable.Scan
          in: query
          name: scannable
          required: false
          schema:
            $ref: '#/components/schemas/ObjectId'
        - description: >-
            The notification's id of an event of type
            re.notifica.event.notification.Sent,
            re.notifica.event.notification.Receive,
            re.notifica.event.notification.Open or
            re.notifica.event.notification.Influenced
          in: query
          name: notification
          required: false
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                events:
                  - _id: 542f153401d51284b
                    application: 5354f3545a544452ff4c7c0
                    sessionID: 5SX4tAsd534MjuHL
                    time: '2014-10-03T21:43:04.231Z'
                    type: re.notifica.event.application.Install
                    userID: null
                  - _id: 542f153401d51284b
                    application: 5354f3545a544452ff4c7c0
                    sessionID: 5SX4tAsd534MjuHL
                    time: '2014-10-03T21:43:04.231Z'
                    type: re.notifica.event.application.Install
                    userID: null
                count: 2
          description: OK
      tags:
        - Event
      description: >-
        Get all the events for a type for a specific application.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getEventForType
      summary: List Events For Type
  '/event/{id}':
    get:
      parameters:
        - description: The event's Id.
          in: path
          name: id
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                event:
                  _id: 542f153401d51284b
                  application: 5354f3545a544452ff4c7c0
                  sessionID: 5SX4tAsd534MjuHL
                  time: '2014-10-03T21:43:04.231Z'
                  type: re.notifica.event.application.Install
                  userID: null
          description: OK
      tags:
        - Event
      description: >-
        Get a specific event object.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getEventById
      summary: Get Event
  /export:
    get:
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                exportJobs:
                  - _id: 54fec699beb5cb2f6f9839ed
                    application: 5354f08474adc4183214c143
                    data: null
                    date: '2015-03-10T10:25:29.340Z'
                    result: >-
                      created export file export-user-1425983129369.csv (919
                      bytes)
                    status: success
                    type: re.notifica.export.User
          description: OK
      tags:
        - Export
      description: >-
        Get all export jobs for an application.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getExport
      summary: List Export Jobs
  '/export/fortype/{type}':
    get:
      parameters:
        - description: The export type
          example: re.notifica.export.User
          in: path
          name: type
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                exportJobs:
                  - _id: 54fec699beb5cb2f6f9839ed
                    application: 5354f08474adc4183214c143
                    data:
                      all: true
                      before: '2017-01-13'
                      campaign: 5354f08474adc4183214c143
                      fence: 5354f08474adc4183214c143
                      includeTags: true
                      notification: 5354f08474adc4183214c143
                      region: 5354f08474adc4183214c143
                      serial: 5354f08474adc4183214c143
                      showCombinedSegments: true
                      showPreferences: true
                      showSegments:
                        - 5354f08474adc4183214c143
                      since: '2017-01-12'
                      tagsSeparator: '|'
                      type: re.notifica.event.application.Open
                      useSegmentNames: true
                      userID: 5354f08474adc4183214c143
                    date: '2015-03-10T10:25:29.340Z'
                    result: >-
                      created export file export-user-1425983129369.csv (919
                      bytes)
                    status: success
                    type: re.notifica.export.User
          description: OK
      tags:
        - Export
      description: >-
        Get all export jobs of a specific type.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getExportForType
      summary: List Exports For Type
  /export/re.notifica.export.Device:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  exportJob:
                    $ref: '#/components/schemas/ObjectCreated'
          description: Created
      tags:
        - Export
      description: >-
        Export devices, contacts or numbers for an application. This job might
        take some time to finish, check the export result endpoint to obtain
        information about the status of this export job.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postExportDevice
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    all:
                      description: >-
                        Specify if export job should include all devices, including
                        inactive ones
                      type: boolean
                    criteria:
                      $ref: '#/components/schemas/Criteria'
                      description: >-
                        Optionally you can include a criteria object to filter the
                        export results
                    includeTags:
                      description: Specify if export job should include all device tags
                      type: boolean
                    medium:
                      description: >-
                        Specify if export job results should include a specific type
                        fo medium (available values are: all, push, email, sms)
                      type: string
                      enum: [all, push, email, sms]
                    tagsSeparator:
                      description: >-
                        Specify if export jobs should use a different separator for
                        the tags. By default we will use |
                      type: string
                      default: '|'
                  type: object
              required:
                - data
              type: object
      summary: Export Devices/Contacts/Numbers
  /export/re.notifica.export.User:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  exportJob:
                    $ref: '#/components/schemas/ObjectCreated'
          description: Created
      tags:
        - Export
      description: >-
        Export all users for an application. This job might take some time to
        finish, check the export result endpoint to obtain information about the
        status of this export job.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postExportUser
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    all:
                      description: >-
                        Specify if export job should include all users, including
                        inactive ones
                      type: boolean
                    lastActive:
                      $ref: '#/components/schemas/DateCriteria'
                      description: >-
                        Optionally you can filter the export results based on the
                        last active date
                    registrationDate:
                      $ref: '#/components/schemas/DateCriteria'
                      description: >-
                        Optionally you can filter the export results based on the
                        registration date
                    segmentsCriteria:
                      $ref: '#/components/schemas/SegmentsCriteria'
                      description: >-
                        Optionally you can include a segment criteria object to
                        filter the export results
                    showCombinedSegments:
                      description: >-
                        When showSegments is true or it includes a list of segments,
                        you can specify if export jobs should show all segments in
                        one column or in separate columns.
                      type: boolean
                    showPreferences:
                      description: >-
                        When showSegments is true or it includes a list of segments,
                        you can specify if export jobs should also contain user
                        selectable segments
                      type: boolean
                    showSegments:
                      description: >-
                        Specify if export job should include all segments. This
                        property can also be an array of segment IDs, if you are
                        looking to include only certain segments. Please note that
                        export jobs will fail if you have users with more than 2000
                        segments
                      type: boolean
                    useSegmentNames:
                      description: >-
                        When showSegments is true or it includes a list of segments,
                        you can specify if export jobs should contain the name of
                        the segments instead of their IDs
                      type: boolean
                  type: object
              required:
                - data
              type: object
      summary: Export Users
  /export/re.notifica.export.UserData:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  exportJob:
                    $ref: '#/components/schemas/ObjectCreated'
          description: Created
      tags:
        - Export
      description: >-
        Export all the data of a specific user. This job might take some time to
        finish, check the export result endpoint to obtain information about the
        status of this export job.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postExportUserData
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    userID:
                      description: Specify which user you want to export data from
                      type: string
                      example: '1288477272'
                  type: object
              required:
                - data
              type: object
      summary: Export User Data
  /export/re.notifica.export.Region:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  exportJob:
                    $ref: '#/components/schemas/ObjectCreated'
          description: Created
      tags:
        - Export
      description: >-
        Export all regions for an application. This job might take some time to
        finish, check the export result endpoint to obtain information about the
        status of this export job.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postExportRegion
      summary: Export Regions
  /export/re.notifica.export.Beacon:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  exportJob:
                    $ref: '#/components/schemas/ObjectCreated'
          description: Created
      tags:
        - Export
      description: >-
        Export all beacons for an application. This job might take some time to
        finish, check the export result endpoint to obtain information about the
        status of this export job.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postExportBeacon
      summary: Export Beacons
  /export/re.notifica.export.Notification:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  exportJob:
                    $ref: '#/components/schemas/ObjectCreated'
          description: Created
      tags:
        - Export
      description: >-
        Export notifications for an application. This job might take some time
        to finish, check the export result endpoint to obtain information about
        the status of this export job.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postExportNotification
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    all:
                      description: >-
                        Specify if export job should include all notifications,
                        including archived ones
                      type: boolean
                    before:
                      description: >-
                        Specify if export job should only include notifications
                        created before a certain date
                      type: '#/components/schemas/Date'
                    since:
                      description: >-
                        Specify if export job should only include notifications
                        created after a certain date
                      type: '#/components/schemas/Date'
                    useSegmentNames:
                      description: >-
                        Specify if export jobs should contain the name of the
                        segments instead of their IDs
                      type: boolean
                  type: object
              required:
                - data
              type: object
      summary: Export Notifications
  /export/re.notifica.export.Reply:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  exportJob:
                    $ref: '#/components/schemas/ObjectCreated'
          description: Created
      tags:
        - Export
      description: >-
        Export replies for a specific notification. This job might take some
        time to finish, check the export result endpoint to obtain information
        about the status of this export job.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postExportReply
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    notification:
                      description: The id of the notification you wish to export replies from
                      $ref: '#/components/schemas/ObjectId'
                  required:
                    - notification
                  type: object
              required:
                - data
              type: object
      summary: Export Replies
  /export/re.notifica.export.Event:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  exportJob:
                    $ref: '#/components/schemas/ObjectCreated'
          description: Created
      tags:
        - Export
      description: >-
        Export all the events for a certain type. This job might take some time
        to finish, check the export result endpoint to obtain information about
        the status of this export job.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postExportEvent
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    type:
                      description: The type of the event you wish to export records from
                      type: string
                    before:
                      $ref: '#/components/schemas/Date'
                      description: >-
                        Specify if export job should only include events created
                        before a certain date
                    since:
                      $ref: '#/components/schemas/Date'
                      description: >-
                        Specify if export job should only include events created
                        after a certain date
                    criteria:
                      $ref: '#/components/schemas/Criteria'
                      description: >-
                        Optionally you can include a criteria object to filter the
                        export results
                    dataFilter:
                      $ref: '#/components/schemas/DataFilterCriteria'
                      description: >-
                        Optionally you can include data filters to generate
                        fine-grained export results. Only available for custom
                        events.
                    fence:
                      $ref: '#/components/schemas/ObjectId'
                      description: >-
                        If type is `re.notifica.event.beacon.Session`, optionally
                        you can specify the ID of a region (where the beacons are
                        located) to include only events for those beacons
                    region:
                      $ref: '#/components/schemas/ObjectId'
                      description: >-
                        If type is `re.notifica.event.region.Session`, optionally
                        you can specify the ID of a region to include only events
                        for that region
                    group:
                      $ref: '#/components/schemas/ObjectId'
                      description: >-
                        If type is any `re.notifica.event.asset.*`, optionally you
                        can specify the ID of an asset group to include only events
                        for that asset group
                    notification:
                      $ref: '#/components/schemas/ObjectId'
                      description: >-
                        If type is any `re.notifica.event.notification.*`,
                        optionally you can specify the ID of a notification to
                        include only events for that notification
                    scannable:
                      $ref: '#/components/schemas/ObjectId'
                      description: >-
                        If type is any `re.notifica.event.scannable.*`, optionally
                        you can specify the ID of a scannable to include only events
                        for that scannable
                    pass:
                      $ref: '#/components/schemas/ObjectId'
                      description: >-
                        If type is any `re.notifica.event.pass.*`, optionally you
                        can specify the id of a pass to include only events for
                        that pass
                    serial:
                      description: >-
                        If type is any `re.notifica.event.pass.*`, optionally you
                        can specify the serial of a pass to include only events for
                        that pass
                      type: string
                      format: uuid
                  required:
                    - type
                  type: object
              required:
                - data
              type: object
      summary: Export Events
  /export/re.notifica.export.Pass:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  exportJob:
                    $ref: '#/components/schemas/ObjectCreated'
          description: Created
      tags:
        - Export
      description: >-
        Export all the passes for a certain pass template.
        This job might take some time to finish, check the export
        result endpoint to obtain information about the status of this export
        job.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postExportPass
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    passbook:
                      description: The id of the existing pass template
                      $ref: '#/components/schemas/ObjectId'
                  required:
                    - passbook
                  type: object
              required:
                - data
              type: object
      summary: Export Passes
  /export/re.notifica.export.Campaign:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  exportJob:
                    $ref: '#/components/schemas/ObjectCreated'
          description: Created
      tags:
        - Export
      description: >-
        Export the results of a specific Location Based Campaign. This will
        include all the trigger history for the duration of the campaign (if
        applicable). This job might take some time to finish, check the export
        result endpoint to obtain information about the status of this export
        job.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postExportCampaign
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    campaign:
                      description: The id of the campaign you wish to export results from
                      $ref: '#/components/schemas/ObjectId'
                  required:
                    - campaign
                  type: object
              required:
                - data
              type: object
      summary: Export Campaigns
  /export/re.notifica.export.CampaignSummary:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  exportJob:
                    $ref: '#/components/schemas/ObjectCreated'
          description: Created
      tags:
        - Export
      description: >-
        Export the stats summary for one or more campaigns. This job might take
        some time to finish, check the export result endpoint to obtain
        information about the status of this export job.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postExportCampaignSummary
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    campaigns:
                      description: The ids of the campaigns you wish to export summary from
                      items:
                        $ref: '#/components/schemas/ObjectId'
                      type: array
                  required:
                    - campaigns
                  type: object
              required:
                - data
              type: object
      summary: Export Campaigns Summary
  /export/re.notifica.export.AutomationSummary:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  exportJob:
                    $ref: '#/components/schemas/ObjectCreated'
          description: Created
      tags:
        - Export
      description: >-
        Export the stats summary for one or more automation connectors. This job
        might take some time to finish, check the export result endpoint to
        obtain information about the status of this export job.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postExportAutomationSummary
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    automations:
                      description: >-
                        The ids of the automation connectors you wish to export
                        summary from
                      items:
                        $ref: '#/components/schemas/ObjectId'
                      type: array
                  required:
                    - automations
                  type: object
              required:
                - data
              type: object
      summary: Export Automation Connectors Summary
  '/export/result/{export}':
    get:
      parameters:
        - description: The id of a export job
          in: path
          name: export
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            text/csv:
              example: |
                userID,userName
                "test@example.com","Test User"
          description: OK
      tags:
        - Export
      description: >-
        Get a specific export job result. This endpoint will only be available
        for export jobs with a status equal to success.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getExportResult
      summary: Get Export Result
  '/export/download/{export}':
    post:
      parameters:
        - description: The id of a export job
          example: 54fec699beb5cb2f6f9839ed
          in: path
          name: export
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    expires: '2015-03-10T10:25:29.340Z'
                    token: 54fec699beb5cb2f6f9839ed/54fec699beb5cb2f6f9839ed
          description: OK
          headers: {}
      tags:
        - Export
      description: >-
        Create a temporary download link of the export job results. This
        endpoint will only be available for export jobs with a status equal to
        success. Please also note that this link will only be available for 5
        minutes. All export files will be located at
        https://push.notifica.re/export/download/{token}.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postExportDownloadById
      summary: Create Export Download Link
  '/export/{export}':
    get:
      parameters:
        - description: The export job Id.
          in: path
          name: export
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                exportJob:
                  _id: 54fec699beb5cb2f6f9839ed
                  application: 5354f08474adc4183214c143
                  data:
                    all: true
                    before: '2017-01-13'
                    campaign: 5354f08474adc4183214c143
                    fence: 5354f08474adc4183214c143
                    includeTags: true
                    notification: 5354f08474adc4183214c143
                    region: 5354f08474adc4183214c143
                    serial: 5354f08474adc4183214c143
                    showCombinedSegments: true
                    showPreferences: true
                    showSegments:
                      - 5354f08474adc4183214c143
                    since: '2017-01-12'
                    tagsSeparator: '|'
                    type: re.notifica.event.application.Open
                    useSegmentNames: true
                    userID: 5354f08474adc4183214c143
                  date: '2015-03-10T10:25:29.340Z'
                  result: >-
                    created export file export-user-1425983129369.csv (919
                    bytes)
                  status: success
                  type: re.notifica.export.User
          description: OK
      tags:
        - Export
      description: >-
        Get a specific export job object.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getExportById
      summary: Get Export Job
    delete:
      parameters:
        - description: The id of an export job.
          in: path
          name: export
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                message: export job deleted
          description: OK
      tags:
        - Export
      description: >-
        Delete an export job. This operation cannot be undone.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: deleteExportById
      summary: Delete Export Job
  /geo/reverse:
    get:
      parameters:
        - description: The latitude
          example: 52.1881
          in: query
          name: latitude
          required: true
          schema:
            type: number
        - description: The longitude
          example: 4.5291
          in: query
          name: longitude
          required: true
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                locations:
                  address: Marconistraat 16
                  boundingBox:
                    - 52.18818
                    - 52.5995
                    - 4.59959
                    - 4.49994
                  displayName: '16, Marconistraat, Rotterdam, Netherlands'
                  license: Data (c) OpenStreetMap...
          description: OK
      tags:
        - Geo
      description: >-
        Get information about an address for a given latitude and longitude.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getGeoReverse
      summary: Get Reverse Geocoding
  /geo/search:
    get:
      parameters:
        - description: The address to search for
          example: Meerum
          in: query
          name: search
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                locations:
                  - address: Marconistraat 16
                    boundingBox:
                      - 52.18818
                      - 52.5995
                      - 4.59959
                      - 4.49994
                    displayName: '16, Marconistraat, Rotterdam, Netherlands'
                    latitude: 52.28828
                    license: Data (c) OpenStreetMap...
                    longitude: 4.51661
                  - address: Marconistraat 16
                    boundingBox:
                      - 52.18818
                      - 52.5995
                      - 4.59959
                      - 4.49994
                    displayName: '16, Marconistraat, Rotterdam, Netherlands'
                    latitude: 52.28828
                    license: Data (c) OpenStreetMap...
                    longitude: 4.51661
          description: OK
      tags:
        - Geo
      description: >-
        Get information about latitude and longitude of a given address, place,
        city or country.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getGeoSearch
      summary: Get Forward Geocoding
  /geo/timezone:
    get:
      parameters:
        - description: The latitude
          example: 52.1881
          in: query
          name: latitude
          required: true
          schema:
            type: number
        - description: The longitude
          example: 4.5291
          in: query
          name: longitude
          required: true
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                timezone:
                  _id: 54fec699beb5cb2f6f9839ed
                  abbreviation: CET
                  countryCode: NL
                  countryName: Netherlands
                  dst: false
                  name: Europe/Amsterdam
                  referenceKey: '276'
                  start: '2015-03-10T10:25:29.340Z'
                  timeZoneOffset: 1
          description: OK
      tags:
        - Geo
      description: >-
        Get information about a timezone and country for a given latitude or
        longitude.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getGeoTimezone
      summary: Get Timezone Information
  /import:
    get:
      responses:
        '200':
          description: OK
      tags:
        - Import
      description: >-
        Get all the import objects.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getImport
      summary: List Import Jobs
  '/import/fortype/{type}':
    get:
      parameters:
        - description: The import type of a previously created job.
          example: re.notifica.import.UserSegment
          in: path
          name: type
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          headers: {}
      tags:
        - Import
      description: >-
        Get all the import objects by type.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getImportForType
      summary: List Import Jobs For Type
  /import/re.notifica.import.Device:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  importJob:
                    $ref: '#/components/schemas/ObjectCreated'
          description: Created
      tags:
        - Import
      description: >-
        Used to import a list of devices. Every row in the referenced CSV should
        include at least a `deviceID`, `osVersion`, `appVersion` and `platform`
        for Push devices or `subscriptionId` for Email and SMS devices. Make
        sure you include `data.medium` property to one of the supported
        channels. It will default to `push` if not present.

        The device properties can also be defaulted to whatever you put in the
        `data` field in the request.

        There is one option in this import type, which is `overwrite`, defaults
        to `false`.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.


        Recognized columns in your .csv file are:


        + deviceID (should be a valid APNS, FCM or Safari Website Push token)


        + subscriptionId (should be a valid email or mobile phone number)


        + medium (one of the available channels: push, email, sms)


        + osVersion


        + appVersion


        + sdkVersion


        + platform (iOS, Android)


        + osString (defaults to platform + osVersion)


        + deviceString (defaults to 'unknown')


        + language (defaults to 'en')


        + tags, by default separated by `|`, if you use something else, don't
        forget to specify it in `tagsSeparator`


        + lastActive (ISO Date, defaults to current date/time)


        + longitude


        + latitude


        + locationLastUpdated (ISO Date, defaults to lastActive)


        + timeZoneOffset


        + userID (If the userID doesn't exist yet, a new user will be created.
        If omitted, an anonymous user will be generated.)


        + userName (only used when userID is present. Defaults to 'anonymous')
      operationId: postImportDevice
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    overwrite:
                      description: Overwrite previously imported devices that are not active
                      type: boolean
                      default: false
                  type: object
                path:
                  type: string
                  example: /imports/647431c4dc3798f2a5ae147411a787e8d52447e365d7972ec4d8535/dfeba0ade92ad65ec8619d4464333facc95f5c2feb55df98a92a78
              type: object
      summary: Import Devices/Contacts/Numbers
  /import/re.notifica.import.User:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  importJob:
                    $ref: '#/components/schemas/ObjectCreated'
          description: Created
      tags:
        - Import
      description: >-
        Used to import a list of users. Every row in the referenced CSV should
        include at least a `userID`. userName is optional and defaults to
        `anonymous`. This import type has no extra settings.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.


        Recognized columns in your .csv file are:


        + userID


        + userName
      operationId: postImportUser
      requestBody:
        $ref: '#/components/requestBodies/Import_UsersBody'
      summary: Import Users
  /import/re.notifica.import.UserSegment:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  importJob:
                    $ref: '#/components/schemas/ObjectCreated'
          description: Created
      tags:
        - Import
      description: >-
        Used to import a list of users into a segment. Every row in the
        referenced CSV should contain a `userID`.

        The user segment to import into should be set as the `userSegment`
        property of `data`.

        There is one option in this import type, which is `clear`. If set, it
        clears the segment before importing users, otherwise it just adds users.
        It defaults to `false`.

        Additionally you can also send or schedule a push notification whenever
        the import is finished. For that make sure you have previously created
        at least one template and then provide its Id in `notificationTemplate`
        and `push` as true as properties in the `data` object.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.


        Recognized columns in your .csv file are:


        + userID
      operationId: postImportUserSegment
      requestBody:
        content:
          application/json:
            schema:
              properties:
                path:
                  type: string
                  example: /imports/647431c4dc3798f2a5ae147411a787e8d52447e365d7972ec4d8535/dfeba0ade92ad65ec8619d4464333facc95f5c2feb55df98a92a78
              type: object
      summary: Import Users Into Segment
  /import/re.notifica.import.Region:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  importJob:
                    $ref: '#/components/schemas/ObjectCreated'
          description: Created
      tags:
        - Import
      description: >-
        Used to import a list of regions. Regions can have a circular geometry,
        i.e., latitude/longitude plus a distance, or an advanced Polygon
        geometry. If only an advanced geometry is given, the import job will
        calculate an enclosing circle automatically. If no timezone or country
        are given, these will also be calculated automatically.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.


        Recognized columns in your .csv file are:


        + referenceKey


        + name


        + description


        + address


        + tags, separated by `|`


        + category, (`fence`, `poi`, `county`, `city`, `country`). Defaults to
        `fence`.


        + latitude for circular geometry


        + longitude for circular geometry


        + distance for circular geometry


        + coordinates (pairs of `longitude:latitude`, separated by `|`) for
        advanced geometry


        + major to be used for beacons in the region


        + timezone, defaults to `UTC`


        + timeZoneOffset, defaults to `0`


        + country
      operationId: postImportRegion
      requestBody:
        content:
          application/json:
            schema:
              properties:
                path:
                  type: string
                  example: /imports/647431c4dc3798f2a5ae147411a787e8d52447e365d7972ec4d8535/dfeba0ade92ad65ec8619d4464333facc95f5c2feb55df98a92a78
              type: object
      summary: Import Regions
  /import/re.notifica.import.Beacon:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  importJob:
                    $ref: '#/components/schemas/ObjectCreated'
          description: Created
      tags:
        - Import
      description: >-
        Used to import a list of beacons. If no region with a given major
        exists, and the `createRegion` property of `data` is set, a new region
        is created automatically with the same location as the beacon and
        default values for `category`, `timezone` and `distance`, or `fence`,
        `UTC` and `100` respectively.

        If no region was found or none could be created, the import row is
        skipped.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.


        Recognized columns in your .csv file are:


        + major


        + minor


        + name


        + purpose, (`general`, `pay`, `info`, `staff`, `admin`, `other`).
        Defaults to `general`.


        + latitude, defaults to region latitude


        + longitude, defaults to region longitude


        + timezone, defaults to `UTC`


        + notification, message  to be set for the beacon
      operationId: postImportBeacon
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    createRegion:
                      type: boolean
                    distance:
                      type: number
                      example: 100
                    timezone:
                      type: string
                      example: Europe/Amsterdam
                  type: object
                path:
                  type: string
                  example: /imports/647431c4dc3798f2a5ae147411a787e8d52447e365d7972ec4d8535/dfeba0ade92ad65ec8619d4464333facc95f5c2feb55df98a92a78
              type: object
      summary: Import Beacons
  /import/re.notifica.import.Pass:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  importJob:
                    $ref: '#/components/schemas/ObjectCreated'
          description: Created
      tags:
        - Import
      description: >-
        Used to bulk import passes and optionally send them in a Push, Email or
        SMS message. To send a message when a pass is created set the property
        `sendNotification` in `data` to true. To send a message when an existing
        pass is update set the property `sendUpdateNotification` in `data` to
        true. If any of these properties is true you must also provide a
        template identifier in the property `notificationTemplate` in `data`.

        Set `passbook` in `data` to the passbook template Id to use.

        Data property `passData` can be used to set default values that will be
        set if not present in the CSV. Recognized properties in `passData` are
         `description`, `barcode.message`, `barcode.altText`, `location.latitude`, `location.longitude`, `location.altitude`, `location.regionMajor`, `location.regionId`, `location.relevantText`, `beacon.proximityUUID`, `beacon.major`, `beacon.minor`, `beacon.relevantText`.
        The property `passFields` inside `passData` can be used to include
        default values for fields from the Passbook Template.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.


        Recognized columns in your .csv file are:


        + userID (to send push notification to)


        + pass_barcode (if barcode is unique, can be used for redeem)


        + pass_barcode_message (not unique, cannot be together with
        pass_barcode)


        + pass_barcode_alt_text


        + pass_barcode_show_alt_text


        + pass_relevant_date


        + pass_expiration_date


        + pass_location_latitude


        + pass_location_longitude


        + pass_location_altitude


        + pass_location_relevant_text


        + pass_location_region_major


        + pass_location_region_id


        + pass_xxx (where xxx is any field defined in the Passbook Template)


        + notification_xxx (where xxx is any placeholder defined in your Message
        Template)
      operationId: postImportPass
      requestBody:
        content:
          application/json:
            schema:
              example:
                data:
                  notificationTemplate: 5245bc5b3e66a3b01fa66356
                  passData:
                    passFields:
                      from: AMS
                      to: OPO
                    relevantDate: '2018-01-01T12:00:00'
                  passbook: 5245bc5b3e66a3b01fa66355
                  sendNotification: true
                  sendUpdateNotification: true
                path: >-
                  /imports/647431c4dc3798f2a5ae147411a787e8d52447e365d7972ec4d8535/dfeba0ade92ad65ec8619d4464333facc95f5c2feb55df98a92a78
              properties:
                data:
                  properties:
                    notificationTemplate:
                      $ref: '#/components/schemas/ObjectId'
                    passData:
                      properties:
                        passFields:
                          properties:
                            from:
                              type: string
                            to:
                              type: string
                          type: object
                        relevantDate:
                          $ref: '#/components/schemas/Date'
                      type: object
                    passbook:
                      $ref: '#/components/schemas/ObjectId'
                    sendNotification:
                      type: boolean
                    sendUpdateNotification:
                      type: boolean
                  type: object
                path:
                  type: string
              type: object
      summary: Import Passes
  /import/re.notifica.import.PassUpdate:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  importJob:
                    $ref: '#/components/schemas/ObjectCreated'
          description: Created
      tags:
        - Import
      description: >-
        Used to update one or more fields in one or more passes for a specific pass template.
        Set `passbook` in `data` to the passbook template Id to use.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.


        Recognized columns in your .csv file are:


        + pass_barcode (if barcode is unique, can be used for redeem)


        + pass_xxx (where xxx is any field defined in the Passbook Template)
      operationId: postImportPassUpdate
      requestBody:
        content:
          application/json:
            schema:
              example:
                data:
                  passbook: 5245bc5b3e66a3b01fa66355
                path: >-
                  /imports/647431c4dc3798f2a5ae147411a787e8d52447e365d7972ec4d8535/dfeba0ade92ad65ec8619d4464333facc95f5c2feb55df98a92a78
              properties:
                data:
                  properties:
                    passbook:
                      $ref: '#/components/schemas/ObjectId'
                  type: object
                path:
                  type: string
              type: object
      summary: Import Pass Fields Update
  /import/re.notifica.import.Notification:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  importJob:
                    $ref: '#/components/schemas/ObjectCreated'
          description: Created
      tags:
        - Import
      description: >-
        Used to import a list of private messages to users or devices. Every row
        in the referenced CSV should contain at least a `userID` or a
        `deviceID`.

        Optionally, a Notification Template can be used to create the
        notifications. For that make sure you have previously created at least
        one template and then provide its Id in `notificationTemplate`.

        If no template is provided, each row should contain at least a
        `message`. Values present in the CSV will overwrite corresponding fields
        from the template, if provided.

        The notifications can also be scheduled by providing a
        `notificationSchedule` with `time` and `timezone`, defaulting to 'UTC'.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.


        Recognized columns in your .csv file are:


        + userID / deviceID (if both are provided, userID is used)


        + title


        + subtitle


        + message (if no template is set, this is mandatory)


        + attachmentUri (lock screen image, publicly accessible image URL)


        + attachmentMimeType (`image/png`, `image/jpeg`)


        + ttl


        + sound


        + extra (JSON string)


        + notification_xxx (referring to a placeholder in the template)


        `title`, `subtitle`, and `message` can contain placeholders in the form
        of `{{notification_xxxx}}` or any of the default placeholders, e.g.
        `{{userID}}` or `{{userName}}`.
      operationId: postImportNotification
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    notificationTemplate:
                      description: Use previously created template for messages
                      $ref: '#/components/schemas/ObjectId'
                  type: object
                path:
                  type: string
                  example: /imports/647431c4dc3798f2a5ae147411a787e8d52447e365d7972ec4d8535/dfeba0ade92ad65ec8619d4464333facc95f5c2feb55df98a92a78
              type: object
      summary: Import Private Messages
  /import/re.notifica.import.GroupedNotification:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  importJob:
                    $ref: '#/components/schemas/ObjectCreated'
          description: Created
      tags:
        - Import
      description: >-
        Used to import a list of users or devices to send a notification to.
        Every row in the referenced CSV should contain at least a `userID` or a
        `deviceID`.

        A Notification Template must be used to create the notifications. For
        that make sure you have previously created at least one template and
        then provide its Id in `notificationTemplate`.

        The notification can also be scheduled by providing a
        `notificationSchedule` with `time` and `timezone`, defaulting to 'UTC'.

        Values of columns prefixed with `notification_` in the CSV can be used
        as placeholders in the template

        This request is authenticated with the `applicationKey` and
        `masterSecret`.


        Recognized columns in your .csv file are:


        + userID / deviceID (if both are provided, userID is used)


        + notification_xxx (referring to a placeholder `{{notification_xxx}}` in
        the template)
      operationId: postImportGroupedNotification
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    notificationTemplate:
                      description: Use previously created template for messages
                      $ref: '#/components/schemas/ObjectId'
                    notificationSchedule:
                      description: Schedule message
                      properties:
                        time:
                          $ref: '#/components/schemas/Date'
                        timezone:
                          type: string
                          example: Europe/Amsterdam
                        local:
                          type: boolean
                          default: false
                      type: object
                  type: object
                path:
                  type: string
                  example: /imports/647431c4dc3798f2a5ae147411a787e8d52447e365d7972ec4d8535/dfeba0ade92ad65ec8619d4464333facc95f5c2feb55df98a92a78
              type: object
      summary: Import Grouped Messages
  '/import/{import}':
    get:
      parameters:
        - description: The import id of a previously created job.
          in: path
          name: import
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                importJob:
                  _id: 545cc517ff584870b89fb98
                  account: 50d771ff87e53afff2600001c
                  application: 5354f0bbdddd4452ff4c7c0
                  data:
                    clear: false
                    user_segment: 53a0a047fff17d3215a94f6
                  date: '2014-11-07T13:11:51.316Z'
                  path: /imports/3d99d18148e6f3dbcf4ffccc...
                  result: 'imported 0 records, skipped 3 records'
                  status: success
                  type: re.notifica.import.UserSegment
          description: OK
      tags:
        - Import
      description: >-
        Get an import object.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getImportById
      summary: Get Import
    put:
      parameters:
        - description: The import id of a previously created job.
          in: path
          name: import
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                message: 'import job updated'
          description: OK
      tags:
        - Import
      description: >-
        Get an import object.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: putImportById
      requestBody:
        content:
          application/json:
            example:
              data:
                createRegion: true
                distance: '100'
                timezone: Europe/Amsterdam
              path: >-
                /imports/647431c4dc3798f2a5ae147411a787e8d52447e365d7972ec4d8535/dfeba0ade92ad65ec8619d4464333facc95f5c2feb55df98a92a78
      summary: Update Import
    delete:
      parameters:
        - description: The import id of a previously created job.
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: import
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No content
      tags:
        - Import
      description: >-
        Delete an import object.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: deleteImportById
      summary: Delete Import
  '/import/{import}/abort':
    put:
      parameters:
        - description: The import id of a previously created job.
          in: path
          name: import
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                message: 'import aborted'
          description: OK
      tags:
        - Import
      description: >-
        Abort an import.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: putImportAbort
      summary: Abort Import
  /link:
    get:
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                links:
                  - _id: "545cc517ff584870b89fb98"
                    account: "50d771ff87e53afff2600001c"
                    hash: "50fUr-56"
                    application: "5354f0bbdddd4452ff4c7c0"
                    name: "Test"
                    type: "re.notifica.link.Redirect"
                    target:
                      web: "https://notifica.re/example"
                      ios: "https://notifica.re/example-ios"
                      android: "https://notifica.re/example-android"
                    opened: 10,
                    uniqueOpened: 5,
                    rules:
                      type: array
                      item:
                        $ref: '#/components/schemas/MessageRule'
                    customEvents:
                      type: array
                      item:
                        type: string
                      example: ['CustomEvent']
                  - _id: "545cc517ff584870b89fb98"
                    account: "50d771ff87e53afff2600001c"
                    hash: "50fUr-56"
                    application: "5354f0bbdddd4452ff4c7c0"
                    name: "Test"
                    type: "re.notifica.link.Redirect"
                    target:
                      web: "https://notifica.re/example"
                      ios: "https://notifica.re/example-ios"
                      android: "https://notifica.re/example-android"
                    opened: 10,
                    uniqueOpened: 5,
                    rules:
                      type: array
                      item:
                        $ref: '#/components/schemas/MessageRule'
                    customEvents:
                      type: array
                      item:
                        type: string
                      example: ['CustomEvent']
                count: 2
          description: OK
      tags:
        - Links
      description: >-
        Get all the links objects.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getLink
      summary: List Links
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  link:
                    $ref: '#/components/schemas/ObjectCreated'
          description: Created
      tags:
        - Links
      description: >-
        Create a new link. This request is authenticated with the
        `applicationKey` and  `masterSecret`.
      operationId: postLink
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  example: "Another Link"
                  type: string
                type:
                  example: "re.notifica.link.Redirect"
                  type: string
                target:
                  type: object
                  properties:
                    web:
                      example: "https://notifica.re/example"
                      type: string
                      format: uri
                    ios:
                      example: "https://notifica.re/example-ios"
                      type: string
                      format: uri
                    android:
                      example: "https://notifica.re/example-android"
                      type: string
                      format: uri
                rules:
                  type: array
                  items:
                    $ref: '#/components/schemas/MessageRule'
                customEvents:
                  type: array
                  items:
                    type: string
                  example: [CustomEvent]
      summary: Create Link
  '/link/{link}':
    get:
      parameters:
        - description: The id of the link
          in: path
          name: link
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                link:
                  _id: "545cc517ff584870b89fb98"
                  account: "50d771ff87e53afff2600001c"
                  hash: "50fUr-56"
                  application: "5354f0bbdddd4452ff4c7c0"
                  name: "Test"
                  type: "re.notifica.link.Redirect"
                  target:
                    web: "https://notifica.re/example"
                    ios: "https://notifica.re/example-ios"
                    android: "https://notifica.re/example-android"
                  opened: 10,
                  uniqueOpened: 5,
                  rules:
                    type: array
                    item:
                      $ref: '#/components/schemas/MessageRule'
                  customEvents:
                    type: array
                    item:
                      type: string
                    example: ['CustomEvent']
          description: OK
      tags:
        - Links
      description: >-
        Get a link object.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getLinkById
      summary: Get Link
    put:
      parameters:
        - description: The ID of the link
          in: path
          name: link
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                message: link updated
          description: OK
      tags:
        - Links
      description: >-
        Update all the data of a link. This request is authenticated with the
        `applicationKey` and  `masterSecret`.
      operationId: putLinkById
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  example: "Another Link"
                  type: string
                type:
                  example: "re.notifica.link.Redirect"
                  type: string
                target:
                  type: object
                  properties:
                    web:
                      example: "https://notifica.re/example"
                      type: string
                      format: uri
                    ios:
                      example: "https://notifica.re/example-ios"
                      type: string
                      format: uri
                    android:
                      example: "https://notifica.re/example-android"
                      type: string
                      format: uri
                rules:
                  type: array
                  items:
                    $ref: '#/components/schemas/MessageRule'
                customEvents:
                  type: array
                  items:
                    type: string
                  example: [CustomEvent]
      summary: Update Link
    delete:
      parameters:
        - description: The ID of the link
          in: path
          name: link
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                message: link removed
          description: OK
      tags:
        - Links
      description: >-
        Delete a link. This request is authenticated with the `applicationKey`
        and  `masterSecret`.
      operationId: deleteLinkById
      summary: Delete Link
  /notification:
    get:
      parameters:
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 10
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
        - description: >-
            The medium of the messages (it can be one of the following: push,
            email, sms)
          example: push
          in: query
          name: medium
          required: false
          schema:
            default: push
            type: string
            enum: [push, email, sms]
        - description: >-
            The scope of the messages (it can be one of the following:
            application, segments, tags)
          example: application
          in: query
          name: scope
          required: false
          schema:
            type: string
            enum: [application, segments, tags]
        - description: Filter by messages that have been scheduled
          example: '1'
          in: query
          name: scheduled
          required: false
          schema:
            type: boolean
        - description: Filter messages by tag (scope must be set to tags)
          example: tag_news
          in: query
          name: tag
          required: false
          schema:
            type: string
        - description: Filter messages by segment (scope must be set to segments)
          in: query
          name: segment
          required: false
          schema:
            $ref: '#/components/schemas/ObjectId'
        - description: Filter by messages that have been archived
          example: '1'
          in: query
          name: archived
          required: false
          schema:
            type: boolean
        - description: Filter by messages that have have a status of draft
          example: '1'
          in: query
          name: draft
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                count: 2
                notifications:
                  - _id: 566acc80cbe343d7136ec9bf
                    account: 548985629f634350713ec9ee
                    actionCategory: null
                    actions:
                      - camera: false
                        id: 566acc80cbe343d7136ec9c1
                        keyboard: false
                        label: 'yes'
                        rules: []
                        target: ''
                        type: re.notifica.action.Callback
                      - camera: false
                        id: 566acc80cbe343d7136ec9c0
                        keyboard: false
                        label: 'no'
                        rules: []
                        target: ''
                        type: re.notifica.action.Callback
                    application: 5489b42ff23e5815132b492a
                    archived: false
                    attachments: []
                    badge: null
                    cleared: false
                    content: []
                    deviceID: null
                    location:
                      coordinates:
                        - 4.422683699999993
                        - 51.91263190000001
                      distance: 0.6928425313346089
                      type: Point
                    medium: push
                    message: Ready for beers?
                    rules: []
                    scheduled: false
                    scope: application
                    segments: []
                    showInList: true
                    sound: default
                    subtitle: This is a subtitle
                    tags: []
                    time: '2015-12-11T13:15:44.298Z'
                    title: This is a title
                    triggered: false
                    ttl: null
                    type: re.notifica.notification.Alert
                    userID: testuser@example.com
          description: OK
      tags:
        - Messages
      description: >-
        Retrieves the list of messages sent by this app (excluding triggered,
        campaigns or private messages).

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getNotification
      summary: List Messages
  /notification/all:
    get:
      parameters:
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 10
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
        - description: >-
            Notifications since a specific date, overrides `If-Modified-Since`
            HTTP header
          example: '2016-01-01T12:00:00'
          in: query
          name: since
          required: false
          schema:
            type: string
        - description: Filter by messages that have been archived
          example: '1'
          in: query
          name: archived
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                count: 2
                notifications:
                  - _id: 566acc80cbe343d7136ec9bf
                    account: 548985629f634350713ec9ee
                    actionCategory: null
                    actions:
                      - camera: false
                        id: 566acc80cbe343d7136ec9c1
                        keyboard: false
                        label: 'yes'
                        rules: []
                        target: ''
                        type: re.notifica.action.Callback
                      - camera: false
                        id: 566acc80cbe343d7136ec9c0
                        keyboard: false
                        label: 'no'
                        rules: []
                        target: ''
                        type: re.notifica.action.Callback
                    application: 5489b42ff23e5815132b492a
                    archived: false
                    attachments: []
                    badge: null
                    cleared: false
                    content: []
                    deviceID: null
                    location:
                      coordinates:
                        - 4.422683699999993
                        - 51.91263190000001
                      distance: 0.6928425313346089
                      type: Point
                    medium: push
                    message: Ready for beers?
                    rules: []
                    scheduled: false
                    scope: application
                    segments: []
                    showInList: true
                    sound: default
                    subtitle: This is a subtitle
                    tags: []
                    time: '2015-12-11T13:15:44.298Z'
                    title: This is a title
                    triggered: false
                    ttl: null
                    type: re.notifica.notification.Alert
                    userID: testuser@example.com
          description: OK
      tags:
        - Messages
      description: >-
        Retrieves the list of all messages sent by this app. This endpoint
        accepts the If-Modified-Since HTTP header.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getNotificationAll
      summary: Get All Messages
  /notification/push/broadcast:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    _id: 5245bc5b3e66a3b01f0024d4
                    message: notifications are queued
          description: Created
      tags:
        - Messages
      description: >-
        Send a message to **all** push devices.

        You can also schedule a broadcast, if `scheduled` is true you should
        immediately use /notification/schedule to create the schedule task.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationPushBroadcast
      requestBody:
        $ref: '#/components/requestBodies/NotificationPushBroadcast'
      summary: Create Push Message Broadcast
  /notification/push/criteria:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notifications are queued
          description: Created
      tags:
        - Messages
      description: >-
        Send a message to devices that match a certain criteria.

        You can also schedule these messages, if `scheduled` is true you should
        immediately use /notification/schedule to create a schedule task.

        The request requires a criteria object. This request must be
        authenticated with the `applicationKey` and `masterSecret`.
      operationId: postNotificationPushCriteria
      requestBody:
        $ref: '#/components/requestBodies/NotificationPushCriteria'
      summary: Create Push Message to Criteria
  /notification/push/event:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notifications are queued
          description: Created
      tags:
        - Messages
      description: >-
        Send a message to any push device that executed an event.

        You can also schedule a push message based on events, if `scheduled` is
        true you should immediately use /notification/schedule to create the
        schedule task.

        The request requires an eventCriteria object. This request must be
        authenticated with the `applicationKey` and `masterSecret`.
      operationId: postNotificationPushEvent
      requestBody:
        $ref: '#/components/requestBodies/NotificationPushEvent'
      summary: Create Push Message to Events
  /notification/push/segments:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    _id: 5245bc5b3e66a3b01f0024d4
                    message: notifications are queued
          description: Created
          headers: {}
      tags:
        - Messages
      description: >-
        Send a message to users in any of the specified `segments`.

        You can also schedule these messages, if `scheduled` is true you should
        immediately use /notification/schedule to create a schedule task.

        The request requires an array of segment IDs. This request must be
        authenticated with the `applicationKey` and `masterSecret`.
      operationId: postNotificationPushSegments
      requestBody:
        $ref: '#/components/requestBodies/NotificationPushSegments'
      summary: Create Push Message to Segments
  /notification/push/tags:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notifications are queued
          description: Created
      tags:
        - Messages
      description: >-
        Send a message to devices in any of the specified `tags`.

        You can also schedule these message, if `scheduled` is true you should
        immediately use /notification/schedule to create a schedule task.

        The request requires an array of tags. This request must be
        authenticated with the `applicationKey` and `masterSecret`.
      operationId: postNotificationPushTags
      requestBody:
        $ref: '#/components/requestBodies/NotificationPushTags'
      summary: Create Push Message to Tags
  '/notification/push/user/{userID}':
    post:
      parameters:
        - description: >-
            The user ID is the one the client device registered with, e.g., the
            user's email address.
          example: testuser@example.com
          in: path
          name: userID
          required: true
          schema:
            type: string
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notifications are queued
          description: Created
      tags:
        - Messages
      description: >-
        Send a message to one single user and its devices.

        You can also schedule a private message, if `scheduled` is true you
        should immediately use /notification/schedule to create a schedule task.

        The request requires an userID. This request must be authenticated with
        the `applicationKey` and `masterSecret`.
      operationId: postNotificationPushUser
      requestBody:
        $ref: '#/components/requestBodies/NotificationPushUser'
      summary: Create Push Message to User
  '/notification/push/device/{deviceID}':
    post:
      parameters:
        - description: >-
            The deviceID is the ID as registered by the device, e.g. APNS, FCM
            or Web Push token.
          example: bbff2ce9b547d2df4731bac277xxx
          in: path
          name: deviceID
          required: true
          schema:
            type: string
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notifications are queued
          description: Created
      tags:
        - Messages
      description: >-
        Send a message to a single device.

        You can also schedule this type of messages, if `scheduled` is true you
        should immediately use /notification/schedule to create a schedule task.

        The request requires a deviceID. This request must be authenticated with
        the `applicationKey` and `masterSecret`.
      operationId: postNotificationPushDevice
      requestBody:
        $ref: '#/components/requestBodies/NotificationPushDevice'
      summary: Create Push Message to Device
  /notification/push/triggered:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notifications are queued
          description: Created
      tags:
        - Messages
      description: >-
        Create a message to be used in automation connector or geo-trigger.

        You cannot schedule a triggered message.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationPushTriggered
      requestBody:
        $ref: '#/components/requestBodies/NotificationPushTriggered'
      summary: Create Triggered Push Message
  /notification/email/broadcast:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notification queued
          description: Created
      tags:
        - Messages
      description: >-
        Send a message to **all** email contacts.

        You can also schedule a broadcast, if `scheduled` is true you should
        immediately use /notification/schedule to create the schedule task.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationEmailBroadcast
      requestBody:
        $ref: '#/components/requestBodies/NotificationEmailBroadcast'
      summary: Create Email Message Broadcast
  /notification/email/criteria:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notifications are queued
          description: Created
      tags:
        - Messages
      description: >-
        Send a message to contacts that match a certain criteria.

        You can also schedule these messages, if `scheduled` is true you should
        immediately use /notification/schedule to create a schedule task.

        The request requires a criteria object. This request must be
        authenticated with the `applicationKey` and `masterSecret`.
      operationId: postNotificationEmailCriteria
      requestBody:
        $ref: '#/components/requestBodies/NotificationEmailCriteria'
      summary: Create Email Message to Criteria
  /notification/email/event:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notifications are queued
          description: Created
      tags:
        - Messages
      description: >-
        Send a message to any contact that executed an event.

        You can also schedule a message based on events, if `scheduled` is true
        you should immediately use /notification/schedule to create the schedule
        task.

        The request requires an eventCriteria object. This request must be
        authenticated with the `applicationKey` and `masterSecret`.
      operationId: postNotificationEmailEvent
      requestBody:
        $ref: '#/components/requestBodies/NotificationEmailEvent'
      summary: Create Email Message to Events
  /notification/email/segments:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notifications are queued
          description: Created
      tags:
        - Messages
      description: >-
        Send a message to users in any of the specified `segments`.

        You can also schedule these messages, if `scheduled` is true you should
        immediately use /notification/schedule to create a schedule task.

        The request requires an array of segment IDs. This request must be
        authenticated with the `applicationKey` and `masterSecret`.
      operationId: postNotificationEmailSegments
      requestBody:
        $ref: '#/components/requestBodies/NotificationEmailSegments'
      summary: Create Email Message to Segments
  /notification/email/tags:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notifications are queued
          description: Created
      tags:
        - Messages
      description: >-
        Send a message to contacts in any of the specified `tags`.

        You can also schedule these message, if `scheduled` is true you should
        immediately use /notification/schedule to create a schedule task.

        The request requires an array of tags. This request must be
        authenticated with the `applicationKey` and `masterSecret`.
      operationId: postNotificationEmailTags
      requestBody:
        $ref: '#/components/requestBodies/NotificationEmailTags'
      summary: Create Email Message to Tags
  '/notification/email/user/{userID}':
    post:
      parameters:
        - description: The user ID used when registering a contact.
          example: NL1234567890
          in: path
          name: userID
          required: true
          schema:
            type: string
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notifications are queued
          description: Created
      tags:
        - Messages
      description: >-
        Send a message to one single user and its email contacts.

        You can also schedule a private message, if `scheduled` is true you
        should immediately use /notification/schedule to create a schedule task.

        The request requires an userID. This request must be authenticated with
        the `applicationKey` and `masterSecret`.
      operationId: postNotificationEmailUser
      requestBody:
        $ref: '#/components/requestBodies/NotificationEmailUser'
      summary: Create Email Message to User
  '/notification/email/device/{deviceID}':
    post:
      parameters:
        - description: The contactID generated for this email contact.
          example: bbff2ce9b547d2df4731bac277xxx
          in: path
          name: deviceID
          required: true
          schema:
            type: string
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notifications are queued
          description: Created
      tags:
        - Messages
      description: >-
        Send a message to a single email contact.

        You can also schedule this type of messages, if `scheduled` is true you
        should immediately use /notification/schedule to create a schedule task.

        The request requires a deviceID. This request must be authenticated with
        the `applicationKey` and `masterSecret`.
      operationId: postNotificationEmailDevice
      requestBody:
        $ref: '#/components/requestBodies/NotificationEmailDevice'
      summary: Create Email Message to Contact
  /notification/email/triggered:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notifications are queued
          description: Created
      tags:
        - Messages
      description: >-
        Create a message to be used in automation connector.

        You cannot schedule a triggered message.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationEmailTriggered
      requestBody:
        $ref: '#/components/requestBodies/NotificationEmailTriggered'
      summary: Create Triggered Email Message
  /notification/sms/broadcast:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notifications are queued
          description: Created
      tags:
        - Messages
      description: >-
        Send a message to **all** phone numbers.

        You can also schedule a broadcast, if `scheduled` is true you should
        immediately use /notification/schedule to create the schedule task.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationSmsBroadcast
      requestBody:
        $ref: '#/components/requestBodies/NotificationSmsBroadcast'
      summary: Create SMS Message Broadcast
  /notification/sms/criteria:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notifications are queued
          description: Created
      tags:
        - Messages
      description: >-
        Send a message to sms numbers that match a certain criteria.

        You can also schedule these messages, if `scheduled` is true you should
        immediately use /notification/schedule to create a schedule task.

        The request requires a criteria object. This request must be
        authenticated with the `applicationKey` and `masterSecret`.
      operationId: postNotificationSmsCriteria
      requestBody:
        $ref: '#/components/requestBodies/NotificationSmsCriteria'
      summary: Create SMS Message to Criteria
  /notification/sms/event:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notifications are queued
          description: Created
      tags:
        - Messages
      description: >-
        Send a message to any sms number that executed an event.

        You can also schedule a message based on events, if `scheduled` is true
        you should immediately use /notification/schedule to create the schedule
        task.

        The request requires an eventCriteria object. This request must be
        authenticated with the `applicationKey` and `masterSecret`.
      operationId: postNotificationSmsEvent
      requestBody:
        $ref: '#/components/requestBodies/NotificationSmsEvent'
      summary: Create SMS Message to Events
  /notification/sms/segments:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notifications are queued
          description: Created
      tags:
        - Messages
      description: >-
        Send a message to users in any of the specified `segments`.

        You can also schedule these messages, if `scheduled` is true you should
        immediately use /notification/schedule to create a schedule task.

        The request requires an array of segment IDs. This request must be
        authenticated with the `applicationKey` and `masterSecret`.
      operationId: postNotificationSmsSegments
      requestBody:
        $ref: '#/components/requestBodies/NotificationSmsSegments'
      summary: Create SMS Message to Segments
  /notification/sms/tags:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notifications are queued
          description: Created
      tags:
        - Messages
      description: >-
        Send a message to a sms number in any of the specified `tags`.

        You can also schedule these message, if `scheduled` is true you should
        immediately use /notification/schedule to create a schedule task.

        The request requires an array of tags. This request must be
        authenticated with the `applicationKey` and `masterSecret`.
      operationId: postNotificationSmsTags
      requestBody:
        $ref: '#/components/requestBodies/NotificationSmsTags'
      summary: Create SMS Message to Tags
  '/notification/sms/user/{userID}':
    post:
      parameters:
        - description: The user ID used when registering a contact.
          example: NL1234567890
          in: path
          name: userID
          required: true
          schema:
            type: string
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notifications are queued
          description: Created
      tags:
        - Messages
      description: >-
        Send a message to one single user and its email contacts.

        You can also schedule a private message, if `scheduled` is true you
        should immediately use /notification/schedule to create a schedule task.

        The request requires an userID. This request must be authenticated with
        the `applicationKey` and `masterSecret`.
      operationId: postNotificationSmsUser
      requestBody:
        $ref: '#/components/requestBodies/NotificationSmsUser'
      summary: Create SMS Message to User
  '/notification/sms/device/{deviceID}':
    post:
      parameters:
        - description: The contactID generated for this email contact.
          example: bbff2ce9b547d2df4731bac277xxx
          in: path
          name: deviceID
          required: true
          schema:
            type: string
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notifications are queued
          description: Created
      tags:
        - Messages
      description: >-
        Send a message to a single sms number.

        You can also schedule this type of messages, if `scheduled` is true you
        should immediately use /notification/schedule to create a schedule task.

        The request requires a deviceID. This request must be authenticated with
        the `applicationKey` and `masterSecret`.
      operationId: postNotificationSmsDevice
      requestBody:
        $ref: '#/components/requestBodies/NotificationSmsDevice'
      summary: Create SMS Message to Phone
  /notification/sms/triggered:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notifications are queued
          description: Created
      tags:
        - Messages
      description: >-
        Create a message to be used in automation connector.

        You cannot schedule a triggered message.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationSmsTriggered
      requestBody:
        $ref: '#/components/requestBodies/NotificationSmsTriggered'
      summary: Create Triggered SMS Message
  /notification/system:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notifications are queued
          description: Created
      tags:
        - Messages
      description: >-
        System push messages are silent messages that will not generate any
        remote notification in the device's lock-screen or notification center.
        This endpoint will send a silent notifications to all your devices.
        Optionally you can also provide one of the following parameters:
        criteria, a list of tags, a list of tags and segments, a list of
        segments or a location. This will allow you to filter the devices you
        are trying to reach. In iOS, your app must declare
        **remote-notification** background mode.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationSystem
      requestBody:
        $ref: '#/components/requestBodies/NotificationSystemBroadcast'
      summary: Create System Push Message
  '/notification/system/user/{userID}':
    post:
      parameters:
        - description: The userID you are targeting
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: userID
          required: true
          schema:
            type: string
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notifications are queued
          description: Created
      tags:
        - Messages
      description: >-
        System push messages are silent messages that will not generate any
        remote notification in the device's lock-screen or notification center.
        This endpoint will send a silent notifications to a specific user and
        its devices. In iOS, your app must declare **remote-notification**
        background mode.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationSystemUser
      requestBody:
        $ref: '#/components/requestBodies/NotificationSystemUser'
      summary: System Push to User
  '/notification/system/device/{deviceID}':
    post:
      parameters:
        - description: The deviceID you are targeting
          example: 5245bc5b3e66a3b01f0024d4xxxx
          in: path
          name: deviceID
          required: true
          schema:
            type: string
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                _id: 5245bc5b3e66a3b01f0024d4
                message: notifications are queued
          description: Created
      tags:
        - Messages
      description: >-
        System push messages are silent messages that will not generate any
        remote notification in the device's lock-screen or notification center.
        This endpoint will send a silent notifications to a specific device. In
        iOS, your app must declare **remote-notification** background mode.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationSystemDevice
      requestBody:
        $ref: '#/components/requestBodies/NotificationSystemDevice'
      summary: System Push to Device
  '/notification/user/{userID}':
    get:
      parameters:
        - description: >-
            The user ID is the one the client device registered with, e.g., the
            user's email address.
          example: testuser@example.com
          in: path
          name: userID
          required: true
          schema:
            type: string
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 10
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                count: 2
                notifications:
                  - _id: 566acc80cbe343d7136ec9bf
                    account: 548985629f634350713ec9ee
                    actionCategory: null
                    actions:
                      - camera: false
                        id: 566acc80cbe343d7136ec9c1
                        keyboard: false
                        label: 'yes'
                        rules: []
                        target: ''
                        type: re.notifica.action.Callback
                      - camera: false
                        id: 566acc80cbe343d7136ec9c0
                        keyboard: false
                        label: 'no'
                        rules: []
                        target: ''
                        type: re.notifica.action.Callback
                    application: 5489b42ff23e5815132b492a
                    archived: false
                    attachments: []
                    badge: null
                    cleared: false
                    content: []
                    deviceID: null
                    location:
                      coordinates:
                        - 4.422683699999993
                        - 51.91263190000001
                      distance: 0.6928425313346089
                      type: Point
                    medium: push
                    message: Ready for beers?
                    rules: []
                    scheduled: false
                    scope: user
                    segments: []
                    showInList: true
                    sound: default
                    subtitle: This is a subtitle
                    tags: []
                    time: '2015-12-11T13:15:44.298Z'
                    title: This is a title
                    triggered: false
                    ttl: null
                    type: re.notifica.notification.Alert
                    userID: testuser@example.com
          description: OK
      tags:
        - Messages
      description: >-
        Retrieves the list of messages sent to a specific user.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getNotificationUser
      summary: Listt User Messages
  '/notification/device/{deviceID}':
    get:
      parameters:
        - description: >-
            The deviceID
          example: 5245bc5b3e66a3b01f0024d4xxxx
          in: path
          name: deviceID
          required: true
          schema:
            type: string
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 10
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                count: 2
                notifications:
                  - _id: 566acc80cbe343d7136ec9bf
                    account: 548985629f634350713ec9ee
                    actionCategory: null
                    actions:
                      - camera: false
                        id: 566acc80cbe343d7136ec9c1
                        keyboard: false
                        label: 'yes'
                        rules: []
                        target: ''
                        type: re.notifica.action.Callback
                      - camera: false
                        id: 566acc80cbe343d7136ec9c0
                        keyboard: false
                        label: 'no'
                        rules: []
                        target: ''
                        type: re.notifica.action.Callback
                    application: 5489b42ff23e5815132b492a
                    archived: false
                    attachments: []
                    badge: null
                    cleared: false
                    content: []
                    deviceID: 5245bc5b3e66a3b01f0024d4xxxx
                    location:
                      coordinates:
                        - 4.422683699999993
                        - 51.91263190000001
                      distance: 0.6928425313346089
                      type: Point
                    medium: push
                    message: Ready for beers?
                    rules: []
                    scheduled: false
                    scope: device
                    segments: []
                    showInList: true
                    sound: default
                    subtitle: This is a subtitle
                    tags: []
                    time: '2015-12-11T13:15:44.298Z'
                    title: This is a title
                    triggered: false
                    ttl: null
                    type: re.notifica.notification.Alert
                    userID: null
          description: OK
      tags:
        - Messages
      description: >-
        Retrieves the list of messages sent to a specific device.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getNotificationDevice
      summary: List Device Messages
  '/notification/{notification}':
    get:
      parameters:
        - description: The notification ID given whenever you create a message.
          in: path
          name: notification
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                notification:
                  tags: []
                  __v: 0
                  _id: 566acc80cbe343d7136ec9bf
                  account: 548985629f634350713ec9ee
                  actionCategory: null
                  actions:
                    - camera: false
                      id: 566acc80cbe343d7136ec9c1
                      keyboard: false
                      label: 'yes'
                      rules: []
                      target: ''
                      type: re.notifica.action.Callback
                    - camera: false
                      id: 566acc80cbe343d7136ec9c0
                      keyboard: false
                      label: 'no'
                      rules: []
                      target: ''
                      type: re.notifica.action.Callback
                  application: 5489b42ff23e5815132b492a
                  archived: false
                  attachments: []
                  badge: null
                  cleared: false
                  content: []
                  deviceID: null
                  location:
                    coordinates:
                      - 4.422683699999993
                      - 51.91263190000001
                    distance: 0.6928425313346089
                    type: Point
                  medium: push
                  message: Ready for beers?
                  rules: []
                  scheduled: false
                  scope: application
                  segments: []
                  showInList: true
                  sound: default
                  subtitle: This is a subtitle
                  time: '2015-12-11T13:15:44.298Z'
                  title: This is a title
                  triggered: false
                  ttl: null
                  type: re.notifica.notification.Alert
                  userID: testuser@example.com
          description: OK
      tags:
        - Messages
      description: >-
        Retrieve a specific message object.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getNotificationById
      summary: Get Message
  '/notification/{notification}/info':
    get:
      parameters:
        - description: >-
            The notification ID given whenever you create or retrieve a message
            object.
          in: path
          name: notification
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                info:
                  application: 5354f0bb3fff5452ff4c7c0
                  devices: 3
                  duration: 749
                  fails: 0
                  id: 543d90d0f4e6e1we3ad6576
                  notification: 543d90d0wew6e10309ad6575
                  opened: 0
                  queued: 3
                  replied: 0
                  sent: 3
                  status: finished
                  users: 0
          description: OK
      tags:
        - Messages
      description: >-
        Retrieve information about your message performance.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getNotificationInfo
      summary: Get Message Info
  /notification/log:
    get:
      parameters:
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 25
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
        - description: >-
            Use this to retrieve records since a specific date, overrides
            `If-Modified-Since` HTTP header
          example: '2016-01-01T12:00:00'
          in: query
          name: since
          required: false
          schema:
            type: string
        - description: The sorter order for your results
          example: asc
          in: query
          name: order
          required: false
          schema:
            default: desc
            enum:
              - asc
              - desc
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                log:
                  - _id: 543d90d0f4e6e1we3ad6576
                    application: 5354f0bb3fff5452ff4c7c0
                    date: '2016-02-29T10:46:00.111Z'
                    deviceID: d31b6529
                    message: Invalid token size
                    notification: 56d421uu073cc157eu3137
                    transport: APNS
          description: OK
      tags:
        - Messages
      description: >-
        Retrieve information about errors related to APNS, FCM, Web Push, Email
        and SMS feedback service.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getNotificationLog
      summary: Get Message Log
    delete:
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                message: log cleared
          description: OK
      tags:
        - Messages
      description: >-
        Clear the list of errors related to APNS and GCM feedback service.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: deleteNotificationLog
      summary: Delete Message Log
  /notification/schedule:
    get:
      parameters:
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                count: 1
                schedules:
                  - _id: 56d421uu073cc157eu3137
                    application: 5489b42ff23e5815132b492a
                    lastRun: '2016-08-26T23:00:10.273Z'
                    local: true
                    nextRun: '2016-08-26T23:15:04.958Z'
                    notification: 56d421uu073cc157eu3137
                    status: running
                    time: '2016-08-26 23:01'
          description: OK
      tags:
        - Message Schedule
      description: >-
        Returns a list of all schedules for your app

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getNotificationSchedule
      summary: Get Scheduled Tasks
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                schedule:
                  '#/components/schemas/ObjectCreated'
          description: Created
      tags:
        - Message Schedule
      description: >-
        Start a scheduled task for a previously created message.

        The property `local` determines if message should be sent on the
        device's local time or UTC.

        If `local` is true make sure the `time` is at least 14 hours from now to
        make sure the message will arrive in all timezones.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationSchedule
      requestBody:
        content:
          application/json:
            schema:
              properties:
                local:
                  description: >-
                    Defines if message should be sent on date and time of the
                    device. If false time will be considered UTC.
                  type: boolean
                  default: false
                notification:
                  description: The notification Id of the message to be schedule.
                  type: string
                time:
                  description: >-
                    The date and time (YYYY-MM-DD hh:mm) in which the message
                    should be sent.
                  type: string
                  example: 2016-08-26 23:01
                timezone:
                  description: >-
                    The timezone of the time in which the message
                    should be sent.
                  type: string
                  example: Europe/Amsterdam
              required:
                - notification
                - time
                - local
              type: object
      summary: Create Scheduled Message
  '/notification/schedule/fornotification/{notification}':
    get:
      parameters:
        - description: The notification Id for the message
          in: path
          name: notification
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                count: 1
                schedules:
                  - _id: 56d421uu073cc157eu3137
                    application: 5489b42ff23e5815132b492a
                    lastRun: '2016-08-26T23:00:10.273Z'
                    local: true
                    nextRun: '2016-08-26T23:15:04.958Z'
                    notification: 56d421uu073cc157eu3137
                    status: running
                    time: '2016-08-26 23:01'
          description: OK
      tags:
        - Message Schedule
      description: >-
        Returns a list of all scheduled tasks for a specific message

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getNotificationScheduleForNotification
      summary: Get Scheduled Tasks For Message
  '/notification/schedule/{schedule}':
    get:
      parameters:
        - description: The schedule Id
          in: path
          name: schedule
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                schedule:
                  _id: 56d421uu073cc157eu3137
                  application: 5489b42ff23e5815132b492a
                  lastRun: '2016-08-26T23:00:10.273Z'
                  local: true
                  nextRun: '2016-08-26T23:15:04.958Z'
                  notification: 56d421uu073cc157eu3137
                  status: running
                  time: '2016-08-26 23:01'
          description: OK
      tags:
        - Message Schedule
      description: >-
        Returns a schedule task object.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getNotificationScheduleById
      summary: Get Schedule Task
    put:
      parameters:
        - description: The schedule Id of the schedule to be canceled.
          in: path
          name: schedule
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                message: schedule updated
          description: OK
      tags:
        - Message Schedule
      description: >-
        Modifies a schedule task for a message. Can only be applied to a
        schedule that is currently `scheduled`. Attempts to modify a currently
        `running`, `finished` or `canceled` schedule result in a `400`.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: putNotificationScheduleById
      requestBody:
        content:
          application/json:
            schema:
              properties:
                local:
                  description: >-
                    Defines if message should be sent on date and time of the
                    device. If false time will be considered UTC.
                  type: boolean
                  default: false
                time:
                  description: >-
                    The date and time (YYYY-MM-DD hh:mm) in which the message
                    should be sent.
                  type: string
                  example: 2016-08-26 23:01
                timezone:
                  description: >-
                    The timezone of the time in which the message
                    should be sent.
                  type: string
                  example: Europe/Amsterdam
              type: object
      summary: Update Schedule Task
    delete:
      parameters:
        - description: The schedule Id of the schedule to be canceled.
          in: path
          name: schedule
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                message: schedule canceled
          description: OK
      tags:
        - Message Schedule
      description: >-
        Cancels a currently `scheduled` or `running` schedule.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: deleteNotificationScheduleById
      summary: Cancel Schedule
  /notification/template:
    get:
      parameters:
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 25
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
        - description: 'The string to search for in name, title, subtitle and message'
          example: My great template
          in: query
          name: search
          required: false
          schema:
            type: string
        - description: 'The string to search for in message, title, subtitle and subject'
          example: My great template
          in: query
          name: message
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
      tags:
        - Message Template
      description: List all templates for this app
      operationId: getNotificationTemplate
      summary: List Templates
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                template:
                  $ref: '#/components/schemas/ObjectCreated'
          description: Created
      tags:
        - Message Template
      description: >-
        Create a template object.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationTemplate
      requestBody:
        content:
          application/json:
            schema:
              properties:
                actionCategory:
                  description: >-
                    Use a previously created Rich Push template for your
                    message. Use the name of the template for this property and
                    the actions in that template as the actions for this
                    notification. This will enable actionable notifications from
                    the notification center in both iOS and Android.
                  type: string
                actions:
                  description: >-
                    Adds one or more interactions to a notification. An array of
                    Action objects. Please refer to Action objects for all types
                    available.
                  items: {}
                  type: array
                attachments:
                  description: >-
                    An object containing the URL to an image either uploaded
                    into our platform or hosted in any public web server.
                  items: {}
                  type: array
                badge:
                  description: >-
                    This is a iOS only property. A badge will be displayed over
                    your app icon whenever a notification arrives. Use a number
                    from 1 to 9999.
                  type: number
                content:
                  description: >-
                    An array of Content objects according to the type of
                    Notification. Please refer to Content types for all
                    available types.
                  items: {}
                  type: array
                extra:
                  $ref: '#/components/schemas/MessageExtra'
                  description: >-
                    A valid one-level JSON object. This is useful if you need to
                    send extra data that you will need to proccess soon the
                    notification arrives.
                languages:
                  description: >-
                    The list of localized content language identifiers used in
                    localizedContent. When included, you must also provide a
                    list of localizedContent objects in the same order.
                  items: {}
                  type: array
                lights:
                  $ref: '#/components/schemas/MessageLights'
                  description: >-
                    An object containing a color string ("white", "red",
                    "#rrggbb", "#aarrggbb") and the on/off time in milliseconds.
                    Colors are only applicable to Android and will be displayed
                    by hardware as accurately as possible.
                localizedContent:
                  description: >-
                    Provides content for all the language identifiers provided
                    in languages.
                  items: {}
                  type: array
                medium:
                  description: >-
                    The channel which the template was created for. Accepted
                    mediums are: push, email and sms.
                  type: string
                message:
                  description: >-
                    Short and concise message. This is the first thing your user
                    sees, make sure it is relevant and that somehow summarizes
                    what you intend to say.
                  type: string
                name:
                  description: The name for your template.
                  type: string
                push:
                  description: >-
                    Specify if this message should generate a remote
                    notification. By default teh value of this property is true.
                  type: boolean
                rate:
                  description: >-
                    Number of messages per second that should be sent using this
                    template.
                  type: number
                rules:
                  description: >-
                    Adds one or more rules to a notification. An array of rules
                    objects. Please refer to Rules objects for all types
                    available.
                  items: {}
                  type: array
                sender:
                  $ref: '#/components/schemas/MessageSender'
                  description: >-
                    An object containing the sender name and address for this
                    template. Applicable only for email templates.
                sound:
                  description: >-
                    Name of sound to play. `default` means use the default sound
                    as set by the user, any other string will be looked up as
                    sound file on the device (`mp3` on Android, `aiff` on iOS).
                  type: string
                subject:
                  description: The subject for an email template.
                  type: string
                subtitle:
                  description: >-
                    With SDK 1.9 and up, iOS 10 and up and Android 5 and up
                    messages support a title which will be shown in the
                    lock-screen or notification center.
                  type: string
                title:
                  description: >-
                    With SDK 1.9 and up, iOS 10 and up and Android 5 and up
                    messages support a title which will be shown in the
                    lock-screen or notification center.
                  type: string
                ttl:
                  description: >-
                    Number of seconds the message will be attempted to be
                    delivered by APNS or GCM.
                  type: number
                type:
                  description: >-
                    Defines the type of content to show. Types of messages are
                    represented by namespaces. Message types should match the
                    following namespace: re.notifica.notification.*. Please
                    refer to Message Types for all available types.
                  type: string
              required:
                - medium
                - type
                - name
                - title
                - subtitle
                - subject
                - message
              type: object
      summary: Create Template
  '/notification/template/{template}':
    get:
      parameters:
        - description: The Notificare ID of the template
          in: path
          name: template
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          description: OK
      tags:
        - Message Template
      description: >-
        Retrieve a template object.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: getNotificationTemplateById
      summary: Get Template
    put:
      parameters:
        - description: The Notificare ID of the template
          in: path
          name: template
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                message: template updated
          description: OK
      tags:
        - Message Template
      description: >-
        Modify a template object.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: putNotificationTemplateById
      requestBody:
        content:
          application/json:
            schema:
              example:
                actions:
                  - label: Please come in
                    rules:
                      - params:
                          - 3445bc5b4563b01f0f5
                        type: re.notifica.rule.segment.Add
                    type: re.notifica.action.Callback
                  - label: Go away
                    rules:
                      - params:
                          - 3445bc5b4563b01f0f5
                        type: re.notifica.rule.segment.Remove
                    type: re.notifica.action.Callback
                content:
                  - data: >-
                      Because this long text will never fit inside a simple
                      alert or toast, we send it along as content and it will be
                      automatically displayed when the user opens the
                      notification
                    type: re.notifica.content.HTML
                medium: push
                message: Hello world!
                name: My Push Template
                sound: default
                ttl: 3600
                type: re.notifica.notification.Alert
              properties:
                actions:
                  items:
                    properties:
                      label:
                        type: string
                      rules:
                        items:
                          properties:
                            params:
                              items:
                                type: string
                              type: array
                            type:
                              type: string
                          required:
                            - type
                            - params
                          type: object
                        type: array
                      type:
                        type: string
                    required:
                      - type
                      - label
                      - rules
                    type: object
                  type: array
                content:
                  items:
                    properties:
                      data:
                        type: string
                      type:
                        type: string
                    type: object
                  type: array
                medium:
                  type: string
                message:
                  type: string
                name:
                  type: string
                sound:
                  type: string
                ttl:
                  type: number
                type:
                  type: string
              type: object
      summary: Update Template
    delete:
      parameters:
        - description: The Notificare ID of the template
          in: path
          name: template
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              example:
                message: template deleted
          description: OK
      tags:
        - Message Template
      description: >-
        Destroy a template. This operation cannot be undone.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: deleteNotificationTemplateById
      summary: Delete Template
  /notification/test/email/broadcast:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                count: '42'
          description: Created
      tags:
        - Message Test
      description: >-
        Test a message to **all** email contacts. This call must be
        authenticated with the `applicationKey` and `masterSecret`.
      operationId: postNotificationTestEmailBroadcast
      requestBody:
        $ref: '#/components/requestBodies/NotificationTestEmailBroadcast'
      summary: Test Email Message Broadcast
  /notification/test/email/criteria:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                test:
                  $ref: '#/components/schemas/ObjectCreated'
          description: Created
      tags:
        - Message Test
      description: >-
        Test a message using a specific custom criteria. The request requires an
        eventCriteria object.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationTestEmailCriteria
      requestBody:
        $ref: '#/components/requestBodies/NotificationTestEmailCriteria'
      summary: Test Email Message to Criteria
  /notification/test/email/event:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                test:
                  $ref: '#/components/schemas/ObjectCreated'
          description: Created
      tags:
        - Message Test
      description: >-
        Test a message to email contacts that executed a specific event. The
        request requires an eventCriteria object.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationTestEmailEvent
      requestBody:
        $ref: '#/components/requestBodies/NotificationTestEmailEvent'
      summary: Test Email Message to Events
  /notification/test/email/segments:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                count: '42'
          description: Created
      tags:
        - Message Test
      description: >-
        Test a message to users with email contacts with any of the specified
        `segments`. The request requires an array of segment IDs.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationTestEmailSegments
      requestBody:
        $ref: '#/components/requestBodies/NotificationTestEmailSegments'
      summary: Test Email Message to Segments
  /notification/test/email/tags:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                count: '42'
          description: Created
      tags:
        - Message Test
      description: >-
        Test a message to email contacts with any of the specified `tags`. This
        request requires an array of tags.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationTestEmailTags
      requestBody:
        $ref: '#/components/requestBodies/NotificationTestEmailtags'
      summary: Test Email Message to Tags
  '/notification/test/email/user/{userID}':
    post:
      parameters:
        - description: The userID assigned to an email contact.
          example: testuser@example.com
          in: path
          name: userID
          required: true
          schema:
            type: string
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                count: '42'
          description: Created
      tags:
        - Message Test
      description: >-
        Test a message to a user and its email contacts.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationTestEmailUser
      requestBody:
        $ref: '#/components/requestBodies/NotificationTestEmailUser'
      summary: Test Email Message to User
  '/notification/test/email/device/{deviceID}':
    post:
      parameters:
        - description: The contactID generated for an email address.
          example: bbff2ce9b547d2df4731bac277xxx
          in: path
          name: deviceID
          required: true
          schema:
            type: string
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                count: '42'
          description: Created
      tags:
        - Message Test
      description: >-
        Test a message to a single email contact.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationTestEmailDevice
      requestBody:
        $ref: '#/components/requestBodies/NotificationTestEmailDevice'
      summary: Test Email Message to Contact
  /notification/test/push/broadcast:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                count: '42'
          description: Created
          headers: {}
      tags:
        - Message Test
      description: >-
        Test a message to **all** push devices. This call must be authenticated
        with the `applicationKey` and `masterSecret`.
      operationId: postNotificationTestPushBroadcast
      requestBody:
        $ref: '#/components/requestBodies/Test_Push_Message_BroadcastBody'
      summary: Test Push Message Broadcast
  /notification/test/push/criteria:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                test:
                  $ref: '#/components/schemas/ObjectCreated'
          description: Created
      tags:
        - Message Test
      description: >-
        Test a message using a specific custom criteria. The request requires an
        eventCriteria object.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationTestPushCriteria
      requestBody:
        $ref: '#/components/requestBodies/NotificationTestPushCriteria'
      summary: Test Push Message to Criteria
  /notification/test/push/event:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                test:
                  $ref: '#/components/schemas/ObjectCreated'
          description: Created
      tags:
        - Message Test
      description: >-
        Test a message to push devices that executed a specific event. The
        request requires an eventCriteria object.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationTestPushEvent
      requestBody:
        $ref: '#/components/requestBodies/NotificationTestPushEvent'
      summary: Test Push Message to Events
  /notification/test/push/segments:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                count: '42'
          description: Created
      tags:
        - Message Test
      description: >-
        Test a message to users with push devices with any of the specified
        `segments`. The request requires an array of segment IDs.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationTestPushSegments
      requestBody:
        $ref: '#/components/requestBodies/NotificationTestPushSegments'
      summary: Test Push Message to Segments
  /notification/test/push/tags:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                count: '42'
          description: Created
      tags:
        - Message Test
      description: >-
        Test a message to push devices with any of the specified `tags`. This
        request requires an array of tags.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationTestPushTags
      requestBody:
        $ref: '#/components/requestBodies/NotificationTestPushTags'
      summary: Test Push Message to Tags
  '/notification/test/push/user/{userID}':
    post:
      parameters:
        - description: >-
            The user ID is the one the client device registered with, e.g., the
            user's email address.
          example: testuser@example.com
          in: path
          name: userID
          required: true
          schema:
            type: string
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                count: '42'
          description: Created
      tags:
        - Message Test
      description: >-
        Test a message to a user and its push devices.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationTestPushUser
      requestBody:
        $ref: '#/components/requestBodies/NotificationTestPushUser'
      summary: Test Push Message to User
  '/notification/test/push/device/{deviceID}':
    post:
      parameters:
        - description: >-
            The deviceID is the ID as registered by the device, e.g. APNS token
            or GCM registration ID.
          example: bbff2ce9b547d2df4731bac277xxx
          in: path
          name: deviceID
          required: true
          schema:
            type: string
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                count: '42'
          description: Created
      tags:
        - Message Test
      description: >-
        Test a message to a single push device.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationTestPushDevice
      requestBody:
        $ref: '#/components/requestBodies/NotificationTestPushDevice'
      summary: Test Push Message to Device
  /notification/test/sms/broadcast:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                count: '42'
          description: Created
      tags:
        - Message Test
      description: >-
        Test a message to **all** phone numbers. This call must be authenticated
        with the `applicationKey` and `masterSecret`.
      operationId: postNotificationTestSmsBroadcast
      requestBody:
        $ref: '#/components/requestBodies/NotificationTestSmsBroadcast'
      summary: Test SMS Message Broadcast
  /notification/test/sms/criteria:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                test:
                  $ref: '#/components/schemas/ObjectCreated'
          description: Created
      tags:
        - Message Test
      description: >-
        Test a message using a specific custom criteria. The request requires an
        eventCriteria object.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationTestSmsCriteria
      requestBody:
        $ref: '#/components/requestBodies/NotificationTestSmsCriteria'
      summary: Test SMS Message to Criteria
  /notification/test/sms/event:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                test:
                  $ref: '#/components/schemas/ObjectCreated'
          description: Created
      tags:
        - Message Test
      description: >-
        Test a message to phone numbers that executed a specific event. The
        request requires an eventCriteria object.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationTestSmsEvent
      requestBody:
        $ref: '#/components/requestBodies/NotificationTestSmsEvent'
      summary: Test SMS Message to Events
  /notification/test/sms/segments:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                count: '42'
          description: Created
      tags:
        - Message Test
      description: >-
        Test a message to users with phone numbers with any of the specified
        `segments`. The request requires an array of segment IDs.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationTestSmsSegments
      requestBody:
        $ref: '#/components/requestBodies/NotificationTestSmsSegments'
      summary: Test SMS Message to Segments
  /notification/test/sms/tags:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                count: '42'
          description: Created
      tags:
        - Message Test
      description: >-
        Test a message to phone numbers with any of the specified `tags`. This
        request requires an array of tags.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationTestSmsTags
      requestBody:
        $ref: '#/components/requestBodies/NotificationTestSmsTags'
      summary: Test SMS Message to Tags
  '/notification/test/sms/user/{userID}':
    post:
      parameters:
        - description: The userID assigned to an email contact.
          example: testuser@example.com
          in: path
          name: userID
          required: true
          schema:
            type: string
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                count: '42'
          description: Created
      tags:
        - Message Test
      description: >-
        Test a message to a user and its phone numbers.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationTestSmsUser
      requestBody:
        $ref: '#/components/requestBodies/NotificationTestSmsUser'
      summary: Test SMS Message to User
  '/notification/test/sms/device/{deviceID}':
    post:
      parameters:
        - description: The numberID generated for a phone number.
          example: bbff2ce9b547d2df4731bac277xxx
          in: path
          name: deviceID
          required: true
          schema:
            type: string
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              example:
                count: '42'
          description: Created
      tags:
        - Message Test
      description: >-
        Test a message to a single phone number.

        This request must be authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: postNotificationTestSmsDevice
      requestBody:
        $ref: '#/components/requestBodies/NotificationTestSmsDevice'
      summary: Test SMS Message to Phone
  /pass:
    get:
      parameters:
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    count: 2
                    passes:
                      - _id: 5501894253058ca5269a9928
                        application: 5354f0bb3fa544452ff4c7c0
                        barcode: 402ab90b-65b5-4b4f-91fa-9823b2972f85
                        data:
                          auxiliaryFields: []
                          backFields: []
                          background: null
                          backgroundColor: 'rgb(0,0,0)'
                          barcode:
                            format: PKBarcodeFormatQR
                            messageEncoding: iso-8859-1
                          description: coupon example
                          footer: null
                          foregroundColor: 'rgb(255,255,255)'
                          headerFields: []
                          icon: >-
                            https://push.notifica.re/upload/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/aa2a7d561c6ba9f99f169a38a92dc0ac98d5f5a6cec0b4bea447e62e70e0ea96
                          labelColor: 'rgb(255,255,255)'
                          logo: >-
                            https://push.notifica.re/upload/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/7e6166684680598ff63894fbc837db244a1d98ea02793b414845a23f876f31ef
                          logoText: My Company
                          primaryFields:
                            - key: discount
                              label: discount
                              string: true
                              textAlignment: PKTextAlignmentLeft
                              value: 20% off
                          secondaryFields:
                            - key: expires
                              label: expires
                              string: true
                              textAlignment: PKTextAlignmentLeft
                              value: 31-12-2015
                          strip: >-
                            https://push.notifica.re/upload/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/827a04cf2e5f8653f544432a72fc217409c57af0f0068fd0696f374e183e6b14
                          suppressStripShine: false
                          thumbnail: null
                          transitType: null
                        passbook: 54e135049c2cad772e7c0de0
                        serial: 402ab90b-65b5-4b4f-91fa-9823b2972f85
          description: OK
          headers: {}
      tags:
        - Pass
      description: >-
        Get all passes for an application.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: Get Passes
      summary: Get Passes
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    pass:
                      _id: 5245bc5b3e66a3b01f0024d4
          description: Created
          headers: {}
      tags:
        - Pass
      description: >-
        Create a new pass. You should first create a pass template to help you
        bootstrap a new pass. Please read the [Pass
        Template](http://docs.notificare.apiary.io/#reference/pass-templates)
        endpoints to learn how to create pass templates. Passes will require
        images, see also the
        [Uploads](http://docs.notificare.apiary.io/#reference/upload) endpoints
        to learn how to upload a file.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: Create Pass
      requestBody:
        content:
          application/json:
            schema:
              properties:
                active:
                  description: A property flagging if the pass is active or not.
                  type: boolean
                barcode:
                  description: >-
                    A custom string to be used as the pass barcode. We will
                    generate one for you if this property is not present.
                  type: string
                data:
                  $ref: '#/components/schemas/PassData'
                  description: >-
                    The data object from a passbook template, where the fields
                    (headerFields, primaryFields, secondaryFields,
                    auxiliaryFields, backFields) should contain a value
                    property.
                limit:
                  description: >-
                    When using `limit` as a redeem option, you should provide
                    the number of times the card can be redeemed.
                  type: number
                passbook:
                  allOf:
                    - $ref: '#/components/schemas/ObjectId'
                    - properties: {}
                      type: object
                  description: The passbook template used to create a pass.
                redeem:
                  description: >-
                    A pass supports one of 3 modes (always, once, limit) for
                    redemption.
                  enum:
                    - always
                    - once
                    - limit
                  type: string
              required:
                - passbook
                - redeem
                - data
              type: object
      summary: Create Pass
  '/pass/barcode/forserial/{serial}':
    get:
      parameters:
        - description: The serial number of an active pass.
          example: 402ab90b-65b5-4b4f-91fa-9823b2972f85
          in: path
          name: serial
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            image/png:
              examples:
                response:
                  value: ''
          description: OK
          headers: {}
      tags:
        - Pass
      description: |-
        Generate a barcode for a specific pass using the serial UUID.
        This request does not require authentication.
      operationId: Generate Barcode By Serial
      summary: Generate Barcode By Serial
  '/pass/barcode/{type}/{code}':
    get:
      parameters:
        - description: The barcode type.
          example: qr
          in: path
          name: type
          required: true
          schema:
            type: string
        - description: The code to generate a barcode for.
          example: xxx-yyy-zzzz-123456
          in: path
          name: code
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            image/png:
              examples:
                response:
                  value: ''
          description: OK
          headers: {}
      tags:
        - Pass
      description: |-
        Generate a barcode for a specific type and code.
        This request does not require authentication.

        ### Types:

        ***

        pdf417

        ***

        qr

        ***

        aztec

        ***

        code128

        ***
      operationId: Generate a Barcode By Barcode
      summary: Generate a Barcode By Barcode
  '/pass/forbarcode/{barcode}':
    get:
      parameters:
        - description: The barcode of the pass.
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: barcode
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    _id: 5501894253058ca5269a9928
                    application: 5354f0bb3fa544452ff4c7c0
                    data:
                      auxiliaryFields: []
                      backFields: []
                      background: null
                      backgroundColor: 'rgb(0,0,0)'
                      barcode:
                        format: PKBarcodeFormatQR
                        messageEncoding: iso-8859-1
                      description: coupon example
                      footer: null
                      foregroundColor: 'rgb(255,255,255)'
                      headerFields: []
                      icon: >-
                        https://push.notifica.re/upload/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/aa2a7d561c6ba9f99f169a38a92dc0ac98d5f5a6cec0b4bea447e62e70e0ea96
                      labelColor: 'rgb(255,255,255)'
                      logo: >-
                        https://push.notifica.re/upload/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/7e6166684680598ff63894fbc837db244a1d98ea02793b414845a23f876f31ef
                      logoText: lebkov
                      primaryFields:
                        - key: discount
                          label: discount
                          string: true
                          textAlignment: PKTextAlignmentLeft
                          value: 20% off
                      secondaryFields:
                        - key: expires
                          label: expires
                          string: true
                          textAlignment: PKTextAlignmentLeft
                          value: 31-12-2015
                      strip: >-
                        https://push.notifica.re/upload/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/827a04cf2e5f8653f544432a72fc217409c57af0f0068fd0696f374e183e6b14
                      suppressStripShine: false
                      thumbnail: null
                      transitType: null
                    passbook: 54e135049c2cad772e7c0de0
                    serial: 402ab90b-65b5-4b4f-91fa-9823b2972f85
          description: OK
          headers: {}
      tags:
        - Pass
      description: >-
        Get a pass object using the barcode string.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: Pass By Barcode
      summary: Pass By Barcode
  '/pass/forserial/{serial}':
    get:
      parameters:
        - description: The serial of the pass.
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: serial
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    _id: 5501894253058ca5269a9928
                    application: 5354f0bb3fa544452ff4c7c0
                    data:
                      auxiliaryFields: []
                      backFields: []
                      background: null
                      backgroundColor: 'rgb(0,0,0)'
                      barcode:
                        format: PKBarcodeFormatQR
                        messageEncoding: iso-8859-1
                      description: coupon example
                      footer: null
                      foregroundColor: 'rgb(255,255,255)'
                      headerFields: []
                      icon: >-
                        https://push.notifica.re/upload/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/aa2a7d561c6ba9f99f169a38a92dc0ac98d5f5a6cec0b4bea447e62e70e0ea96
                      labelColor: 'rgb(255,255,255)'
                      logo: >-
                        https://push.notifica.re/upload/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/7e6166684680598ff63894fbc837db244a1d98ea02793b414845a23f876f31ef
                      logoText: lebkov
                      primaryFields:
                        - key: discount
                          label: discount
                          string: true
                          textAlignment: PKTextAlignmentLeft
                          value: 20% off
                      secondaryFields:
                        - key: expires
                          label: expires
                          string: true
                          textAlignment: PKTextAlignmentLeft
                          value: 31-12-2015
                      strip: >-
                        https://push.notifica.re/upload/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/827a04cf2e5f8653f544432a72fc217409c57af0f0068fd0696f374e183e6b14
                      suppressStripShine: false
                      thumbnail: null
                      transitType: null
                    passbook: 54e135049c2cad772e7c0de0
                    serial: 402ab90b-65b5-4b4f-91fa-9823b2972f85
          description: OK
          headers: {}
      tags:
        - Pass
      description: >-
        Get a pass object using the serial string.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: Get Pass By Serial
      summary: Get Pass By Serial
  '/pass/pkpass/{serial}':
    get:
      parameters:
        - description: The serial number of an active pass.
          example: 402ab90b-65b5-4b4f-91fa-9823b2972f85
          in: path
          name: serial
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/vnd.pkpass:
              examples:
                response:
                  value: ''
          description: OK
          headers: {}
      tags:
        - Pass
      description: |-
        Download a pass using a serial UUID.
        This request does not require authentication.
      operationId: Download Pass
      summary: Download Pass
  '/pass/redeem/{barcode}':
    put:
      parameters:
        - description: The barcode string of an active pass.
          example: 402ab90b-65b5-4b4f-91fa-9823b2972f85
          in: path
          name: barcode
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    message: pass redeemed
          description: OK
          headers: {}
      tags:
        - Pass
      description: >-
        Redeem a pass using a barcode string.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: Redeem Pass
      summary: Redeem Pass
  '/pass/{pass}':
    delete:
      parameters:
        - description: The id of an active pass.
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: pass
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    message: pass deleted
          description: OK
          headers: {}
      tags:
        - Pass
      description: >-
        Delete a pass. This operation cannot be undone.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: Delete Pass
      summary: Delete Pass
    get:
      parameters:
        - description: The id of pass.
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: pass
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    _id: 5501894253058ca5269a9928
                    application: 5354f0bb3fa544452ff4c7c0
                    barcode: 402ab90b-65b5-4b4f-91fa-9823b2972f85
                    data:
                      auxiliaryFields: []
                      backFields: []
                      background: null
                      backgroundColor: 'rgb(0,0,0)'
                      barcode:
                        format: PKBarcodeFormatQR
                        messageEncoding: iso-8859-1
                      description: coupon example
                      footer: null
                      foregroundColor: 'rgb(255,255,255)'
                      headerFields: []
                      icon: >-
                        https://push.notifica.re/upload/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/aa2a7d561c6ba9f99f169a38a92dc0ac98d5f5a6cec0b4bea447e62e70e0ea96
                      labelColor: 'rgb(255,255,255)'
                      logo: >-
                        https://push.notifica.re/upload/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/7e6166684680598ff63894fbc837db244a1d98ea02793b414845a23f876f31ef
                      logoText: lebkov
                      primaryFields:
                        - key: discount
                          label: discount
                          string: true
                          textAlignment: PKTextAlignmentLeft
                          value: 20% off
                      secondaryFields:
                        - key: expires
                          label: expires
                          string: true
                          textAlignment: PKTextAlignmentLeft
                          value: 31-12-2015
                      strip: >-
                        https://push.notifica.re/upload/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/827a04cf2e5f8653f544432a72fc217409c57af0f0068fd0696f374e183e6b14
                      suppressStripShine: false
                      thumbnail: null
                      transitType: null
                    passbook: 54e135049c2cad772e7c0de0
                    serial: 402ab90b-65b5-4b4f-91fa-9823b2972f85
          description: OK
          headers: {}
      tags:
        - Pass
      description: >-
        Get a pass object.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: Get Pass
      summary: Get Pass
    put:
      parameters:
        - description: The id of an active pass.
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: pass
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    message: pass updated
          description: OK
          headers: {}
      tags:
        - Pass
      description: >-
        Modify a pass.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: Update Pass
      requestBody:
        content:
          application/json:
            schema:
              properties:
                active:
                  description: A property flagging if the pass is active or not.
                  type: boolean
                barcode:
                  description: >-
                    A custom string to be used as the pass barcode. We will
                    generate one for you if this property is not present.
                  type: string
                data:
                  $ref: '#/components/schemas/PassData'
                  description: >-
                    The data object from a passbook template, where the fields
                    (headerFields, primaryFields, secondaryFields,
                    auxiliaryFields, backFields) should contain a value
                    property.
                limit:
                  description: >-
                    When using `limit` as a redeem option, you should provide
                    the number of times the card can be redeemed.
                  type: number
                passbook:
                  allOf:
                    - $ref: '#/components/schemas/ObjectId'
                    - properties: {}
                      type: object
                  description: The passbook template used to create a pass.
                redeem:
                  description: >-
                    A pass supports one of 3 modes (always, once, limit) for
                    redemption.
                  type: string
              required:
                - passbook
                - redeem
                - data
              type: object
      summary: Update Pass
  /passbook:
    get:
      parameters:
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    count: 2
                    passbooks:
                      - __v: 0
                        _id: 5501894253058ca5269a9928
                        active: false
                        application: 5354f0bb3fa544452ff4c7c0
                        data:
                          auxiliaryFields: []
                          backFields: []
                          background: null
                          backgroundColor: 'rgb(0,0,0)'
                          barcode:
                            format: PKBarcodeFormatQR
                            messageEncoding: iso-8859-1
                          description: coupon example
                          footer: null
                          foregroundColor: 'rgb(255,255,255)'
                          headerFields: []
                          icon: >-
                            https://push.notifica.re/upload/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/aa2a7d561c6ba9f99f169a38a92dc0ac98d5f5a6cec0b4bea447e62e70e0ea96
                          labelColor: 'rgb(255,255,255)'
                          logo: >-
                            https://push.notifica.re/upload/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/7e6166684680598ff63894fbc837db244a1d98ea02793b414845a23f876f31ef
                          logoText: lebkov
                          primaryFields:
                            - key: discount
                              label: discount
                              string: true
                              textAlignment: PKTextAlignmentLeft
                          secondaryFields:
                            - key: expires
                              label: expires
                              string: true
                              textAlignment: PKTextAlignmentLeft
                          strip: >-
                            https://push.notifica.re/upload/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/827a04cf2e5f8653f544432a72fc217409c57af0f0068fd0696f374e183e6b14
                          suppressStripShine: false
                          thumbnail: null
                          transitType: null
                        name: coupon example
                        passStyle: coupon
          description: OK
          headers: {}
      tags:
        - Pass Templates
      description: >-
        Get all pass templates for an application.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: Get Pass Templates
      summary: Get Pass Templates
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    passbook:
                      _id: 5245bc5b3e66a3b01f0024d4
          description: Created
          headers: {}
      tags:
        - Pass Templates
      description: >-
        Create a new pass template.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.


        Fields cannot have a `key` that is a reserved property. Reserved keys
        are:


        + `relevant_date`


        + `expiration_date`


        + `voided`


        + `barcode_message`


        + `barcode_alt_text`


        + `barcode_show_alt_text`


        + `barcode_format`


        + `barcode_message_encoding`


        + `description`


        + `beacon_proximity_uuid`


        + `beacon_major`


        + `beacon_minor`


        + `beacon_relevant_text`


        + `location_latitude`


        + `location_longitude`


        + `location_altitude`


        + `location_relevant_text`


        + `location_region_id`


        + `location_region_major`


        + `message`


        + `title`


        + `subtitle`


        + `user_info`


        + `app_launch_url`


        + `associated_store_identifiers`


        + `max_distance`


        + `background_color`


        + `foreground_color`


        + `grouping_identifier`


        + `label_color`


        + `logo_text`


        + `suppress_strip_shine`


        + `nfc_message`


        + `nfc_encryption_public_key`


        + `transit_type`


        + `redeem_type`


        + `redeem_limit`
      operationId: Create Pass Template
      requestBody:
        $ref: '#/components/requestBodies/Create_Pass_TemplateBody'
      summary: Create Pass Template
  '/passbook/{passbook}':
    delete:
      parameters:
        - description: The id of an active passbook template.
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: passbook
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    message: passbook deleted
          description: OK
          headers: {}
      tags:
        - Pass Templates
      description: >-
        Delete a pass template. This operation cannot be undone.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: Delete Pass Template
      summary: Delete Pass Template
    get:
      parameters:
        - description: The id of an active passbook template.
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: passbook
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    _id: 5501894253058ca5269a9928
                    application: 5354f0bb3fa544452ff4c7c0
                    data:
                      auxiliaryFields: []
                      backFields: []
                      background: null
                      backgroundColor: 'rgb(0,0,0)'
                      barcode:
                        format: PKBarcodeFormatQR
                        messageEncoding: iso-8859-1
                      description: coupon example
                      footer: null
                      foregroundColor: 'rgb(255,255,255)'
                      headerFields: []
                      icon: >-
                        https://push.notifica.re/upload/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/aa2a7d561c6ba9f99f169a38a92dc0ac98d5f5a6cec0b4bea447e62e70e0ea96
                      labelColor: 'rgb(255,255,255)'
                      logo: >-
                        https://push.notifica.re/upload/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/7e6166684680598ff63894fbc837db244a1d98ea02793b414845a23f876f31ef
                      logoText: lebkov
                      primaryFields:
                        - key: discount
                          label: discount
                          string: true
                          textAlignment: PKTextAlignmentLeft
                      secondaryFields:
                        - key: expires
                          label: expires
                          string: true
                          textAlignment: PKTextAlignmentLeft
                      strip: >-
                        https://push.notifica.re/upload/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/827a04cf2e5f8653f544432a72fc217409c57af0f0068fd0696f374e183e6b14
                      suppressStripShine: false
                      thumbnail: null
                      transitType: null
                    name: coupon example
                    passStyle: coupon
          description: OK
          headers: {}
      tags:
        - Pass Templates
      description: >-
        Get a pass template object.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: Get Pass Template
      summary: Get Pass Template
    put:
      parameters:
        - description: The id of an active passbook template.
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: passbook
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    message: passbook updated
          description: OK
          headers: {}
      tags:
        - Pass Templates
      description: >-
        Modify a pass template.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: Update Pass Template
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  $ref: '#/components/schemas/PassData'
                  description: >-
                    The data object containing all the information, colours and
                    fields for a pass.
                passStyle:
                  description: >-
                    A pass template can have several styles. A style will define
                    how your pass looks and behaves. This string will indicate
                    what style to use (boarding, coupon, ticket, card, generic).
                  type: string
              required:
                - passStyle
                - data
              type: object
      summary: Update Pass Template
  /product:
    get:
      parameters:
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    count: 3
                    products:
                      - _id: 542f479660a365ad5a47a794
                        active: true
                        application: 5354f0bb3fa544452ff4c7c0
                        identifier: re.notifica.office.nonconsumable
                        name: Non-Consumable
                        stores:
                          - AppStore
                          - GooglePlay
                        type: onetime
                      - _id: 5442c0927f8ec974633ed40c
                        active: true
                        application: 5354f0bb3fa544452ff4c7c0
                        identifier: re.notifica.office.prod2
                        name: Prod2
                        stores:
                          - AppStore
                          - GooglePlay
                        type: onetime
                      - _id: 544788ed9a6050cd6f008b8d
                        active: true
                        application: 5354f0bb3fa544452ff4c7c0
                        identifier: re.notifica.office.consumable
                        name: Consumable
                        stores:
                          - AppStore
                          - GooglePlay
                        type: consumable
          description: OK
          headers: {}
      tags:
        - Product
      description: >-
        Get all products for an application.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: Get all products for an application
      summary: Get all products for an application
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    product:
                      _id: 5245bc5b3e66a3b01f0024d4
          description: Created
          headers: {}
      tags:
        - Product
      description: >-
        Create a new product.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: Create Product
      requestBody:
        $ref: '#/components/requestBodies/Create_ProductBody'
      summary: Create Product
  '/product/foridentifier/{sku}':
    get:
      parameters:
        - description: The SKU (identifier) of an active product.
          example: re.notifica.office.consumable
          in: path
          name: sku
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    _id: 544788ed9a6050cd6f008b8d
                    active: true
                    application: 5354f0bb3fa544452ff4c7c0
                    identifier: re.notifica.office.consumable
                    name: Consumable
                    stores:
                      - AppStore
                      - GooglePlay
                    type: consumable
          description: OK
          headers: {}
      tags:
        - Product
      description: >-
        Get a product object using SKU.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: Get Product By SKU
      summary: Get Product By SKU
  '/product/{product}':
    delete:
      parameters:
        - description: The id of an active product.
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: product
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    message: product deleted
          description: OK
          headers: {}
      tags:
        - Product
      description: >-
        Delete a product. This operation cannot be undone.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: Delete Product
      summary: Delete Product
    get:
      parameters:
        - description: The id of an active product.
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: product
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    _id: 544788ed9a6050cd6f008b8d
                    active: true
                    application: 5354f0bb3fa544452ff4c7c0
                    identifier: re.notifica.office.consumable
                    name: Consumable
                    stores:
                      - AppStore
                      - GooglePlay
                    type: consumable
          description: OK
          headers: {}
      tags:
        - Product
      description: >-
        Get a product object.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: Get Product
      summary: Get Product
    put:
      parameters:
        - description: The id of an active product.
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: product
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    message: product updated
          description: OK
          headers: {}
      tags:
        - Product
      description: >-
        Modify a product.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: Update Product
      requestBody:
        content:
          application/json:
            schema:
              example:
                active: true
                identifier: re.notifica.office.consumable
                name: Consumable
                stores:
                  - AppStore
                  - GooglePlay
                type: consumable
              properties:
                active:
                  type: boolean
                identifier:
                  type: string
                name:
                  type: string
                stores:
                  items:
                    type: string
                  type: array
                type:
                  type: string
              type: object
      summary: Update Product
  /purchase:
    get:
      parameters:
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    count: 1
                    products:
                      - _id: 5477c86387c552350c886d2f
                        application: 5354f0bb3fa544452ff4c7c0
                        currency: EUR
                        data:
                          bid: re.notifica.office
                          bvrs: 1.0.36
                          item_id: '944702328'
                          original_purchase_date: '2014-11-28 00:57:02 Etc/GMT'
                          original_purchase_date_ms: '1417136222704'
                          original_purchase_date_pst: '2014-11-27 16:57:02 America/Los_Angeles'
                          original_transaction_id: '1000000133399653'
                          product_id: re.notifica.office.consumable
                          purchase_date: '2014-11-28 00:57:02 Etc/GMT'
                          purchase_date_ms: '1417136222704'
                          purchase_date_pst: '2014-11-27 16:57:02 America/Los_Angeles'
                          quantity: '1'
                          transaction_id: '1000000133399653'
                          unique_identifier: d30aeae69ba81cd6077a062f721059b8f1c1ffe8
                          unique_vendor_identifier: 7F64F64E-8DAF-4445-93A2-B4632DDBAED3
                        date: '2014-11-28T00:57:02.704Z'
                        deviceID: >-
                          1ebffb005c83b016e5dffafbf2755fabb79e4db87f0092dd30a903cdb0c44bad
                        identifier: re.notifica.office.consumable
                        price: 0.89
                        transactionIdentifier: '1000000133399653'
                        userID: joel@notifica.re
          description: OK
          headers: {}
      tags:
        - Purchase
      description: >-
        Get all purchases for an application.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: Get Purchases
      summary: Get Purchases
  '/purchase/byidentifier/{identifier}':
    get:
      parameters:
        - description: The SKU (identifier) of a purchase.
          example: re.notifica.office.consumable
          in: path
          name: identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    _id: 5477c86387c552350c886d2f
                    application: 5354f0bb3fa544452ff4c7c0
                    currency: EUR
                    data:
                      bid: re.notifica.office
                      bvrs: 1.0.36
                      item_id: '944702328'
                      original_purchase_date: '2014-11-28 00:57:02 Etc/GMT'
                      original_purchase_date_ms: '1417136222704'
                      original_purchase_date_pst: '2014-11-27 16:57:02 America/Los_Angeles'
                      original_transaction_id: '1000000133399653'
                      product_id: re.notifica.office.consumable
                      purchase_date: '2014-11-28 00:57:02 Etc/GMT'
                      purchase_date_ms: '1417136222704'
                      purchase_date_pst: '2014-11-27 16:57:02 America/Los_Angeles'
                      quantity: '1'
                      transaction_id: '1000000133399653'
                      unique_identifier: d30aeae69ba81cd6077a062f721059b8f1c1ffe8
                      unique_vendor_identifier: 7F64F64E-8DAF-4445-93A2-B4632DDBAED3
                    date: '2014-11-28T00:57:02.704Z'
                    deviceID: >-
                      1ebffb005c83b016e5dffafbf2755fabb79e4db87f0092dd30a903cdb0c44bad
                    identifier: re.notifica.office.consumable
                    price: 0.89
                    transactionIdentifier: '1000000133399653'
                    userID: joel@notifica.re
          description: OK
          headers: {}
      tags:
        - Purchase
      description: >-
        Get a specific purchase using the SKU.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: Get Purchase By SKU
      summary: Get Purchase By SKU
  '/purchase/bytransaction/{transaction}':
    get:
      parameters:
        - description: The transaction id of a purchase.
          example: '1000000133399653'
          in: path
          name: transaction
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    _id: 5477c86387c552350c886d2f
                    application: 5354f0bb3fa544452ff4c7c0
                    currency: EUR
                    data:
                      bid: re.notifica.office
                      bvrs: 1.0.36
                      item_id: '944702328'
                      original_purchase_date: '2014-11-28 00:57:02 Etc/GMT'
                      original_purchase_date_ms: '1417136222704'
                      original_purchase_date_pst: '2014-11-27 16:57:02 America/Los_Angeles'
                      original_transaction_id: '1000000133399653'
                      product_id: re.notifica.office.consumable
                      purchase_date: '2014-11-28 00:57:02 Etc/GMT'
                      purchase_date_ms: '1417136222704'
                      purchase_date_pst: '2014-11-27 16:57:02 America/Los_Angeles'
                      quantity: '1'
                      transaction_id: '1000000133399653'
                      unique_identifier: d30aeae69ba81cd6077a062f721059b8f1c1ffe8
                      unique_vendor_identifier: 7F64F64E-8DAF-4445-93A2-B4632DDBAED3
                    date: '2014-11-28T00:57:02.704Z'
                    deviceID: >-
                      1ebffb005c83b016e5dffafbf2755fabb79e4db87f0092dd30a903cdb0c44bad
                    identifier: re.notifica.office.consumable
                    price: 0.89
                    transactionIdentifier: '1000000133399653'
                    userID: joel@notifica.re
          description: OK
          headers: {}
      tags:
        - Purchase
      description: >-
        Get a specific purchase using the transaction.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: Get Purchase By Transaction
      summary: Get Purchase By Transaction
  '/purchase/{purchase}':
    get:
      parameters:
        - description: The id of a purchase.
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: purchase
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    _id: 5477c86387c552350c886d2f
                    application: 5354f0bb3fa544452ff4c7c0
                    currency: EUR
                    data:
                      bid: re.notifica.office
                      bvrs: 1.0.36
                      item_id: '944702328'
                      original_purchase_date: '2014-11-28 00:57:02 Etc/GMT'
                      original_purchase_date_ms: '1417136222704'
                      original_purchase_date_pst: '2014-11-27 16:57:02 America/Los_Angeles'
                      original_transaction_id: '1000000133399653'
                      product_id: re.notifica.office.consumable
                      purchase_date: '2014-11-28 00:57:02 Etc/GMT'
                      purchase_date_ms: '1417136222704'
                      purchase_date_pst: '2014-11-27 16:57:02 America/Los_Angeles'
                      quantity: '1'
                      transaction_id: '1000000133399653'
                      unique_identifier: d30aeae69ba81cd6077a062f721059b8f1c1ffe8
                      unique_vendor_identifier: 7F64F64E-8DAF-4445-93A2-B4632DDBAED3
                    date: '2014-11-28T00:57:02.704Z'
                    deviceID: >-
                      1ebffb005c83b016e5dffafbf2755fabb79e4db87f0092dd30a903cdb0c44bad
                    identifier: re.notifica.office.consumable
                    price: 0.89
                    transactionIdentifier: '1000000133399653'
                    userID: joel@notifica.re
          description: OK
          headers: {}
      tags:
        - Purchase
      description: >-
        Get a specific purchase.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: Get Purchase
      summary: Get Purchase
  /region:
    get:
      parameters:
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    regions:
                      - _id: 5245bc5b3e66a3b01f0024d4
                        geometry:
                          coordinates:
                            - 4.2345
                            - 5.6789
                          type: Point
                        major: '123456'
                        name: My Region
                        timezone: Europe/Amsterdam
          description: OK
          headers: {}
      tags:
        - Region
      description: >-
        Get all regions for an application.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: Get Regions
      summary: Get Regions
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    region:
                      _id: 5245bc5b3e66a3b01f0024d4
          description: Created
          headers: {}
      tags:
        - Region
      description: >-
        Create a new region. To retrieve a timezone from the coordinates you can
        use https://developers.google.com/maps/documentation/timezone/.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: Create Region
      requestBody:
        content:
          application/json:
            schema:
              properties:
                tags:
                  description: The list of tags this region should be associated with.
                  items: {}
                  type: array
                address:
                  description: >-
                    The address for this region. This field is merely
                    informative.
                  type: string
                advancedGeometry:
                  $ref: '#/components/schemas/Polygon'
                  description: >-
                    The advanced geometry for this region. If included, the
                    geometry field is optional and will be automatically
                    calculated for you.
                category:
                  description: >-
                    The category of this region. Regions should be categorised
                    as fence to be used as monitored geo-zones. There's also the
                    possibility to mark regions as poi, city and country. These
                    type of regions will not be monitored.
                  type: string
                description:
                  description: >-
                    The description for this region. This field is merely
                    informative.
                  type: string
                distance:
                  description: >-
                    The radius of a circle for the region. This field is
                    required if geometry is being passed. If advancedGeometry is
                    used then this field will be automatically calculated for
                    you.
                  type: number
                geometry:
                  $ref: '#/components/schemas/Point'
                  description: >-
                    The geometry for this region. If no advancedGeometry is
                    used, this field is mandatory.
                icon:
                  description: >-
                    The icon used for this region. Must be a publicly accessible
                    URL.
                  type: string
                major:
                  description: >-
                    The major identifier for the region. If you intend to use
                    beacons this field must match the major identifier for your
                    beacons.
                  type: number
                name:
                  description: The name for the region.
                  type: string
                referenceKey:
                  description: >-
                    The foreign key for this region. This field is can be used
                    to match regions in other systems.
                  type: string
              required:
                - name
                - category
              type: object
      summary: Create Region
  /region/all:
    delete:
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    message: region deleted
          description: OK
          headers: {}
      tags:
        - Region
      description: >-
        Delete all regions, including attached triggers and beacons. This
        operation cannot be undone.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: Delete All Regions
      summary: Delete All Regions
  '/region/forcountry/{country}':
    get:
      parameters:
        - description: The country you want to search regions for.
          example: NL
          in: path
          name: country
          required: true
          schema:
            type: string
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    regions:
                      - _id: 5245bc5b3e66a3b01f0024d4
                        geometry:
                          coordinates:
                            - 4.2345
                            - 5.6789
                          type: Point
                        major: '123456'
                        name: My Region
                        timezone: Europe/Amsterdam
          description: OK
          headers: {}
      tags:
        - Region
      description: >-
        Get regions by timezone for an application.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: Get Regions By Country
      summary: Get Regions By Country
  '/region/fortimezone/{timezone}':
    get:
      parameters:
        - description: The timezone you want to search regions for.
          example: Europe
          in: path
          name: timezone
          required: true
          schema:
            type: string
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    regions:
                      - _id: 5245bc5b3e66a3b01f0024d4
                        geometry:
                          coordinates:
                            - 4.2345
                            - 5.6789
                          type: Point
                        major: '123456'
                        name: My Region
                        timezone: Europe/Amsterdam
          description: OK
          headers: {}
      tags:
        - Region
      description: >-
        Get regions by timezone for an application.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: Get Regions By Timezone
      summary: Get Regions By Timezone
  '/region/search/{search}':
    get:
      parameters:
        - description: Search matching a name of an active region.
          example: My
          in: path
          name: search
          required: true
          schema:
            type: string
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    regions:
                      - _id: 5245bc5b3e66a3b01f0024d4
                        geometry:
                          coordinates:
                            - 4.2345
                            - 5.6789
                          type: Point
                        major: '123456'
                        name: My Region
                        timezone: Europe/Amsterdam
          description: OK
          headers: {}
      tags:
        - Region
      description: >-
        Search regions for an application.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: Search Regions
      summary: Search Regions
  '/region/{region}':
    delete:
      parameters:
        - description: The region id of an active region.
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: region
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    message: region deleted
          description: OK
          headers: {}
      tags:
        - Region
      description: >-
        Delete a region. This operation cannot be undone.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: Delete Region
      summary: Delete Region
    get:
      parameters:
        - description: The region id of an active region.
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: region
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    regions:
                      _id: 5245bc5b3e66a3b01f0024d4
                      geometry:
                        coordinates:
                          - 4.2345
                          - 5.6789
                        type: Point
                      major: '123456'
                      name: My Region
                      timezone: Europe/Amsterdam
          description: OK
          headers: {}
      tags:
        - Region
      description: >-
        Get a region object.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: Get Region
      summary: Get Region
    put:
      parameters:
        - description: The id for the region.
          example: '"5245bc5b3e66a3b01f0024d4"'
          in: path
          name: region
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    message: region updated
          description: OK
          headers: {}
      tags:
        - Region
      description: >-
        Modify a region.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: Update Region
      requestBody:
        content:
          application/json:
            schema:
              properties:
                tags:
                  description: The list of tags this region should be associated with.
                  items: {}
                  type: array
                address:
                  description: >-
                    The address for this region. This field is merely
                    informative.
                  type: string
                advancedGeometry:
                  $ref: '#/components/schemas/Polygon'
                  description: >-
                    The advanced geometry for this region. If included, the
                    geometry field is optional and will be automatically
                    calculated for you.
                category:
                  description: >-
                    The category of this region. Regions should be categorised
                    as fence to be used as monitored geo-zones. There's also the
                    possibility to mark regions as poi, city and country. These
                    type of regions will not be monitored.
                  enum:
                    - fence
                    - poi
                    - city
                    - country
                  type: string
                description:
                  description: >-
                    The description for this region. This field is merely
                    informative.
                  type: string
                distance:
                  description: >-
                    The radius of a circle for the region. This field is
                    required if geometry is being passed. If advancedGeometry is
                    used then this field will be automatically calculated for
                    you.
                  type: number
                geometry:
                  $ref: '#/components/schemas/Point'
                  description: >-
                    The geometry for this region. If no advancedGeometry is
                    used, this field is mandatory.
                icon:
                  description: >-
                    The icon used for this region. Must be a publicly accessible
                    URL.
                  type: string
                major:
                  description: >-
                    The major identifier for the region. If you intend to use
                    beacons this field must match the major identifier for your
                    beacons.
                  type: number
                name:
                  description: The name for the region.
                  type: string
                referenceKey:
                  description: >-
                    The foreign key for this region. This field is can be used
                    to match regions in other systems.
                  type: string
              required:
                - name
              type: object
      summary: Update Region
  '/reply/fornotification/{notification}':
    get:
      parameters:
        - description: The notification id of an active notification.
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: notification
          required: true
          schema:
            type: string
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 1000
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    count: 2
                    replies:
                      - _id: 5331703332c17e3077d5a765
                        deviceID: APA91bHWwt97wwvZ1-P8UQT1zCgczK7utZEZiqu7N4Awg
                        label: 'yes'
                        notification: 53317011f90827d27c6e9c94
                        time: '2014-03-25T12:01:55.713Z'
                        userID: testuser@example.com
                      - _id: 5331703332c17e3077d5a765
                        deviceID: APA91bHWwt97wwvZ1-P8UQT1zCgczK7utZEZiqu7N4Awg
                        label: 'yes'
                        notification: 53317011f90827d27c6e9c94
                        time: '2014-03-25T12:01:55.713Z'
                        userID: testuser@example.com
          description: OK
          headers: {}
      tags:
        - Reply
      description: >-
        Get all replies for a specific notification.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: Get Replies
      summary: Get Replies
  '/reply/{reply}':
    get:
      parameters:
        - description: The id for this reply.
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: reply
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    reply:
                      _id: 5331703332c17e3077d5a765
                      deviceID: APA91bHWwt97wwvZ1-P8UQT1zCgczK7utZEZiqu7N4Awg
                      label: 'yes'
                      notification: 53317011f90827d27c6e9c94
                      time: '2014-03-25T12:01:55.713Z'
                      userID: testuser@example.com
          description: OK
          headers: {}
      tags:
        - Reply
      description: >-
        Get a specific reply object.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: Get Reply
      summary: Get Reply
  /sms:
    post:
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    message: subscription updated
          description: OK
          headers: {}
        '202':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    message: subscription is being processed
          description: Accepted
          headers: {}
      tags:
        - SMS
      description: >-
        Create a SMS number for your application.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: Create SMS Number
      requestBody:
        content:
          application/json:
            schema:
              properties:
                tags:
                  description: A list of tags you wish to assign to the email address.
                  items: {}
                  type: array
                language:
                  description: The language you wish to assign the contact to.
                  type: string
                phone:
                  description: The phone number you wish to subscribe to your app.
                  type: string
                region:
                  description: The region you wish to assign the contact to.
                  type: string
                userID:
                  description: The userID your wish to assign the contact to.
                  type: string
                userName:
                  description: The userName your wish to assign the contact to.
                  type: string
                verify:
                  description: >-
                    If you wish to require verification before activating the
                    email contact set this property to `true`.
                  type: boolean
              required:
                - phone
              type: object
      summary: Create SMS Number
  '/stats/device/{dimension}/lastmonth':
    get:
      parameters:
        - description: The desired dimension.
          example: osVersion
          in: path
          name: dimension
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    stats:
                      - count: 2
                        date: '2014-02-27T00:00:00.000Z'
                        value: 2.3.6
                      - count: 2
                        date: '2014-02-26T00:00:00.000Z'
                        value: 2.3.6
          description: OK
          headers: {}
      tags:
        - Application Stats
      description: >-
        Retrieve the number of devices of a certain dimension for the last 30
        days.


        ### Dimensions:


        ***


        osVersion


        ***


        appVersion


        ***


        language


        ***


        sdkVersion


        ***


        platform


        ***


        osString


        ***


        deviceString


        ***
      operationId: Get Last Month Devices By Dimension
      summary: Get Last Month Devices By Dimension
  '/stats/device/{dimension}/{year}':
    get:
      parameters:
        - description: The desired dimension.
          example: osVersion
          in: path
          name: dimension
          required: true
          schema:
            type: string
        - description: The year you desire to get stats from.
          example: '2014'
          in: path
          name: year
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    stats:
                      - count: 2
                        date: '2014-02-27T00:00:00.000Z'
                        value: 2.3.6
                      - count: 2
                        date: '2014-02-26T00:00:00.000Z'
                        value: 2.3.6
          description: OK
          headers: {}
      tags:
        - Application Stats
      description: >-
        Retrieve the number of devices of a certain dimension in a specific
        year.


        ### Dimensions:


        ***


        osVersion


        ***


        appVersion


        ***


        language


        ***


        sdkVersion


        ***


        platform


        ***


        osString


        ***


        deviceString


        ***
      operationId: Get Yearly Devices By Dimension
      summary: Get Yearly Devices By Dimension
  '/stats/device/{dimension}/{year}/{month}':
    get:
      parameters:
        - description: The desired dimension.
          example: osVersion
          in: path
          name: dimension
          required: true
          schema:
            type: string
        - description: The year you desire to get stats from.
          example: '2014'
          in: path
          name: year
          required: true
          schema:
            type: string
        - description: The month you desire to get stats from.
          example: '03'
          in: path
          name: month
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    stats:
                      - count: 2
                        date: '2014-02-27T00:00:00.000Z'
                        value: 2.3.6
                      - count: 2
                        date: '2014-02-26T00:00:00.000Z'
                        value: 2.3.6
          description: OK
          headers: {}
      tags:
        - Application Stats
      description: >-
        Retrieve the number of devices of a certain dimension in a specific
        month.


        ### Dimensions:


        ***


        osVersion


        ***


        appVersion


        ***


        language


        ***


        sdkVersion


        ***


        platform


        ***


        osString


        ***


        deviceString


        ***
      operationId: Get Monthly Devices By Dimension
      summary: Get Monthly Devices By Dimension
  '/stats/device/{dimension}/{year}/{month}/{day}':
    get:
      parameters:
        - description: The desired dimension.
          example: osVersion
          in: path
          name: dimension
          required: true
          schema:
            type: string
        - description: The year you desire to get stats from.
          example: '2014'
          in: path
          name: year
          required: true
          schema:
            type: string
        - description: The month you desire to get stats from.
          example: '03'
          in: path
          name: month
          required: true
          schema:
            type: string
        - description: The day you desire to get stats from.
          example: '01'
          in: path
          name: day
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    stats:
                      - count: 2
                        date: '2014-02-27T00:00:00.000Z'
                        value: 2.3.6
                      - count: 2
                        date: '2014-02-26T00:00:00.000Z'
                        value: 2.3.6
          description: OK
          headers: {}
      tags:
        - Application Stats
      description: |-
        Retrieve the number of devices of a certain dimension in a specific day.

        ### Dimensions:

        ***

        osVersion

        ***

        appVersion

        ***

        language

        ***

        sdkVersion

        ***

        platform

        ***

        osString

        ***

        deviceString

        ***
      operationId: Get Daily Devices By Dimension
      summary: Get Daily Devices By Dimension
  '/stats/event/{type}/lastmonth':
    get:
      parameters:
        - description: The event type.
          example: re.notifica.event.application.Install
          in: path
          name: type
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    stats:
                      - count: 2
                        date: '2014-02-27T00:00:00.000Z'
                      - count: 2
                        date: '2014-02-26T00:00:00.000Z'
          description: OK
          headers: {}
      tags:
        - Application Stats
      description: |-
        Retrieve the number of events of a certain type for the last 30 days.

        ### Events

        ***

        re.notifica.event.application.Install

        ***

        re.notifica.event.application.Uninstall

        ***

        re.notifica.event.application.Open

        ***

        re.notifica.event.application.Close

        ***

        re.notifica.event.notification.Influenced

        ***

        re.notifica.event.notification.Receive

        ***

        re.notifica.event.notification.Open

        ***

        re.notifica.event.region.Session

        ***

        re.notifica.event.beacon.Session

        ***
      operationId: Get Last Month Events By Type
      summary: Get Last Month Events By Type
  '/stats/event/{type}/lastweek':
    get:
      parameters:
        - description: The event type.
          example: re.notifica.event.application.Install
          in: path
          name: type
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    stats:
                      - count: 2
                        date: '2014-02-27T00:00:00.000Z'
                      - count: 2
                        date: '2014-02-26T00:00:00.000Z'
          description: OK
          headers: {}
      tags:
        - Application Stats
      description: |-
        Retrieve the number of events of a certain type for the last 7 days.

        ### Events

        ***

        re.notifica.event.application.Install

        ***

        re.notifica.event.application.Uninstall

        ***

        re.notifica.event.application.Open

        ***

        re.notifica.event.application.Close

        ***

        re.notifica.event.notification.Influenced

        ***

        re.notifica.event.notification.Receive

        ***

        re.notifica.event.notification.Open

        ***

        re.notifica.event.region.Session

        ***

        re.notifica.event.beacon.Session

        ***
      operationId: Get Last Week Events By Type
      summary: Get Last Week Events By Type
  '/stats/event/{type}/total':
    get:
      parameters:
        - description: The event type.
          example: re.notifica.event.application.Install
          in: path
          name: type
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    stats:
                      - count: 1000
          description: OK
          headers: {}
      tags:
        - Application Stats
      description: |-
        Retrieve the number of events of a certain type.

        ### Events

        ***

        re.notifica.event.application.Install

        ***

        re.notifica.event.application.Uninstall

        ***

        re.notifica.event.application.Open

        ***

        re.notifica.event.application.Close

        ***

        re.notifica.event.notification.Influenced

        ***

        re.notifica.event.notification.Receive

        ***

        re.notifica.event.notification.Open

        ***

        re.notifica.event.region.Session

        ***

        re.notifica.event.beacon.Session

        ***
      operationId: Get Total Events By Type
      summary: Get Total Events By Type
  '/stats/event/{type}/{year}':
    get:
      parameters:
        - description: The event type.
          example: re.notifica.event.application.Install
          in: path
          name: type
          required: true
          schema:
            type: string
        - description: The year you desire to get stats from.
          example: '2014'
          in: path
          name: year
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    stats:
                      - count: 2
                        date: '2014-02-27T00:00:00.000Z'
                      - count: 2
                        date: '2014-02-26T00:00:00.000Z'
          description: OK
          headers: {}
      tags:
        - Application Stats
      description: |-
        Retrieve the number of events of a certain type for a specific year.

        ### Events

        ***

        re.notifica.event.application.Install

        ***

        re.notifica.event.application.Uninstall

        ***

        re.notifica.event.application.Open

        ***

        re.notifica.event.application.Close

        ***

        re.notifica.event.notification.Influenced

        ***

        re.notifica.event.notification.Receive

        ***

        re.notifica.event.notification.Open

        ***

        re.notifica.event.region.Session

        ***

        re.notifica.event.beacon.Session

        ***
      operationId: Get Yearly Events By Type
      summary: Get Yearly Events By Type
  '/stats/event/{type}/{year}/{month}':
    get:
      parameters:
        - description: The event type.
          example: re.notifica.event.application.Install
          in: path
          name: type
          required: true
          schema:
            type: string
        - description: The year you desire to get stats from.
          example: '2014'
          in: path
          name: year
          required: true
          schema:
            type: string
        - description: The month you desire to get stats from.
          example: '03'
          in: path
          name: month
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    stats:
                      - count: 2
                        date: '2014-02-27T00:00:00.000Z'
                      - count: 2
                        date: '2014-02-26T00:00:00.000Z'
          description: OK
          headers: {}
      tags:
        - Application Stats
      description: |-
        Retrieve the number of events of a certain type for a specific month.

        ### Events

        ***

        re.notifica.event.application.Install

        ***

        re.notifica.event.application.Uninstall

        ***

        re.notifica.event.application.Open

        ***

        re.notifica.event.application.Close

        ***

        re.notifica.event.notification.Influenced

        ***

        re.notifica.event.notification.Receive

        ***

        re.notifica.event.notification.Open

        ***

        re.notifica.event.region.Session

        ***

        re.notifica.event.beacon.Session

        ***
      operationId: Get Monthly Events By Type
      summary: Get Monthly Events By Type
  '/stats/event/{type}/{year}/{month}/{day}':
    get:
      parameters:
        - description: The event type.
          example: re.notifica.event.application.Install
          in: path
          name: type
          required: true
          schema:
            type: string
        - description: The year you desire to get stats from.
          example: '2014'
          in: path
          name: year
          required: true
          schema:
            type: string
        - description: The month you desire to get stats from.
          example: '03'
          in: path
          name: month
          required: true
          schema:
            type: string
        - description: The day you desire to get stats from.
          example: '01'
          in: path
          name: day
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    stats:
                      - count: 2
                        date: '2014-02-27T00:00:00.000Z'
                      - count: 2
                        date: '2014-02-26T00:00:00.000Z'
          description: OK
          headers: {}
      tags:
        - Application Stats
      description: |-
        Retrieve the number of events of a certain type for a specific day.

        ### Events

        ***

        re.notifica.event.application.Install

        ***

        re.notifica.event.application.Uninstall

        ***

        re.notifica.event.application.Open

        ***

        re.notifica.event.application.Close

        ***

        re.notifica.event.notification.Influenced

        ***

        re.notifica.event.notification.Receive

        ***

        re.notifica.event.notification.Open

        ***

        re.notifica.event.region.Session

        ***

        re.notifica.event.beacon.Session

        ***
      operationId: Get Daily Events By Type
      summary: Get Daily Events By Type
  /stats/notification/account/lastmonth:
    get:
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    stats:
                      - application: 50b62e6aebe6dd821d000003
                        count: 0
                        date: '2014-02-28T00:00:00.000Z'
                        day: 28
                        month: 2
                        year: 2014
                      - application: 50b62e6aebe6dd821d000003
                        count: 2
                        date: '2014-02-27T00:00:00.000Z'
                        day: 27
                        month: 2
                        year: 2014
          description: OK
          headers: {}
      tags:
        - Account Stats
      description: Retrieve the number of notifications sent on the last 30 days.
      operationId: Get Last Month Notifications For Account
      summary: Get Last Month Notifications For Account
  '/stats/notification/account/{year}':
    get:
      parameters:
        - description: The year you desire to get stats from.
          example: '2014'
          in: path
          name: year
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    stats:
                      - application: 50b62e6aebe6dd821d000003
                        count: 33
                        date: '2014-01-01T00:00:00.000Z'
                        month: 1
                        year: 2014
                      - application: 50b62e6aebe6dd821d000003
                        count: 38
                        date: '2014-02-01T00:00:00.000Z'
                        month: 2
                        year: 2014
          description: OK
          headers: {}
      tags:
        - Account Stats
      description: Retrieve the number of notifications sent on a specific year.
      operationId: Get Yearly Notifications For Account
      summary: Get Yearly Notifications For Account
  '/stats/notification/account/{year}/{month}':
    get:
      parameters:
        - description: The year you desire to get stats from.
          example: '2014'
          in: path
          name: year
          required: true
          schema:
            type: string
        - description: The month you desire to get stats from.
          example: '03'
          in: path
          name: month
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    stats:
                      - application: 50b62e6aebe6dd821d000003
                        count: 33
                        date: '2014-01-01T00:00:00.000Z'
                        day: 1
                        month: 1
                        year: 2014
                      - application: 50b62e6aebe6dd821d000003
                        count: 38
                        date: '2014-02-01T00:00:00.000Z'
                        day: 2
                        month: 1
                        year: 2014
          description: OK
          headers: {}
      tags:
        - Account Stats
      description: Retrieve the number of notifications sent on a specific month.
      operationId: Get Monthly Notifications For Account
      summary: Get Monthly Notifications For Account
  '/stats/notification/account/{year}/{month}/{day}':
    get:
      parameters:
        - description: The year you desire to get stats from.
          example: '2014'
          in: path
          name: year
          required: true
          schema:
            type: string
        - description: The month you desire to get stats from.
          example: '03'
          in: path
          name: month
          required: true
          schema:
            type: string
        - description: The day you desire to get stats from.
          example: '01'
          in: path
          name: day
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    stats:
                      - application: 50b62e6aebe6dd821d000003
                        count: 33
                        date: '2014-01-01T00:00:00.000Z'
                        day: 1
                        hour: 0
                        month: 1
                        year: 2014
                      - application: 50b62e6aebe6dd821d000003
                        count: 38
                        date: '2014-01-01T01:00:00.000Z'
                        day: 1
                        hour: 1
                        month: 1
                        year: 2014
          description: OK
          headers: {}
      tags:
        - Account Stats
      description: Retrieve the number of notifications sent on a specific day.
      operationId: Get Daily Notifications For Account
      summary: Get Daily Notifications For Account
  /stats/notification/application/lastmonth:
    get:
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    stats:
                      - application: 50b62e6aebe6dd821d000003
                        count: 0
                        date: '2014-02-28T00:00:00.000Z'
                        day: 28
                        month: 2
                        year: 2014
                      - application: 50b62e6aebe6dd821d000003
                        count: 2
                        date: '2014-02-27T00:00:00.000Z'
                        day: 27
                        month: 2
                        year: 2014
          description: OK
          headers: {}
      tags:
        - Application Stats
      description: Retrieve the number of notifications sent on the last 30 days.
      operationId: Get Last Month Notifications For Application
      summary: Get Last Month Notifications For Application
  '/stats/notification/application/{year}':
    get:
      parameters:
        - description: The year you desire to get stats from.
          example: '2014'
          in: path
          name: year
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    stats:
                      - application: 50b62e6aebe6dd821d000003
                        count: 33
                        date: '2014-01-01T00:00:00.000Z'
                        month: 1
                        year: 2014
                      - application: 50b62e6aebe6dd821d000003
                        count: 38
                        date: '2014-02-01T00:00:00.000Z'
                        month: 2
                        year: 2014
          description: OK
          headers: {}
      tags:
        - Application Stats
      description: Retrieve the number of notifications sent on a specific year.
      operationId: Get Yearly Notifications For Application
      summary: Get Yearly Notifications For Application
  '/stats/notification/application/{year}/{month}':
    get:
      parameters:
        - description: The year you desire to get stats from.
          example: '2014'
          in: path
          name: year
          required: true
          schema:
            type: string
        - description: The month you desire to get stats from.
          example: '03'
          in: path
          name: month
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    stats:
                      - application: 50b62e6aebe6dd821d000003
                        count: 33
                        date: '2014-01-01T00:00:00.000Z'
                        day: 1
                        month: 1
                        year: 2014
                      - application: 50b62e6aebe6dd821d000003
                        count: 38
                        date: '2014-02-01T00:00:00.000Z'
                        day: 2
                        month: 1
                        year: 2014
          description: OK
          headers: {}
      tags:
        - Application Stats
      description: Retrieve the number of notifications sent on a specific month.
      operationId: Get Monthly Notifications For Application
      summary: Get Monthly Notifications For Application
  '/stats/notification/application/{year}/{month}/{day}':
    get:
      parameters:
        - description: The year you desire to get stats from.
          example: '2014'
          in: path
          name: year
          required: true
          schema:
            type: string
        - description: The month you desire to get stats from.
          example: '03'
          in: path
          name: month
          required: true
          schema:
            type: string
        - description: The day you desire to get stats from.
          example: '01'
          in: path
          name: day
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    stats:
                      - application: 50b62e6aebe6dd821d000003
                        count: 33
                        date: '2014-01-01T00:00:00.000Z'
                        day: 1
                        hour: 0
                        month: 1
                        year: 2014
                      - application: 50b62e6aebe6dd821d000003
                        count: 38
                        date: '2014-01-01T01:00:00.000Z'
                        day: 1
                        hour: 1
                        month: 1
                        year: 2014
          description: OK
          headers: {}
      tags:
        - Application Stats
      description: Retrieve the number of notifications sent on a specific day.
      operationId: Get Daily Notifications For Application
      summary: Get Daily Notifications For Application
  /stats/user/account:
    get:
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    stats:
                      count: 0
                      date: '2014-02-28T00:00:00.000Z'
                      day: 28
                      month: 2
                      year: 2014
          description: OK
          headers: {}
      tags:
        - Account Stats
      description: Retrieve the total number of users in your account.
      operationId: Get Total Users For Account
      summary: Get Total Users For Account
  /stats/user/account/lastmonth:
    get:
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    stats:
                      - application: 50b62e6aebe6dd821d000003
                        count: 0
                        date: '2014-02-28T00:00:00.000Z'
                        day: 28
                        month: 2
                        year: 2014
                      - application: 50b62e6aebe6dd821d000003
                        count: 2
                        date: '2014-02-27T00:00:00.000Z'
                        day: 27
                        month: 2
                        year: 2014
          description: OK
          headers: {}
      tags:
        - Account Stats
      description: Retrieve the number of users in your account on the last 30 days.
      operationId: Get Last Month Users For Account
      summary: Get Last Month Users For Account
  '/stats/user/account/{year}':
    get:
      parameters:
        - description: The year you desire to get stats from.
          example: '2014'
          in: path
          name: year
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    stats:
                      - application: 50b62e6aebe6dd821d000003
                        count: 33
                        date: '2014-01-01T00:00:00.000Z'
                        month: 1
                        year: 2014
                      - application: 50b62e6aebe6dd821d000003
                        count: 38
                        date: '2014-02-01T00:00:00.000Z'
                        month: 2
                        year: 2014
          description: OK
          headers: {}
      tags:
        - Account Stats
      description: Retrieve the number of users in your account for a specific year.
      operationId: Get Yearly Users For Account
      summary: Get Yearly Users For Account
  '/stats/user/account/{year}/{month}':
    get:
      parameters:
        - description: The year you desire to get stats from.
          example: '2014'
          in: path
          name: year
          required: true
          schema:
            type: string
        - description: The month you desire to get stats from.
          example: '03'
          in: path
          name: month
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    stats:
                      - application: 50b62e6aebe6dd821d000003
                        count: 33
                        date: '2014-01-01T00:00:00.000Z'
                        day: 1
                        month: 1
                        year: 2014
                      - application: 50b62e6aebe6dd821d000003
                        count: 38
                        date: '2014-02-01T00:00:00.000Z'
                        day: 2
                        month: 1
                        year: 2014
          description: OK
          headers: {}
      tags:
        - Account Stats
      description: Retrieve the number of users in your account for a specific month.
      operationId: Get Monthly Users For Account
      summary: Get Monthly Users For Account
  '/stats/user/account/{year}/{month}/{day}':
    get:
      parameters:
        - description: The year you desire to get stats from.
          example: '2014'
          in: path
          name: year
          required: true
          schema:
            type: string
        - description: The month you desire to get stats from.
          example: '03'
          in: path
          name: month
          required: true
          schema:
            type: string
        - description: The day you desire to get stats from.
          example: '01'
          in: path
          name: day
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    stats:
                      - application: 50b62e6aebe6dd821d000003
                        count: 33
                        date: '2014-01-01T00:00:00.000Z'
                        day: 1
                        hour: 0
                        month: 1
                        year: 2014
                      - application: 50b62e6aebe6dd821d000003
                        count: 38
                        date: '2014-01-01T01:00:00.000Z'
                        day: 1
                        hour: 1
                        month: 1
                        year: 2014
          description: OK
          headers: {}
      tags:
        - Account Stats
      description: Retrieve the number of user in your account for a specific day.
      operationId: Get Daily Users For Account
      summary: Get Daily Users For Account
  /stats/user/application:
    get:
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    stats:
                      application: 50b62e6aebe6dd821d000003
                      count: 0
                      date: '2014-02-28T00:00:00.000Z'
                      day: 28
                      month: 2
                      year: 2014
          description: OK
          headers: {}
      tags:
        - Application Stats
      description: Retrieve the total number of users in an application.
      operationId: Get Total Users For Application
      summary: Get Total Users For Application
  /stats/user/application/lastmonth:
    get:
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    stats:
                      - application: 50b62e6aebe6dd821d000003
                        count: 0
                        date: '2014-02-28T00:00:00.000Z'
                        day: 28
                        month: 2
                        year: 2014
                      - application: 50b62e6aebe6dd821d000003
                        count: 2
                        date: '2014-02-27T00:00:00.000Z'
                        day: 27
                        month: 2
                        year: 2014
          description: OK
          headers: {}
      tags:
        - Application Stats
      description: Retrieve the number of users in an application on the last 30 days.
      operationId: Get Last Month Users For Application
      summary: Get Last Month Users For Application
  '/stats/user/application/{year}':
    get:
      parameters:
        - description: The year you desire to get stats from.
          example: '2014'
          in: path
          name: year
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    stats:
                      - application: 50b62e6aebe6dd821d000003
                        count: 33
                        date: '2014-01-01T00:00:00.000Z'
                        month: 1
                        year: 2014
                      - application: 50b62e6aebe6dd821d000003
                        count: 38
                        date: '2014-02-01T00:00:00.000Z'
                        month: 2
                        year: 2014
          description: OK
          headers: {}
      tags:
        - Application Stats
      description: Retrieve the number of users in an application for a specific year.
      operationId: Get Yearly Users For Application
      summary: Get Yearly Users For Application
  '/stats/user/application/{year}/{month}':
    get:
      parameters:
        - description: The year you desire to get stats from.
          example: '2014'
          in: path
          name: year
          required: true
          schema:
            type: string
        - description: The month you desire to get stats from.
          example: '03'
          in: path
          name: month
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    stats:
                      - application: 50b62e6aebe6dd821d000003
                        count: 33
                        date: '2014-01-01T00:00:00.000Z'
                        day: 1
                        month: 1
                        year: 2014
                      - application: 50b62e6aebe6dd821d000003
                        count: 38
                        date: '2014-02-01T00:00:00.000Z'
                        day: 2
                        month: 1
                        year: 2014
          description: OK
          headers: {}
      tags:
        - Application Stats
      description: Retrieve the number of users in an application for a specific month.
      operationId: Get Monthly Users For Application
      summary: Get Monthly Users For Application
  '/stats/user/application/{year}/{month}/{day}':
    get:
      parameters:
        - description: The year you desire to get stats from.
          example: '2014'
          in: path
          name: year
          required: true
          schema:
            type: string
        - description: The month you desire to get stats from.
          example: '03'
          in: path
          name: month
          required: true
          schema:
            type: string
        - description: The day you desire to get stats from.
          example: '01'
          in: path
          name: day
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    stats:
                      - application: 50b62e6aebe6dd821d000003
                        count: 33
                        date: '2014-01-01T00:00:00.000Z'
                        day: 1
                        hour: 0
                        month: 1
                        year: 2014
                      - application: 50b62e6aebe6dd821d000003
                        count: 38
                        date: '2014-01-01T01:00:00.000Z'
                        day: 1
                        hour: 1
                        month: 1
                        year: 2014
          description: OK
          headers: {}
      tags:
        - Application Stats
      description: Retrieve the number of user in an application for a specific day.
      operationId: Get Daily Users For Application
      summary: Get Daily Users For Application
  /status:
    get:
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    status: ok
          description: OK
          headers: {}
      tags:
        - Status
      description: Get the current availability of the API
      operationId: Get API Status
      summary: Get API Status
  /trigger:
    get:
      parameters:
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    count: 2
                    triggers:
                      - active: false
                        dayEnd: null
                        dayStart: null
                        frequency: once
                        interval: 8600
                        name: One Time Welcome
                        notAfter: null
                        notBefore: null
                        notification: 5245bc5b3e66a3b01f0024d4
                        rules: []
                        skipDays: []
                        source: 5245bc5b3e66a3b01f0024d4
                        type: re.notifica.trigger.region.Enter
                      - active: true
                        dayEnd: '08:00:00'
                        dayStart: '19:00:00'
                        frequency: always
                        interval: 8600
                        name: On Store exit
                        notAfter: '2014-11-28T15:31:54'
                        notBefore: '2012-11-28T15:31:54'
                        notification: 5245bc5b3e66a3b01f0024d4
                        rules:
                          - params:
                              - 3445bc5b4563b01f0f5
                            type: re.notifica.rule.segment.Add
                        skipDays:
                          - 1
                          - 2
                        source: 5245bc5b3e66a3b01f0024d4
                        type: re.notifica.trigger.region.Exit
          description: OK
          headers: {}
      tags:
        - Trigger
      description: >-
        Get all triggers for an application.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: Get Triggers
      summary: Get Triggers
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    trigger:
                      _id: 5245bc5b3e66a3b01f0024d4
          description: Created
          headers: {}
      tags:
        - Trigger
      description: >-
        Create a new trigger. This request expects at least `name`, `type` and
        `source`.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.


        Three special cases apply:


        - if `source` is an array, then this trigger will be added to all
        regions or beacons in that array


        - if `source` is set to `"all"`, then this trigger will be added to all
        regions or beacons in this application


        - if `notification` is an object instead of an id string, a new
        notification will be created, for each region/beacon if `source`
        contains multiple sources. See Notifications for the structure of a
        Notification object.
      operationId: Create Trigger
      requestBody:
        $ref: '#/components/requestBodies/Create_TriggerBody'
      summary: Create Trigger
  '/trigger/{trigger}':
    delete:
      parameters:
        - description: The trigger id
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: trigger
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    message: trigger deleted
          description: OK
          headers: {}
      tags:
        - Trigger
      description: >-
        Delete a trigger. This operation cannot be undone.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: Delete Trigger
      summary: Delete Trigger
    get:
      parameters:
        - description: The trigger id
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: trigger
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    trigger:
                      active: true
                      dayEnd: '08:00'
                      dayStart: '19:00'
                      frequency: always
                      interval: 8600
                      name: On Store exit
                      notAfter: '2014-11-28 15:31'
                      notBefore: '2012-11-28 15:31'
                      notification: 5245bc5b3e66a3b01f0024d4
                      rules:
                        - params:
                            - 3445bc5b4563b01f0f5
                          type: re.notifica.rule.segment.Add
                      skipDays:
                        - 0
                        - 6
                      source: 5245bc5b3e66a3b01f0024d4
                      type: re.notifica.trigger.region.Exit
          description: OK
          headers: {}
      tags:
        - Trigger
      description: >-
        Get a trigger object.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: Get Trigger
      summary: Get Trigger
    put:
      parameters:
        - description: The trigger id
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: trigger
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    message: trigger updated
          description: OK
          headers: {}
      tags:
        - Trigger
      description: >-
        Modify a trigger.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: Update Trigger
      requestBody:
        content:
          application/json:
            schema:
              properties:
                active:
                  description: This trigger is active or not.
                  type: boolean
                dayEnd:
                  description: Triggers will not fire after this time of day.
                  type: string
                dayStart:
                  description: Triggers will not fire before this time of day.
                  type: string
                delayMinutes:
                  description: >-
                    Trigger will fire after this amount of minutes, if not
                    canceled by the opposite geo-transition.
                  type: number
                frequency:
                  description: >-
                    How often the trigger should be fired. Can be `once`,
                    `always` or `time`. The latter value requires an interval to
                    be provided.
                  enum:
                    - once
                    - always
                    - time
                  type: string
                interval:
                  description: >-
                    Minimal interval in seconds before a trigger will be fired
                    again.
                  type: number
                name:
                  description: The name as it appears in the list.
                  type: string
                notAfter:
                  description: Triggers will not fire after this date.
                  type: string
                notBefore:
                  description: Triggers will not fire before this date.
                  type: string
                notification:
                  description: >-
                    Previously created notification to be sent when trigger is
                    fired. See notes above.
                  type: string
                rules:
                  description: >-
                    Rules to be executed upon firing of this trigger. See
                    Notifications for an overview of rules.
                  items: {}
                  type: array
                skipDays:
                  description: Triggers will not fire on any of these days. Sunday is `0`.
                  items: {}
                  type: array
                source:
                  description: >-
                    The region or beacon this trigger is attached to. See notes
                    above.
                  type: string
                type:
                  description: >-
                    Defines the type of trigger. Types of triggers are
                    represented by namespaces. Trigger types should be match the
                    following namespace: re.notifica.trigger.*. Please refer to
                    Trigger Types for all available types.
                  type: string
              required:
                - name
                - source
              type: object
      summary: Update Trigger
  '/upload/{type}':
    post:
      parameters:
        - description: The type of the file to upload
          example: import
          in: path
          name: type
          required: true
          schema:
            type: string
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    filename: /imports/9f..
          description: Created
          headers: {}
      tags:
        - Upload
      description: >-
        Upload a file to Notificare. The resulting filename is a path inside the
        notificare storage. This can be used as a reference to the file in other
        endpoints.

        The contents of the file should be in the body of the request and with
        the correct mime-type. So, e.g. an import should be of type `text/csv`,
        an image to go with a notification `image/png`, etc.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.


        ### Uploads


        ***


        notification


        ***


        import


        ***


        reply


        ***


        passbook


        ***


        website-push


        ***
      operationId: Create Upload
      summary: Create Upload
  '/upload/{type}/{applicationKey}/{token}':
    delete:
      parameters:
        - description: The first (type) part of the path of the file to delete
          example: notifications
          in: path
          name: type
          required: true
          schema:
            type: string
        - description: The second (applicationKey) part of the path of the file to delete
          example: bea30d16d3a2659c22a7867718670938df4ff7c05b459adbdf0573f7a7b3b3e2
          in: path
          name: applicationKey
          required: true
          schema:
            type: string
        - description: The third (token) part of the path of the file to delete
          example: 2c3b46d9d12bbc008914eaceab3f8b014b4897e49810b1170addcbe81a82a3e6
          in: path
          name: token
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          headers: {}
      tags:
        - Upload
      description: >-
        Delete file from Notificare storage. This operation cannot be undone.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: Delete Upload
      summary: Delete Upload
  /user:
    get:
      parameters:
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 25
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    count: 1
                    users:
                      - _id: 5245bc5b3e66a3b01f0024d4
                        account: '12345'
                        active: true
                        application: '12345'
                        autoGenerated: false
                        segments: []
                        userID: '12345'
                        userName: Massimo
          description: OK
          headers: {}
      tags:
        - User
      description: >-
        List all users for this app. This request is authenticated with the
        `applicationKey` and  `masterSecret`.
      operationId: Get Users
      summary: Get Users
  '/user/forsegment/{segment}':
    get:
      parameters:
        - description: The ID of the segment
          example: '12345'
          in: path
          name: segment
          required: true
          schema:
            type: string
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 25
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    count: 1
                    users:
                      - _id: 5245bc5b3e66a3b01f0024d4
                        account: 5245bc5b3e66a3b01f0024d4
                        active: true
                        application: 5245bc5b3e66a3b01f0024d4
                        autoGenerated: false
                        segments: []
                        userID: '12345'
                        userName: Massimo
          description: OK
          headers: {}
      tags:
        - User
      description: >-
        Retrieve users for a segment. This request is authenticated with the
        `applicationKey` and  `masterSecret`.
      operationId: Get Users By User Segment
      summary: Get Users By User Segment
  '/user/foruserid/{userID}':
    delete:
      parameters:
        - description: The userID of the user
          example: '12345'
          in: path
          name: userID
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          headers: {}
      tags:
        - User
      description: >-
        Deactivate a user using the  `userID`. The user will no longer be
        visible in the dashboard.

        If the user registers again on one of his devices, he will be activated
        again. This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: Deactivate User By userID
      summary: Deactivate User By userID
    get:
      parameters:
        - description: The app-specific userID of the user
          example: '12345'
          in: path
          name: userID
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    'user:':
                      _id: 5245bc5b3e66a3b01f0024d4
                      account: 5245bc5b3e66a3b01f0024d4
                      active: true
                      application: 5245bc5b3e66a3b01f0024d4
                      autoGenerated: false
                      segments: []
                      userID: '12345'
                      userName: Massimo
          description: OK
          headers: {}
      tags:
        - User
      description: >-
        Retrieve a user object using the `userID`. This request is authenticated
        with the `applicationKey` and  `masterSecret`.
      operationId: Get User By userID
      summary: Get User By userID
  '/user/foruserid/{userID}/remove':
    delete:
      parameters:
        - description: The userID of the user
          example: '12345'
          in: path
          name: userID
          required: true
          schema:
            type: string
      responses:
        '202':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    message: user removal is being processed
          description: Accepted
          headers: {}
      tags:
        - User
      description: >-
        Delete a user using the  `userID`. The user will be completely removed
        from our system.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: Delete User By userID
      summary: Delete User By userID
  /user/provisional:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    user:
                      _id: 5245bc5b3e66a3b01f0024d4
          description: Created
          headers: {}
      tags:
        - User
      description: >-
        Create a provisional user, i.e., an inactive user with no devices. This
        allows you to later add the user to segments or refer to it in an import
        that adds users to a segment. The user will not be visible in the list
        of users until a device is registered for that user. This request is
        authenticated with the `applicationKey` and  `masterSecret`.
      operationId: Create Provisional User
      requestBody:
        content:
          application/json:
            schema:
              properties:
                userID:
                  description: The user ID
                  type: string
                userName:
                  description: The user's name
                  type: string
              required:
                - userID
              type: object
      summary: Create Provisional User
  '/user/search/{search}':
    get:
      parameters:
        - description: The search string
          example: Mas
          in: path
          name: search
          required: true
          schema:
            type: string
        - description: 'The maximum number of results to retrieve, max 1000.'
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 25
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    count: 1
                    users:
                      - _id: 5245bc5b3e66a3b01f0024d4
                        account: 5245bc5b3e66a3b01f0024d4
                        active: true
                        application: 5245bc5b3e66a3b01f0024d4
                        autoGenerated: false
                        segments: []
                        userID: '12345'
                        userName: Massimo
          description: OK
          headers: {}
      tags:
        - User
      description: >-
        Search users by `userName` and `userID`. This request is authenticated
        with the `applicationKey` and  `masterSecret`.
      operationId: Search Users
      summary: Search Users
  '/user/{user}':
    delete:
      parameters:
        - description: The Notificare ID of the user
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: user
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          headers: {}
      tags:
        - User
      description: >-
        Deactivate a user.  The user will no longer be visible in the dashboard.

        If the user registers again on one of his devices, he will be activated
        again. This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: Deactivate User
      summary: Deactivate User
    get:
      parameters:
        - description: The Notificare ID of the user
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: user
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    'user:':
                      _id: 5245bc5b3e66a3b01f0024d4
                      account: 5245bc5b3e66a3b01f0024d4
                      active: true
                      application: 5245bc5b3e66a3b01f0024d4
                      autoGenerated: false
                      segments: []
                      userID: '12345'
                      userName: Massimo
          description: OK
          headers: {}
      tags:
        - User
      description: >-
        Retrieve a user object. This request is authenticated with the
        `applicationKey` and  `masterSecret`.
      operationId: Get User
      summary: Get User
  '/user/{user}/add/{segment}':
    put:
      parameters:
        - description: The Notificare ID of the user
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: user
          required: true
          schema:
            type: string
        - description: The ID of the segment
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: segment
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    message: user added to segment
          description: OK
          headers: {}
      tags:
        - User
      description: >-
        Add user to segment. This request is authenticated with the
        `applicationKey` and  `masterSecret`.
      operationId: Add User To User Segment
      summary: Add User To User Segment
  '/user/{user}/remove':
    delete:
      parameters:
        - description: The Notificare ID of the user
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: user
          required: true
          schema:
            type: string
      responses:
        '202':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    message: user removal is being processed
          description: Accepted
          headers: {}
      tags:
        - User
      description: >-
        Delete a user. The user will be completely removed from our system.

        This request is authenticated with the `applicationKey` and
        `masterSecret`.
      operationId: Delete User
      summary: Delete User
  '/user/{user}/remove/{segment}':
    put:
      parameters:
        - description: The Notificare ID of the user
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: user
          required: true
          schema:
            type: string
        - description: The ID of the segment
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: segment
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    message: user removed from segment
          description: OK
          headers: {}
      tags:
        - User
      description: >-
        Remove user from segment. This request is authenticated with the
        `applicationKey` and  `masterSecret`.
      operationId: Remove User From User Segment
      summary: Remove User From User Segment
  /usersegment:
    get:
      parameters:
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 25
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    count: 2
                    userSegments:
                      - _id: 5245bc5b3e66a3b01f0024d4
                        description: people who like our page on Facebook
                        name: fans
                      - _id: 5245bc5b3e66a3b01f0024d4
                        description: people who just joined
                        name: newbies
          description: OK
          headers: {}
      tags:
        - User Segment
      description: >-
        Retrieve a list of segments. This request is authenticated with the
        `applicationKey` and  `masterSecret`.
      operationId: Get User Segments
      summary: Get User Segments
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    userSegment:
                      id: 5245bc5b3e66a3b01f0024d4
          description: Created
          headers: {}
      tags:
        - User Segment
      description: >-
        Create a new user segment. This request is authenticated with the
        `applicationKey` and  `masterSecret`.
      operationId: Create User Segment
      requestBody:
        $ref: '#/components/requestBodies/Create_User_SegmentBody'
      summary: Create User Segment
  /usersegment/batch:
    post:
      responses:
        '201':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    userSegment:
                      id: 5245bc5b3e66a3b01f0024d4
          description: Created
          headers: {}
      tags:
        - User Segment
      description: >-
        Create a new user segment with a batch of userIDs. There is a limit of
        1000 userIDs. This request is authenticated with the `applicationKey`
        and  `masterSecret`.
      operationId: Create User Segment With Batch of Users
      requestBody:
        content:
          application/json:
            schema:
              example:
                description: people who like our page on Facebook
                name: fans
                users:
                  - user1@notifica.re
                  - user2@notifica.re
              properties:
                description:
                  type: string
                name:
                  type: string
                users:
                  items:
                    type: string
                  type: array
              type: object
      summary: Create User Segment With Batch of Users
  '/usersegment/forname/{name}':
    get:
      parameters:
        - description: The (start of the) name of the segment you are looking for
          example: fans
          in: path
          name: name
          required: true
          schema:
            type: string
        - description: The maximum number of results to retrieve.
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 25
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    count: 1
                    userSegments:
                      - _id: 5245bc5b3e66a3b01f0024d4
                        description: people who like our page on Facebook
                        name: fans
                        userSelectable: people who like our page on Facebook
          description: OK
          headers: {}
      tags:
        - User Segment
      description: >-
        Retrieve a list of segments with a name (starting with) `name`. This
        request is authenticated with the `applicationKey` and  `masterSecret`.
      operationId: Get User Segments By Name
      summary: Get User Segments By Name
  '/usersegment/{segment}':
    delete:
      parameters:
        - description: The ID of the segment
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: segment
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    message: user segment removed
          description: OK
          headers: {}
      tags:
        - User Segment
      description: >-
        Delete a user segment. This request is authenticated with the
        `applicationKey` and  `masterSecret`.
      operationId: Delete User Segment
      summary: Delete User Segment
    get:
      parameters:
        - description: The ID of the segment
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: segment
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    userSegment:
                      _id: 5245bc5b3e66a3b01f0024d4
                      description: people who like our page on Facebook
                      name: fans
          description: OK
          headers: {}
      tags:
        - User Segment
      description: >-
        Retrieve a segment. This request is authenticated with the
        `applicationKey` and  `masterSecret`.
      operationId: Get User Segment
      summary: Get User Segment
    put:
      parameters:
        - description: The ID of the segment
          example: '12345'
          in: path
          name: segment
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    message: user segment updated
          description: OK
          headers: {}
      tags:
        - User Segment
      description: >-
        Change `name` and/or `description` of a user segment. This request is
        authenticated with the `applicationKey` and  `masterSecret`.
      operationId: Update User Segment
      requestBody:
        content:
          application/json:
            schema:
              example:
                description: people who like our page on Facebook
                name: fans
              properties:
                description:
                  type: string
                name:
                  type: string
              type: object
      summary: Update User Segment
  '/usersegment/{segment}/add':
    put:
      parameters:
        - description: The ID of the segment
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: segment
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    count: 2
                    message: added users to segment
          description: OK
          headers: {}
      tags:
        - User Segment
      description: >-
        Add users to a segment using a batch of userIDs. There is a limit of
        1000 userIDs. This request is authenticated with the `applicationKey`
        and  `masterSecret`.
      operationId: Add Batch of Users To User Segment
      requestBody:
        content:
          application/json:
            schema:
              example:
                users:
                  - user1@notifica.re
                  - user2@notifica.re
              properties:
                users:
                  items:
                    type: string
                  type: array
              type: object
      summary: Add Batch of Users To User Segment
  '/usersegment/{segment}/clear':
    put:
      parameters:
        - description: The ID of the segment
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: segment
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    message: user segment cleared
          description: OK
          headers: {}
      tags:
        - User Segment
      description: >-
        Clear all the users from a segment. This request is authenticated with
        the `applicationKey` and  `masterSecret`.
      operationId: Delete Users From User Segment
      summary: Delete Users From User Segment
  '/usersegment/{segment}/remove':
    put:
      parameters:
        - description: The ID of the segment
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: segment
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    count: 2
                    message: removed users from segment
          description: OK
          headers: {}
      tags:
        - User Segment
      description: >-
        Remove users from a segment using a batch of userIDs. There is a limit
        of 1000 userIDs. This request is authenticated with the `applicationKey`
        and  `masterSecret`.
      operationId: Remove Batch of Users From User Segment
      requestBody:
        content:
          application/json:
            schema:
              example:
                users:
                  - user1@notifica.re
                  - user2@notifica.re
              properties:
                users:
                  items:
                    type: string
                  type: array
              type: object
      summary: Remove Batch of Users From User Segment
  '/usersegment/{segment}/users':
    get:
      parameters:
        - description: The ID of the segment
          example: 5245bc5b3e66a3b01f0024d4
          in: path
          name: segment
          required: true
          schema:
            type: string
        - description: 'The maximum number of results to retrieve, max 1000.'
          example: '10'
          in: query
          name: limit
          required: false
          schema:
            default: 25
            type: number
        - description: The number of results to skip
          example: '0'
          in: query
          name: skip
          required: false
          schema:
            type: number
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              examples:
                response:
                  value:
                    count: 1
                    users:
                      - _id: 5245bc5b3e66a3b01f0024d4
                        account: '12345'
                        active: true
                        application: '12345'
                        autoGenerated: false
                        segments:
                          - 5245bc5b3e66a3b01f0024d4
                        userID: '12345'
                        userName: Massimo
          description: OK
          headers: {}
      tags:
        - User Segment
      description: >-
        Get all the users in a segment. This request is authenticated with the
        `applicationKey` and  `masterSecret`.
      operationId: Get Users In User Segment
      summary: Get Users In User Segment
components:
  requestBodies:
    Add_Batch_of_Users_To_User_SegmentBody:
      content:
        application/json:
          schema:
            example:
              users:
                - user1@notifica.re
                - user2@notifica.re
            properties:
              users:
                items:
                  type: string
                type: array
            type: object
    AssetGroup:
      content:
        application/json:
          schema:
            properties:
              assets:
                description: An array of assets.
                items:
                  $ref: '#/components/schemas/AssetGroupAsset'
                type: array
              name:
                description: The asset group's name
                type: string
                example: Test Group
              notAfter:
                description: Asset groups will not be visible after this date.
                $ref: '#/components/schemas/Date'
              notBefore:
                description: Asset groups will not be visible before this date.
                $ref: '#/components/schemas/Date'
              segment:
                description: The segment for this asset group
                $ref: '#/components/schemas/ObjectId'
            required:
              - name
              - assets
            type: object
    BeaconCreate:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BeaconCreate'
    BeaconUpdate:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Beacon'
    Create_Pass_TemplateBody:
      content:
        application/json:
          schema:
            properties:
              data:
                $ref: '#/components/schemas/PassData'
                description: >-
                  The data object containing all the information, colours and
                  fields for a pass.
              passStyle:
                description: >-
                  A pass template can have several styles. A style will define
                  how your pass looks and behaves. This string will indicate
                  what style to use (boarding, coupon, ticket, card, generic).
                type: string
            required:
              - passStyle
              - data
            type: object
    Create_ProductBody:
      content:
        application/json:
          schema:
            example:
              active: true
              identifier: re.notifica.office.consumable
              name: Consumable
              stores:
                - AppStore
                - GooglePlay
              type: consumable
            properties:
              active:
                type: boolean
              identifier:
                type: string
              name:
                type: string
              stores:
                items:
                  type: string
                type: array
              type:
                type: string
            type: object
    DatasourceCreate:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DatasourceCreate'
    DatasourceUpdate:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Datasource'
    NotificationPushTriggered:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationPushTriggered'
    NotificationPushDevice:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationPushDevice'
    NotificationPushUser:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationPushUser'
    NotificationPushTags:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationPushTags'
    NotificationPushSegments:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationPushSegments'
    NotificationPushCriteria:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationPushCriteria'
    NotificationPushEvent:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationPushEvent'
    NotificationPushBroadcast:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationPushBroadcast'
    NotificationSystemDevice:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationSystemDevice'
    NotificationSystemUser:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationSystemUser'
    NotificationSystemBroadcast:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationSystemBroadcast'
    NotificationEmailTriggered:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationEmailTriggered'
    NotificationEmailDevice:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationEmailDevice'
    NotificationEmailUser:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationEmailUser'
    NotificationEmailTags:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationEmailTags'
    NotificationEmailSegments:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationEmailSegments'
    NotificationEmailCriteria:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationEmailCriteria'
    NotificationEmailEvent:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationEmailEvent'
    NotificationEmailBroadcast:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationEmailBroadcast'
    NotificationSmsTriggered:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationSmsTriggered'
    NotificationSmsDevice:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationSmsDevice'
    NotificationSmsUser:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationSmsUser'
    NotificationSmsTags:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationSmsTags'
    NotificationSmsSegments:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationSmsSegments'
    NotificationSmsCriteria:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationSmsCriteria'
    NotificationSmsEvent:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationSmsEvent'
    NotificationSmsBroadcast:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationSmsBroadcast'
    NotificationTestPushDevice:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationTestPushDevice'
    NotificationTestPushUser:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationTestPushUser'
    NotificationTestPushTags:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationTestPushTags'
    NotificationTestPushSegments:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationTestPushSegments'
    NotificationTestPushCriteria:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationTestPushCriteria'
    NotificationTestPushEvent:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationTestPushEvent'
    NotificationTestPushBroadcast:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationTestPushBroadcast'
    NotificationTestEmailDevice:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationTestEmailDevice'
    NotificationTestEmailUser:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationTestEmailUser'
    NotificationTestEmailTags:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationTestEmailTags'
    NotificationTestEmailSegments:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationTestEmailSegments'
    NotificationTestEmailCriteria:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationTestEmailCriteria'
    NotificationTestEmailEvent:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationTestEmailEvent'
    NotificationTestEmailBroadcast:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationTestEmailBase'
    NotificationTestSmsDevice:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationTestSmsDevice'
    NotificationTestSmsUser:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationTestSmsUser'
    NotificationTestSmsTags:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationTestSmsTags'
    NotificationTestSmsSegments:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationTestSmsSegments'
    NotificationTestSmsCriteria:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationTestSmsCriteria'
    NotificationTestSmsEvent:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationTestSmsEvent'
    NotificationTestSmsBroadcast:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationTestSmsBase'
  schemas:
    AssetGroupAsset:
      properties:
        title:
          type: string
          example: "Screen Shot 2016-03-24 at 00.04.49.png"
        key:
          type: string
          example: "3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/c76c6363a7e014fae1586fa9b83b1c61faa7b79036fd2670db2840de979cab03"
        description:
          type: string
          example: A screen shot
        button:
          properties:
            label:
              type: string
              example: Test button
            action:
              type: string
              example: testAction
        extra:
          additionalProperties:
            type: string
          example:
            key1: value1
            key2: value2
    BeaconCreate:
      allOf:
        - $ref: '#/components/schemas/Beacon'
        - properties:
            name:
              description: Your beacon's name
              type: string
              example: Test beacon
            region:
              description: >-
                Your beacon's region (must match a previously
                created identifier of a region). Also determines the major of the beacon
              type: '#/components/schemas/ObjectId'
            minor:
              description: Your beacon's minor identifier (must be unique per major)
              type: number
              example: 100
          required:
            - name
            - region
            - minor
            - notification
          type: object
    Beacon:
      properties:
        batteryLevel:
          description: An object representing the battery level of this beacon.
          type: number
          example: 99
        data:
          description: A free form object that can be assigned to a beacon.
          additonalProperties:
            type: string
          example:
            key1: value1
            key2: value2
          type: object
        latitude:
          description: An integer representing the beacon's latitude.
          type: number
          example: 52.12772
        longitude:
          description: An integer representing the beacon's longitude.
          type: number
          example: 4.1662
        minor:
          description: Your beacon's minor identifier (must be unique per major)
          type: number
          example: 100
        name:
          description: Your beacon's name
          type: string
          example: Test beacon
        notification:
          $ref: '#/components/schemas/ObjectId'
          description: An Id of a previously created notification. (deprecated)
        proximity:
          description: >-
            Your notification proximity. Accepts one of these:
            'immediate', 'near' and 'far'. (deprecated)
          type: string
          enum:
            - immediate
            - near
            - far
        proximityNotifications:
          description: >-
            An object containing three previously created message Ids
            for each proximity level.
          properties:
            far:
              $ref: '#/components/schemas/ObjectId'
            immediate:
              $ref: '#/components/schemas/ObjectId'
            near:
              $ref: '#/components/schemas/ObjectId'
          type: object
        purpose:
          description: >-
            An object representing the purpose of the beacon. Accepts
            one of these: 'general', 'pay', 'info', 'staff', 'admin'.
          type: string
          example: Testing purposes
        triggers:
          description: >-
            Set to true if this beacon can be used in triggers. Max.
            number of beacons that can use triggers is limited to 10.
          type: boolean
      type: object
    Circle:
      allOf:
        - $ref: '#/components/schemas/Point'
        - properties:
            distance:
              type: number
              example: 100
          required:
            - distance
          type: object
    Coordinates:
      items:
        type: number
      type: array
      minItems: 2
      maxItems: 2
      example: [4.23456, 52.184884]
    CoordinatesRing:
      items:
        $ref: '#/components/schemas/Coordinates'
      minItems: 3
      example: [[4.23456, 52.184884], [5.23456, 50.184884],[4.23456, 52.184884]]
      type: array
    Criteria:
      properties:
        locationsCriteria:
          items:
            $ref: '#/components/schemas/LocationsCriteria'
          type: array
        propertiesCriteria:
          items:
            $ref: '#/components/schemas/PropertiesCriteria'
          type: array
        segmentsCriteria:
          items:
            $ref: '#/components/schemas/SegmentsCriteria'
          type: array
        tagsCriteria:
          items:
            $ref: '#/components/schemas/TagsCriteria'
          type: array
      type: object
    DataFilterCriteria:
      items:
        $ref: '#/components/schemas/DataFilterCriterion'
      type: array
    DataFilterCriterion:
      properties:
        operator:
          enum:
            - eq
            - ne
            - lt
            - lte
            - gt
            - gte
            - in
            - nin
          type: string
        property:
          type: string
        type:
          enum:
            - String
            - Number
            - Boolean
            - Date
          type: string
        value:
          items:
            oneOf:
              - type: string
              - type: number
              - type: boolean
              - $ref: '#/components/schemas/Date'
          type: array
      type: object
    DatasourceCreate:
      allOf:
        - $ref: '#/components/schemas/Datasource'
        - properties:
            name:
              description: The source's name
              type: string
            type:
              description: >-
                The type of datasource. Accepts one of these: 'feed',
                'upload'.
              type: string
              enum: [feed, upload]
              default: feed
            config:
              properties:
                messageType:
                  description: The type of message to send
                  type: string
                url:
                  description: The URL to fetch the RSS Feed from
                  type: string
              required:
                - url
                - messageType
              type: object
          required:
            - name
            - config
          type: object
    Datasource:
      properties:
        name:
          description: The source's name
          type: string
        type:
          description: >-
            The type of datasource. Accepts one of these: 'feed',
            'upload'.
          type: string
          default: feed
        config:
          properties:
            messageType:
              description: The type of message to send
              type: string
              example: re.notifica.notification.Alert
            url:
              description: The URL to fetch the RSS Feed from
              type: string
              format: uri
          required:
            - url
            - messageType
          type: object
        interval:
          description: The interval at which to poll the feed
          type: number
          example: 900
        mapType:
          description: >-
            The type of mapping for the source. Accepts one of these:
            'feed', 'category'.
          type: string
          enum: [feed, category]
          default: feed
        mapTarget:
          description: >-
            The mapping target for the source. Accepts one of these:
            'tag', 'segment'.
          type: string
          enum: [tag, segment]
          default: tag
        feedMap:
          description: >-
            A string representing a tag or a segment Id.
            Only used if you choose feed in mapType.
          type: string
          example: tag1
        categoryMap:
          description: Only used and required if you choose category in mapType.
          type: array
          items:
            properties:
              category:
                description: The category in the RSS feed to map
                type: string
                example: News
              target:
                description: The target tag or segment to map to
                type: string
                example: tag1
            required:
              - category
              - target
            type: object
      type: object
    DatasourceSegmentMap:
    DatasourceTagMap:
    Date:
      type: string
      format: date-time
    DateCriteria:
      properties:
        operator:
          enum:
            - eq
            - ne
            - lt
            - lte
            - gt
            - gte
          type: string
        value:
          $ref: '#/components/schemas/Date'
      type: object
    Error:
      properties:
        error:
          type: string
      required: error
      type: object
    EventCriteria:
      properties:
        data:
          properties:
            region:
              $ref: '#/components/schemas/ObjectId'
            fence:
              $ref: '#/components/schemas/ObjectId'
            pass:
              $ref: '#/components/schemas/ObjectId'
            serial:
              type: string
              format: uuid
            group:
              $ref: '#/components/schemas/ObjectId'
            scannable:
              $ref: '#/components/schemas/ObjectId'
            notification:
              $ref: '#/components/schemas/ObjectId'
          type: object
        endDate:
          $ref: '#/components/schemas/Date'
          description: defaults to now
        startDate:
          $ref: '#/components/schemas/Date'
          description: defaults to now
        type:
          type: string
      required:
        - type
        - startDate
        - endDate
      type: object
    LocationsCriteria:
      properties:
        locations:
          items:
            oneOf:
              - $ref: '#/components/schemas/Polygon'
              - $ref: '#/components/schemas/Circle'
          type: array
        quantifier:
          enum:
            - all
            - any
            - none
          type: string
      type: object
    MessageAction:
      properties:
        type:
          type: string
          example: 're.notifica.action.Callback'
        label:
          type: string
          example: Yes
        target:
          type: string
        keyboard:
          default: false
          type: boolean
        camera:
          default: false
          type: boolean
        rules:
          items:
            $ref: '#/components/schemas/MessageRule'
          type: array
      type: object
    MessageAttachment:
      properties:
        mimeType:
          description: the image mime type
          type: string
          example: 'image/jpeg'
        name:
          type: string
          example: Test Attachment
        uri:
          description: >-
            the URL to an image either uploaded into our platform or hosted in
            any public web server
          type: string
          format: uri
          example: 'https://domain.com/image'
      required:
        - uri
        - mimeType
      type: object
    MessageContent:
      properties:
        type:
          description: type according to the type of push message. Please refer to Content types for all available types
          type: string
          example: 're.notifica.content.HTML'
        data:
          description: data according to the type of push message. Please refer to Content types for all available types
          type: string
          example: '<h1>Hello</h1>'
      required:
        - type
        - data
      type: object
    MessageExtra:
      additionalProperties:
        type: string
      example:
        key1: value1
        key2: value2
      type: object
    MessageLights:
      properties:
        color:
          description: Color string
          type: string
          example: red
        'off':
          description: OFF time in milliseconds
          type: number
          example: 500
        'on':
          description: ON time in milliseconds
          type: number
          example: 1000
      type: object
    MessageLocalizedContent:
      properties:
        actions:
          items:
            $ref: '#/components/schemas/MessageAction'
          type: array
        attachments:
          items:
            $ref: '#/components/schemas/MessageAttachment'
          type: array
        content:
          items:
            $ref: '#/components/schemas/MessageContent'
          type: array
        message:
          type: string
          example: Test Message
        subject:
          type: string
          example: Test Subject
        subtitle:
          type: string
          example: Test Subtitle
        title:
          type: string
          example: Test Title
      type: object
    MessageLocation:
      properties:
        distance:
          type: number
          example: 100
        latitude:
          type: number
          example: 52.17747
        longitude:
          type: number
          example: 4.1235
      required:
        - latitude
        - longitude
        - distance
      type: object
    MessageRule:
      properties:
        params:
          items:
            $ref: '#/components/schemas/ObjectId'
          type: array
        type:
          enum:
            - re.notifica.rule.segment.Add
            - re.notifica.rule.segment.Remove
            - re.notifica.rule.tag.Add
            - re.notifica.rule.tag.Remove
          type: string
      required:
        - type
        - params
      type: object
    MessageSender:
      properties:
        address:
          type: string
          example: massimo@notifica.re
        name:
          type: string
          example: Massimo Gondoliere
      required:
        - name
        - address
      type: object
    NotificationPushTriggered:
      allOf:
        - $ref: '#/components/schemas/NotificationPushBroadcast'
        - type: object
          properties:
            criteria:
              $ref: '#/components/schemas/Criteria'
    NotificationPushDevice:
      $ref: '#/components/schemas/NotificationPushBroadcast'
    NotificationPushUser:
      allOf:
        - $ref: '#/components/schemas/NotificationPushBroadcast'
        - type: object
          properties:
            tags:
              type: array
              items:
                type: string
              example: [tag1]
    NotificationPushTags:
      allOf:
        - $ref: '#/components/schemas/NotificationPushBroadcast'
        - type: object
          properties:
            tags:
              type: array
              items:
                type: string
              example: [tag1]
          required:
            - tags
    NotificationPushSegments:
      allOf:
        - $ref: '#/components/schemas/NotificationPushBroadcast'
        - type: object
          properties:
            segments:
              type: array
              items:
                $ref: '#/components/schemas/ObjectId'
            tags:
              type: array
              items:
                type: string
              example: [tag1]
          required:
            - segments
    NotificationPushCriteria:
      allOf:
        - $ref: '#/components/schemas/NotificationPushBase'
        - type: object
          properties:
            criteria:
              $ref: '#/components/schemas/Criteria'
          required:
            - criteria
    NotificationPushEvent:
      allOf:
        - $ref: '#/components/schemas/NotificationPushBroadcast'
        - type: object
          properties:
            eventCriteria:
              $ref: '#/components/schemas/EventCriteria'
            criteria:
              $ref: '#/components/schemas/Criteria'
          required:
            - eventCriteria
    NotificationPushBroadcast:
      allOf:
        - $ref: '#/components/schemas/NotificationPushBase'
        - type: object
          properties:
            location:
              $ref: '#/components/schemas/MessageLocation'
    NotificationPushBase:
      allOf:
        - $ref: '#/components/schemas/NotificationLocalizedBase'
        - type: object
          properties:
            type:
              description: >-
                Defines the type of content to show. Types of messages are
                represented by namespaces. Message types should match the
                following namespace: re.notifica.notification.*. Please refer
                to Message Types for all available types.
              type: string
              example: re.notifica.notification.Alert
            title:
              description: >-
                Small text shown in the device's lock screen or notification
                center. This field should be used as an helper text to the
                message. Please note that this is only supported by iOS 10 or
                higher or Android 5 or higher devices.
              type: string
              example: Hello world
            subtitle:
              description: >-
                Small text shown in the device's lock screen or notification
                center. This field should be used as an helper text to the
                message. Please note that this is only supported by iOS 10 or
                higher or Android 5 or higher devices.
              type: string
              example: Hello world
            message:
              description: >-
                Short and concise message. This is the first thing your user
                sees, make sure it is relevant and that somehow summarizes
                what you intend to say.
              type: string
              example: Hello world
            content:
              description: >-
                An array of Content objects according to the type of push
                message. Please refer to Content types for all available
                types.
              items:
                $ref: '#/components/schemas/MessageContent'
              type: array
            attachments:
              description: >-
                An object containing the URL to an image either uploaded into
                our platform or hosted in any public web server.
              items:
                $ref: '#/components/schemas/MessageAttachment'
              type: array
            ttl:
              description: >-
                Number of seconds the message will be attempted to be
                delivered by APNS or GCM.
              type: number
              example: 3600
            rules:
              description: >-
                Adds one or more rules to a notification. An array of rules
                objects. Please refer to Rules objects for all types
                available.
              items:
                $ref: '#/components/schemas/MessageRule'
              type: array
            actionCategory:
              description: >-
                Use a previously created Rich Push template for your message.
                Use the name of the template for this property and the actions
                in that template as the actions for this notification. This
                will enable actionable notifications from the notification
                center in both iOS and Android.
              type: string
              example: My Template
            actions:
              description: >-
                Adds one or more interactions to a notification. An array of
                Action objects. Please refer to Action objects for all types
                available.
              items:
                $ref: '#/components/schemas/MessageAction'
              type: array
            extra:
              $ref: '#/components/schemas/MessageExtra'
              description: >-
                A valid one-level JSON object. This is useful if you need to
                send extra data that you will need to process soon the
                notification arrives.
            sound:
              description: >-
                Name of sound to play. `default` means use the default sound
                as set by the user, any other string will be looked up as
                sound file on the device (`mp3` on Android, `aiff` on iOS).
              type: string
              example: default
            lights:
              description: >-
                An object containing a color string ("white", "red",
                "#rrggbb", "#aarrggbb") and the on/off time in milliseconds.
                Colors are only applicable to Android and will be displayed by
                hardware as accurately as possible.
              items:
                $ref: '#/components/schemas/MessageLights'
              type: array
            channel:
              description: >-
                This is an Android only property. If the channel is defined in the app,
                the message will be sent to that channel, otherwise to the
                default channel.
              type: string
              example: important
            badge:
              description: >-
                This is an iOS only property. A badge will be displayed over
                your app icon whenever a notification arrives. Use a number
                from 1 to 9999.
              type: number
              example: 1
            presentation:
              description: >-
                In iOS (2.1 and higher), will set presentation mode for
                foreground messages.
                In Android (2.1 and higher), it will set the presentation
                parameter to true in the foreground message handler.
              type: boolean
            requireInteraction:
              description: >-
                This is a Web only property. In WebPush, will set the requireInteraction
                flag to true
              type: boolean
            push:
              description: >-
                This property is only available for SDKs 1.8.0 and up. When
                false it will only create a message in the app's inbox and not
                generate a remote notification. By default this property will
                be true. Please note that this property will be ignored if
                Inbox is not being used.
              type: boolean
          required:
            - type
            - message
    NotificationSystemDevice:
      $ref: '#/components/schemas/NotificationSystemBase'
    NotificationSystemUser:
      allOf:
        - $ref: '#/components/schemas/NotificationSystemBase'
        - type: object
          properties:
            tags:
              type: array
              items:
                type: string
              example: [tag1]
    NotificationSystemBroadcast:
      allOf:
        - $ref: '#/components/schemas/NotificationSystemBase'
        - type: object
          properties:
            criteria:
              $ref: '#/components/schemas/Criteria'
            segments:
              type: array
              items:
                $ref: '#/components/schemas/ObjectId'
            tags:
              type: array
              items:
                type: string
              example: [tag1]
            location:
              $ref: '#/components/schemas/MessageLocation'
          required:
            - type
    NotificationSystemBase:
      allOf:
        - $ref: '#/components/schemas/NotificationBase'
        - type: object
          properties:
            type:
              description: >-
                Defines a type of for your silent message. Types of notifications are
                represented by namespaces. Custom notification types should a reverse
                domain style string: com.domain.*.
              type: string
              example: your.domain.system.type
            extra:
              $ref: '#/components/schemas/MessageExtra'
              description: >-
                A valid one-level JSON object. This is useful if you need to
                send extra data that you will need to process soon the
                notification arrives.
          required:
            - type
    NotificationEmailTriggered:
      allOf:
        - $ref: '#/components/schemas/NotificationEmailBase'
        - type: object
          properties:
            criteria:
              $ref: '#/components/schemas/Criteria'
    NotificationEmailDevice:
      $ref: '#/components/schemas/NotificationEmailBroadcast'
    NotificationEmailUser:
      allOf:
        - $ref: '#/components/schemas/NotificationEmailBase'
        - type: object
          properties:
            tags:
              type: array
              items:
                type: string
              example: [tag1]
    NotificationEmailTags:
      allOf:
        - $ref: '#/components/schemas/NotificationEmailBase'
        - type: object
          properties:
            tags:
              type: array
              items:
                type: string
              example: [tag1]
          required:
            - tags
    NotificationEmailSegments:
      allOf:
        - $ref: '#/components/schemas/NotificationEmailBase'
        - type: object
          properties:
            segments:
              type: array
              items:
                $ref: '#/components/schemas/ObjectId'
            tags:
              type: array
              items:
                type: string
              example: [tag1]
          required:
            - segments
    NotificationEmailCriteria:
      allOf:
        - $ref: '#/components/schemas/NotificationEmailBase'
        - type: object
          properties:
            criteria:
              $ref: '#/components/schemas/Criteria'
          required:
            - criteria
    NotificationEmailEvent:
      allOf:
        - $ref: '#/components/schemas/NotificationEmailBase'
        - type: object
          properties:
            eventCriteria:
              $ref: '#/components/schemas/EventCriteria'
            criteria:
              $ref: '#/components/schemas/Criteria'
          required:
            - eventCriteria
    NotificationEmailBroadcast:
      $ref: '#/components/schemas/NotificationEmailBase'
    NotificationEmailBase:
      allOf:
        - $ref: '#/components/schemas/NotificationLocalizedBase'
        - type: object
          properties:
            type:
              description: >-
                Defines the type of content to show. Types of messages are
                represented by namespaces. Message types should match the
                following namespace: re.notifica.notification.*. Please refer
                to Message Types for all available types.
              type: string
              example: re.notifica.notification.Alert
            subject:
              description: >-
                Subject of your email message
              type: string
              example: Hello world
            content:
              description: >-
                An array of Content objects according to the type of push
                message. Please refer to Content types for all available
                types.
              items:
                $ref: '#/components/schemas/MessageContent'
              type: array
            attachments:
              description: >-
                An object containing the URL to an image either uploaded into
                our platform or hosted in any public web server.
              items:
                $ref: '#/components/schemas/MessageAttachment'
              type: array
            sender:
              description: >-
                The sender of your message, if different from the
                default sender in your application. Email domain must
                match the domain of the application.
              $ref: '#/components/schemas/MessageSender'
            rules:
              description: >-
                Adds one or more rules to a notification. An array of rules
                objects. Please refer to Rules objects for all types
                available.
              items:
                $ref: '#/components/schemas/MessageRule'
              type: array
          required:
            - type
            - subject
    NotificationSmsTriggered:
      allOf:
        - $ref: '#/components/schemas/NotificationSmsBase'
        - type: object
          properties:
            criteria:
              $ref: '#/components/schemas/Criteria'
    NotificationSmsDevice:
      $ref: '#/components/schemas/NotificationSmsBroadcast'
    NotificationSmsUser:
      allOf:
        - $ref: '#/components/schemas/NotificationSmsBase'
        - type: object
          properties:
            tags:
              type: array
              items:
                type: string
              example: [tag1]
    NotificationSmsTags:
      allOf:
        - $ref: '#/components/schemas/NotificationSmsBase'
        - type: object
          properties:
            tags:
              type: array
              items:
                type: string
              example: [tag1]
          required:
            - tags
    NotificationSmsSegments:
      allOf:
        - $ref: '#/components/schemas/NotificationSmsBase'
        - type: object
          properties:
            segments:
              type: array
              items:
                $ref: '#/components/schemas/ObjectId'
            tags:
              type: array
              items:
                type: string
              example: [tag1]
          required:
            - segments
    NotificationSmsCriteria:
      allOf:
        - $ref: '#/components/schemas/NotificationSmsBase'
        - type: object
          properties:
            criteria:
              $ref: '#/components/schemas/Criteria'
          required:
            - criteria
    NotificationSmsEvent:
      allOf:
        - $ref: '#/components/schemas/NotificationSmsBase'
        - type: object
          properties:
            eventCriteria:
              $ref: '#/components/schemas/EventCriteria'
            criteria:
              $ref: '#/components/schemas/Criteria'
          required:
            - eventCriteria
    NotificationSmsBroadcast:
      $ref: '#/components/schemas/NotificationSmsBase'
    NotificationSmsBase:
      allOf:
        - $ref: '#/components/schemas/NotificationLocalizedBase'
        - type: object
          properties:
            message:
              description: >-
                The text (140 characters) of your message.
              type: string
              example: Hello world
          required:
            - message
    NotificationLocalizedBase:
      allOf:
        - $ref: '#/components/schemas/NotificationBase'
        - type: object
          properties:
            languages:
              description: >-
                The list of localized content language identifiers used in
                localizedContent. When included, you must also provide a list
                of localizedContent objects in the same order.
              items:
                type: string
              example: [nl, pt]
              type: array
            localizedContent:
              description: >-
                Provides content for all the language identifiers provided in
                languages.
              items:
                $ref: '#/components/schemas/MessageLocalizedContent'
              type: array
    NotificationBase:
      properties:
        scheduled:
          description: >-
            When true will prevent the message from being sent.
            Additionally you will have to create a schedule task by
            calling the /notification/schedule.
          type: boolean
          default: false
        rate:
          description: >-
            The rate at which we will send notifications in seconds. If
            provided, we will not send more than x messages per second.
          type: number
          example: 100
    NotificationTestPushDevice:
      allOf:
        - $ref: '#/components/schemas/NotificationTestPushBase'
        - type: object
          properties:
            criteria:
              $ref: '#/components/schemas/Criteria'
    NotificationTestPushUser:
      allOf:
        - $ref: '#/components/schemas/NotificationTestPushBroadcast'
        - type: object
          properties:
            tags:
              type: array
              items:
                type: string
                example: [tag1]
    NotificationTestPushTags:
      allOf:
        - $ref: '#/components/schemas/NotificationTestPushBroadcast'
        - type: object
          properties:
            tags:
              type: array
              items:
                type: string
                example: [tag1]
          required:
            - tags
    NotificationTestPushSegments:
      allOf:
        - $ref: '#/components/schemas/NotificationTestPushBroadcast'
        - type: object
          properties:
            segments:
              type: array
              items:
                $ref: '#/components/schemas/ObjectId'
            tags:
              type: array
              items:
                type: string
                example: [tag1]
          required:
            - segments
    NotificationTestPushEvent:
      allOf:
        - $ref: '#/components/schemas/NotificationTestPushBase'
        - type: object
          properties:
            eventCriteria:
              $ref: '#/components/schemas/EventCriteria'
            criteria:
              $ref: '#/components/schemas/Criteria'
          required:
            - eventCriteria
    NotificationTestPushCriteria:
      allOf:
        - $ref: '#/components/schemas/NotificationTestPushBase'
        - type: object
          properties:
            criteria:
              $ref: '#/components/schemas/Criteria'
          required:
            - criteria
    NotificationTestPushBroadcast:
      allOf:
        - $ref: '#/components/schemas/NotificationTestPushBase'
        - type: object
          properties:
            location:
              $ref: '#/components/schemas/MessageLocation'
    NotificationTestPushBase:
      properties:
        message:
          description: >-
            Dummy message
          type: string
          example: Hello world
      required:
        - message
    NotificationTestEmailDevice:
      allOf:
        - $ref: '#/components/schemas/NotificationTestEmailBase'
        - type: object
          properties:
            criteria:
              $ref: '#/components/schemas/Criteria'
    NotificationTestEmailUser:
      allOf:
        - $ref: '#/components/schemas/NotificationTestEmailBase'
        - type: object
          properties:
            tags:
              type: array
              items:
                type: string
                example: [tag1]
    NotificationTestEmailTags:
      allOf:
        - $ref: '#/components/schemas/NotificationTestEmailBase'
        - type: object
          properties:
            tags:
              type: array
              items:
                type: string
                example: [tag1]
          required:
            - tags
    NotificationTestEmailSegments:
      allOf:
        - $ref: '#/components/schemas/NotificationTestEmailBase'
        - type: object
          properties:
            segments:
              type: array
              items:
                $ref: '#/components/schemas/ObjectId'
            tags:
              type: array
              items:
                type: string
                example: [tag1]
          required:
            - segments
    NotificationTestEmailEvent:
      allOf:
        - $ref: '#/components/schemas/NotificationTestEmailBase'
        - type: object
          properties:
            eventCriteria:
              $ref: '#/components/schemas/EventCriteria'
            criteria:
              $ref: '#/components/schemas/Criteria'
          required:
            - eventCriteria
    NotificationTestEmailCriteria:
      allOf:
        - $ref: '#/components/schemas/NotificationTestEmailBase'
        - type: object
          properties:
            criteria:
              $ref: '#/components/schemas/Criteria'
          required:
            - criteria
    NotificationTestEmailBase:
      properties:
        subject:
          description: >-
            Dummy subject
          type: string
          example: Hello world
      required:
        - subject
    NotificationTestSmsDevice:
      allOf:
        - $ref: '#/components/schemas/NotificationTestSmsBase'
        - type: object
          properties:
            criteria:
              $ref: '#/components/schemas/Criteria'
    NotificationTestSmsUser:
      allOf:
        - $ref: '#/components/schemas/NotificationTestSmsBase'
        - type: object
          properties:
            tags:
              type: array
              items:
                type: string
                example: [tag1]
    NotificationTestSmsTags:
      allOf:
        - $ref: '#/components/schemas/NotificationTestSmsBase'
        - type: object
          properties:
            tags:
              type: array
              items:
                type: string
                example: [tag1]
          required:
            - tags
    NotificationTestSmsSegments:
      allOf:
        - $ref: '#/components/schemas/NotificationTestSmsBase'
        - type: object
          properties:
            segments:
              type: array
              items:
                $ref: '#/components/schemas/ObjectId'
            tags:
              type: array
              items:
                type: string
                example: [tag1]
          required:
            - segments
    NotificationTestSmsEvent:
      allOf:
        - $ref: '#/components/schemas/NotificationTestSmsBase'
        - type: object
          properties:
            eventCriteria:
              $ref: '#/components/schemas/EventCriteria'
            criteria:
              $ref: '#/components/schemas/Criteria'
          required:
            - eventCriteria
    NotificationTestSmsCriteria:
      allOf:
        - $ref: '#/components/schemas/NotificationTestSmsBase'
        - type: object
          properties:
            criteria:
              $ref: '#/components/schemas/Criteria'
          required:
            - criteria
    NotificationTestSmsBase:
      properties:
        message:
          description: >-
            Dummy message
          type: string
          example: Hello world
      required:
        - message
    ObjectCreated:
      type: object
      properties:
        _id:
          $ref: '#/components/schemas/ObjectId'
    ObjectId:
      type: string
      example: 1d9e80ef851d212aca82cf23
    PassData:
      properties: {}
      type: object
    Point:
      properties:
        coordinates:
          $ref: '#/components/schemas/Coordinates'
        type:
          type: string
          enum: [Point]
      required:
        - coordinates
        - type
      type: object
    Polygon:
      properties:
        coordinates:
          items:
            $ref: '#/components/schemas/CoordinatesRing'
          type: array
        type:
          type: string
          enum: [Polygon]
      required:
        - coordinates
        - type
      type: object
    PropertiesCriteria:
      items:
        $ref: '#/components/schemas/PropertiesCriterion'
      type: array
    PropertiesCriterion:
      properties:
        operator:
          enum:
            - eq
            - ne
            - lt
            - lte
            - gt
            - gte
            - in
            - nin
          type: string
        property:
          type: string
          example: platform
        value:
          oneOf:
            - type: string
            - type: array
              items:
                type: string
          example: Android
      type: object
    SegmentsCriteria:
      properties:
        quantifier:
          enum:
            - all
            - any
            - none
          type: string
        segments:
          items:
            $ref: '#/components/schemas/ObjectId'
          type: array
      type: object
    TagsCriteria:
      properties:
        tags:
          items:
            type: string
            example: tag_test
          type: array
        quantifier:
          enum:
            - all
            - any
            - none
          type: string
      type: object
tags:
  - description: >-
      Handles authentication with the REST API.

      Includes the `token` that will be required to create, edit and delete
      applications and get global stats about your account.
    name: Account
  - description: >-
      Your account can create as many applications as you want.

      Applications must provide a name, a category and the environment it should
      use. When you create an application three access keys will be
      automatically created for you.

      These keys will be used in by both your apps and this API to access your
      applications. Make sure you never share these keys publicly online.
    name: Application
  - description: >-
      Storage is an add-on of Notificare. When active this add-on will let you
      manage files and create groups of assets to be used in your applications.

      Therefore this add-on is divided in two different endpoints: assets and
      asset groups. Assets being the files you can upload to Notificare and
      asset groups being the groups of files that can be used in an application.
    name: Asset
  - description: >-
      Automation is an add-on of Notificare. It will give you access to
      mechanisms that can automate how you send notifications.
    name: Automation
  - description: >-
      Methods to manage your beacons. Be sure to add the
      `regionConfig.proximityUUID` in your Application and create a Region
      first.

      Also beacons require that you create a triggered message previously.
    name: Beacon
  - description: >-
      Methods to manage devices.

      Use these methods to retrieve information about devices for an
      application, for a specific user, for a specific tag or in a specific
      location.

      Management of devices is exclusively made by our SDK libraries therefore
      you only get access to read operations.
    name: Device
  - description: Create email contacts for you apps.
    name: Email
  - description: >-
      Get all the Events stored for a specific application.


      ## Event Types:


      | type | description |

      |:---------:|----------------------------------|

      | re.notifica.event.application.Install | Stored whenever a new device
      installs the app. |

      | re.notifica.event.application.Uninstall | Stored whenever an app was
      removed from the device, as reported by APNS or GCM feedback. |

      | re.notifica.event.application.Open | Stored whenever the application
      becomes active. |

      | re.notifica.event.application.Close | Stored whenever the application
      goes to background. |

      | re.notifica.event.notification.Influenced | Stored whenever a
      notification when app is not active. |

      | re.notifica.event.notification.Sent | Stored whenever a notification is
      sent. |

      | re.notifica.event.notification.Receive | Stored whenever a notification
      arrives. |

      | re.notifica.event.notification.Open | Stored whenever a notification is
      open. |

      | re.notifica.event.region.Session | Stored whenever a user enters and
      leaves a region. |

      | re.notifica.event.beacon.Session | Stored whenever a user is on the
      proximity of a beacon. |

      | re.notifica.event.pass.Add | Stored whenever a pass is added to a
      device's wallet. |

      | re.notifica.event.pass.Remove | Stored whenever a pass is removed from a
      device's wallet. |

      | re.notifica.event.pass.Redeem | Stored whenever a pass is redeemed. |

      | re.notifica.event.asset.Load | Stored whenever an asset group is loaded.
      |

      | re.notifica.event.scannable.Scan | Stored whenever a scannable is
      scanned. |

      | re.notifica.event.product.Buy | Stored whenever a purchase is done. |

      | re.notifica.event.product.Buy.{store} | Stored whenever a purchase is
      done, where store is AppStore or GooglePlay. |

      | re.notifica.event.product.Buy.{store}.{identifier} | Stored whenever a
      purchase is done, where store is AppStore or GooglePlay. |
    name: Event
  - description: Methods for exporting users and devices.
    name: Export
  - description: >-
      Methods for retrieving information about timezone, country, forward and
      reverse geocoding.
    name: Geo
  - description: >-
      Methods for importing collections of items. Files are assumed to be
      uploaded to Notificare Storage before they can be used in a new import.
      Use this [endpoint](http://docs.notificare.apiary.io/#reference/upload) to
      upload a file.
    name: Import
  - description: >-
      Methods to create short links in Notificare. Links can be used to redirec
      users to existing web pages or to server HTML markup hosted in Notificare.
    name: Links
  - description: >-
      Methods to create, send and schedule messages to your audience. We support
      several channels: Push (iOS, Android & Web), Email and SMS.

      You can send a broadcast, select a group of users (Segments), select a
      group of devices (Tags), select devices that executed certain events or
      combine segments, tags, location and device properties in a powerful
      criteria for fine-grained results.


      # Push


      ## Message Types:


      | type | description |

      |:---------:|-------------|

      | re.notifica.notification.Alert | The simplest form of push messages, it
      will display the message in a dialog/alert window. It does not require a
      content object. You can although add Action objects to it, actions will be
      added to the window as buttons. |

      | re.notifica.notification.WebView | This type allows you to show any
      piece of HTML. It requires a Content object of type
      `re.notifica.content.HTML`. You can additionally add Action objects to
      this type of push message. |

      | re.notifica.notification.URL | Use this type to open any URL. It
      requires a Content object of type `re.notifica.content.URL`. You can
      additionally add Action objects to this type of push message. |

      | re.notifica.notification.Image | Add one or more images to your push
      messages. It requires one or more Content objects of types
      `re.notifica.content.JPEG`, `re.notifica.content.PNG` or
      `re.notifica.content.GIF`. You can additionally add Action objects to this
      type of push message. |

      | re.notifica.notification.Map | This type of push message will use the
      device's native maps (iOS & Android) or any map library (Web) to display
      one or more locations. It requires one or more Content objects of type
      `re.notifica.content.Marker`. You can additionally add Action objects to
      this type of push message. |

      | re.notifica.notification.Rate | This type is used exclusively to send a
      dialog window with three Action objects included. The user can then choose
      to rate the app in App Store/Google Play, to be remembered later to rate
      or to not rate at all. This type of push message does not require any
      Content object. Also you cannot add any more Action objects to this type
      of push message. |

      | re.notifica.notification.Passbook | Use this type to easily send .pkpass
      files in your push notifications. Distribute your Passbook Passes directly
      to your app users. This type does not allow any Action objects. |

      | re.notifica.notification.Video | This type of push message is used to
      send video content to your users. It requires one of these three types of
      content: `re.notifica.content.YouTube`, `re.notifica.content.Vimeo` or
      `re.notifica.content.HTML5Video`. You can additionally add Action objects
      to this type of push message. This type is only available for SDKs 1.8.0
      and up. |

      | re.notifica.notification.URLScheme | Use this type of push message to
      deep link messages to areas of your mobile app (iOS & Android) or web
      pages (Web). You will need to make sure your app responds to these URL
      Schemes by providing them in you app's Info.plist (iOS) or
      AndroidManifest.xml (Android). This type is only available for SDKs 1.8.0
      and up. |

      | re.notifica.notification.None | Use this type if you do not wish to show
      any UI in Notificare but still make sure we gather metrics. When using
      this type you can still handle the notifications yourself so it is
      possible to still include content, actions or extra parameters. This type
      is only available for SDKs 1.8.0 and up. |


      ## Content Objects:


      | type | data |

      |:---------:|-------------|

      | re.notifica.content.Text | string (eg.: "Hello World!") |

      | re.notifica.content.HTML | string (eg.: "\<h1>Hello World!\</h1>") |

      | re.notifica.content.URL | string (eg.: "http://notifica.re") |

      | re.notifica.content.Image | string (eg.:
      "https://s3-eu-west-1.amazonaws.com/notificare-storage/notifications/9fd.../6ccd..")
      |

      | re.notifica.content.Marker | object (eg.: {"title":"Some Place",
      "description":"Some description about that place", "latitude": 4.098765,
      "longitude": 5.08875}) |

      | re.notifica.content.PKPass | string (eg.:
      "http://notifica.re/path/to/my/pass.pkpass") |

      | re.notifica.content.YouTube | string (eg.: "3t_EN-HZVLw") |

      | re.notifica.content.Vimeo | string (eg.: "75196023") |

      | re.notifica.content.HTML5Video | string (eg.:
      "https://push.notifica.re/asset/file/3d99d18.../1b029...") |


      ## Action Objects:


      | type | label | target | keyboard | camera | rules |

      |:---------:|:---------:|:---------:|:---------:|:---------:|:---------:|

      | re.notifica.action.Callback | string (eg.: "open cam") | string (eg.:
      "http://api.notifica.re/register?action=xpto&var=xyz") | boolean | boolean
      | array (eg.:
      [{"type":"re.notifica.rule.segment.Add",params:["532434df434657df4664"]}])
      |

      | re.notifica.action.Telephone | string (eg.: "make a call") | string
      (eg.: "tel:0500666858") | n/a | n/a | array (eg.:
      [{"type":"re.notifica.rule.segment.Add",params:["532434df434657df4664"]}])
      |

      | re.notifica.action.SMS | string (eg.: "send sms") | string (eg.:
      "0500666858") | n/a | n/a | array (eg.:
      [{"type":"re.notifica.rule.segment.Add",params:["532434df434657df4664"]}])
      |

      | re.notifica.action.Mail | string | string (eg.:
      "me@company.com","you@company.com") | n/a | n/a | array (eg.:
      [{"type":"re.notifica.rule.segment.Add",params:["532434df434657df4664"]}])
      |

      | re.notifica.action.Browser | string (eg.: "open notifica.re") | string
      (eg.:"http://notifica.re") | n/a | n/a | array (eg.:
      [{"type":"re.notifica.rule.segment.Add",params:["532434df434657df4664"]}])
      |

      | re.notifica.action.App | string (e.g., "open facebook") | string (eg.:
      "fb://") | n/a | n/a | array (eg.:
      [{"type":"re.notifica.rule.segment.Add",params:["532434df434657df4664"]}])
      |

      | re.notifica.action.Custom | string (eg.: "open tab") | string (eg.:
      "openTabInMyCode") | n/a | n/a | array (eg.:
      [{"type":"re.notifica.rule.segment.Add",params:["532434df434657df4664"]}])
      |


      ## Rules Objects:


      | type | params |

      |:---------:|-------------|

      | re.notifica.rule segment.Add | array of segment Ids (eg.:
      ["532434df434657df4664","532434df434657df4664"]) |

      | re.notifica.rule segment.Remove | array of segment Ids (eg.:
      ["532434df434657df4664","532434df434657df4664"]) |

      | re.notifica.rule tag.Add | array of tags (eg.: ["tag_news","tag_press"])
      |

      | re.notifica.rule tag.Remove | array of tags (eg.:
      ["tag_news","tag_press"]) |


      # Email


      ## Email Message Types:


      | type | description |

      |:---------:|-------------|

      | re.notifica.notification.email.HTML | The most flexible type of email
      messages. You can should your own HTML to design your email messages. |

      | re.notifica.notification.email.Notificare | This type is reserved for
      messages designed in our dashboard. It will expect a certain structure to
      be compatible with our email designer composer and therefore should only
      be used via these endpoints if you are familiar with it.  |


      ## Content Objects:


      | type | data |

      |:---------:|-------------|

      | re.notifica.content.Text | string (eg.: "Hello World!") |

      | re.notifica.content.HTML | string (eg.: "\<h1>Hello World!\</h1>") |


      ## Rules Objects:


      | type | params |

      |:---------:|-------------|

      | re.notifica.rule segment.Add | array of segment Ids (eg.:
      ["532434df434657df4664","532434df434657df4664"]) |

      | re.notifica.rule segment.Remove | array of segment Ids (eg.:
      ["532434df434657df4664","532434df434657df4664"]) |

      | re.notifica.rule tag.Add | array of tags (eg.: ["tag_news","tag_press"])
      |

      | re.notifica.rule tag.Remove | array of tags (eg.:
      ["tag_news","tag_press"]) |
    name: Messages
  - description: >-
      Methods to create, list, modify or cancel scheduled messages. Schedule
      tasks can be set according to a specific time (in UTC) or according to the
      local timezone on the device.

      In the first case, the schedule will only run once, in the latter case,
      the schedule will run until all timezones have passed the time in the
      schedule.

      A schedule can have a status of `scheduled`, `running`, `finished` or
      `canceled`. Only when in the `scheduled` status messages or its scheduled
      date can be modified.

      These methods operate on existing notifications, so create a notification
      first with the `scheduled` property set.

      Use its `_id` property to refer to it in any of these methods.
    name: Message Schedule
  - description: >-
      Methods for retrieving, creating and edit message templates. Templates can
      be created for different types of channels. Supported channels are: push,
      email and sms.
    name: Message Template
  - description: >-
      Methods to test audience selection. Retrieves information about the
      current number of users or devices your selection will reach. These
      endpoints execute a dry-run for your audience selection and will not send
      any message.
    name: Message Test
  - description: >-
      Methods to manage your passes. Before creating passes you must create
      passbook templates. To create, edit and delete templates see the
      [Passbook](http://docs.notificare.apiary.io/#passbook) endpoints.
    name: Pass
  - description: >-
      Methods to manage your passbook templates. These templates should be
      created before you can start creating passes.

      They will help you pre-define the template styles your application needs
      and accelerate pass creation. To create and redeem passes see also the
      [Pass](http://docs.notificare.apiary.io/#reference/pass) endpoints. Pass
      templates will require images, see also the
      [Uploads](http://docs.notificare.apiary.io/#reference/upload) endpoints to
      learn how to upload a file.
    name: Pass Templates
  - description: >-
      Methods to manage your virtual products. Products can be purchased inside
      your application through both the App Store and Google Play.
    name: Product
  - name: Purchase
  - description: >-
      Methods to manage your regions. Regions are geo-fences that can eventually
      have Triggers and/or Beacons.

      When none are created your region will just gather the session data as
      users enter and leave that area or are in the range of your beacons.

      You can have a combination of Triggers and Beacons or just one of them.
      Note that iBeacon technology requires users to turn on Bluetooth to work.
    name: Region
  - description: >-
      A Reply object is what Notificare creates when users interact with
      notifications with actions.

      These objects hold every single interaction and data your users send you.
    name: Reply
  - description: >-
      Methods to retrieve usage reports of application resources in the API.

      These requests must be authenticated with the `applicationKey` and
      `masterSecret`.
    name: Application Stats
  - description: |-
      Methods to retrieve usage reports of account resources in the API.
      These requests must be authenticated with the `token`.
    name: Account Stats
  - description: Create sms numbers for you apps.
    name: SMS
  - description: >-
      Public methods to retrieve information about the status and health of the
      API
    name: Status
  - description: >-
      Methods to retrieve tags.

      Use these methods to retrieve information about device tags for an
      application.

      Management of tags is exclusively made by our SDK libraries therefore you
      only get access to read operations.
    name: Tag
  - description: >-
      Methods to manage your triggers. Triggers are used to send messages when a
      transition into or out of a region occurs.

      There are two types of triggers, Region triggers and Beacon triggers. They
      are used by regions and beacons to send notifications whenever a device
      enters/exits a Region or is in the proximity range of a Beacon.


      ## Trigger Types:


      | type | description |

      |:---------:|-------------|

      | re.notifica.trigger.region.Enter | Device entered a region |

      | re.notifica.trigger.region.Exit | Device exited a region |

      | re.notifica.trigger.beacon.Enter | Device entered a beacon range |

      | re.notifica.trigger.beacon.Exit | Device exited a beacon range |
    name: Trigger
  - description: >-
      These methods let you manage files.

      All the files you upload to Notificare can be used as content of your
      notifications, replies, import jobs, WebPush icons and passes.
    name: Upload
  - description: >-
      These methods let you create, change and remove user segments as well as
      manage add, remove or clear all users from a segment.
    name: User Segment
  - description: >-
      Methods for retrieving (groups of) users. Additionally you can also add
      and remove them from user segments.
    name: User
